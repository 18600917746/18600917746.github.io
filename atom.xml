<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cheng</title>
  
  <subtitle>腹有诗书气自华</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="18600917746.github.io/"/>
  <updated>2019-02-18T07:44:55.133Z</updated>
  <id>18600917746.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hello-typescript</title>
    <link href="18600917746.github.io/2019/02/18/hello-typescript/"/>
    <id>18600917746.github.io/2019/02/18/hello-typescript/</id>
    <published>2019-02-18T07:44:24.000Z</published>
    <updated>2019-02-18T07:44:55.133Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="typescript" scheme="18600917746.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>hello-cssmodules</title>
    <link href="18600917746.github.io/2019/02/18/hello-cssmodules/"/>
    <id>18600917746.github.io/2019/02/18/hello-cssmodules/</id>
    <published>2019-02-18T02:24:52.000Z</published>
    <updated>2019-02-18T06:39:03.944Z</updated>
    
    <content type="html"><![CDATA[<h3 id="现有的-css-问题"><a href="#现有的-css-问题" class="headerlink" title="现有的 css 问题"></a>现有的 <code>css</code> 问题</h3><ul><li>全局污染</li><li>命名混乱</li><li>依赖引入复杂</li><li>无法共享变量</li><li>代码冗余</li></ul><h4 id="解决问题的两大门派"><a href="#解决问题的两大门派" class="headerlink" title="解决问题的两大门派"></a>解决问题的两大门派</h4><blockquote><p>一类是彻底抛弃 CSS，使用 JS 或 JSON 来写样式。</p></blockquote><ul><li>Radium</li><li>jsxstyle</li><li>react-style</li></ul><p>优点：能给 CSS 提供 JS 同样强大的模块化能力</p><p>缺点：不能利用成熟的 CSS 预处理器（或后处理器） Sass/Less/PostCSS， :hover 和 :active 伪类处理起来复杂。</p><blockquote><p>另一类是依旧使用 CSS，但使用 JS 来管理样式依赖</p></blockquote><ul><li>CSS Modules</li></ul><p>CSS Modules 能最大化地结合现有 CSS 生态和 JS 模块化能力。发布时依旧编译出单独的 JS 和 CSS。它并不依赖于 React，只要你使用 Webpack，可以在 Vue/Angular/jQuery 中使用。</p><h4 id="cssModules-在-webpack-中使用"><a href="#cssModules-在-webpack-中使用" class="headerlink" title="cssModules 在 webpack 中使用"></a><code>cssModules</code> 在 <code>webpack</code> 中使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line">module: &#123;</span><br><span class="line">  loaders: [&#123;</span><br><span class="line">    test: /\.jsx?$/,</span><br><span class="line">    loader: &apos;babel&apos;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    test: /\.scss$/,</span><br><span class="line">    exclude: path.resolve(__dirname, &apos;src/styles&apos;),</span><br><span class="line">    loader: &apos;style!css?modules&amp;localIdentName=[name]__[local]!sass?sourceMap=true&apos;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    test: /\.scss$/,</span><br><span class="line">    include: path.resolve(__dirname, &apos;src/styles&apos;),</span><br><span class="line">    loader: &apos;style!css!sass?sourceMap=true&apos;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>name 标签名称</li><li>local 类名</li><li>hash:base64:5 随机哈希值前5位</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* components/test.css */</span><br><span class="line">.active &#123; </span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">.disabled &#123;</span><br><span class="line">    color: gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* components/test.js */</span><br><span class="line">import styles from &apos;./test.css&apos;;</span><br><span class="line"></span><br><span class="line">console.log(styles);</span><br><span class="line"></span><br><span class="line">elem.outerHTML = `&lt;h1 class=$&#123;styles.active&#125;&gt;CSS Modules&lt;/h1&gt;`</span><br></pre></td></tr></table></figure><ul><li>console.log 打印的内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object &#123;</span><br><span class="line">  active: &apos;h1--active-abc53&apos;,</span><br><span class="line">  disabled: &apos;h1--disabled-def84&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>生成的类名</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h1--active-abc53"</span>&gt;</span> Processing... <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="cssModules-的意义"><a href="#cssModules-的意义" class="headerlink" title="cssModules 的意义"></a><code>cssModules</code> 的意义</h4><ul><li>CSS Modules 对 CSS 中的 class 名都做了处理，使用对象来保存原 class 和定制处理后的 class 的对应关系。经过这样类名定制处理后，class 名基本就是唯一的，大大降低了项目中样式覆盖的几率。同时可以生成更短的 class 名，减少代码量。</li></ul><h4 id="cssModules-的使用"><a href="#cssModules-的使用" class="headerlink" title="cssModules 的使用"></a><code>cssModules</code> 的使用</h4><ul><li>局部变量和全局变量<ul><li>局部变量 :local() 遵循 <code>localIdentName</code> 处理规则</li><li>全局变量 :global 编译以后不变</li></ul></li><li>唯一哈希类名<ul><li>开启CSS Modules时定义的规则localIdentName=[name]__[local]-[hash:base64:5]会控制对class名的处理， [hash:base64:5]定义的hash计算能保证类名的唯一性。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:local(.normal)</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 上面两个等价，默认给每个 class 名外加加了一个 `:local` */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全局样式 */</span></span><br><span class="line"><span class="selector-pseudo">:global</span> &#123;</span><br><span class="line">  .link &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">green</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Compose-组合Class"><a href="#Compose-组合Class" class="headerlink" title="Compose 组合Class"></a>Compose 组合Class</h4><ul><li>很多时候我们都需要样式复用，在 CSS Modules 中，一个选择器可以继承另一个选择器的规则，这称为composes 组合。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* components/test.css */</span><br><span class="line">.bg &#123;</span><br><span class="line">  background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">  composes: bg;</span><br><span class="line">  color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* components/test.js */</span><br><span class="line">import styles from &apos;./test.css&apos;;</span><br><span class="line"></span><br><span class="line">elem.outerHTML = `&lt;h1 class=$&#123;styles.title&#125;&gt;CSS Modules&lt;/h1&gt;`</span><br></pre></td></tr></table></figure><ul><li>解析结果</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h1--bg-fec53 h1--title-Ijf8"</span>&gt;</span> Processing... <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="CSS-和-JS-变量共享"><a href="#CSS-和-JS-变量共享" class="headerlink" title="CSS 和 JS 变量共享"></a><code>CSS</code> 和 <code>JS</code> 变量共享</h4><ul><li><code>:export</code> 关键字可以把 <code>CSS</code> 中的 变量输出到 <code>JS</code> 中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* index.scss */</span><br><span class="line">$primary-color: #f40;</span><br><span class="line"></span><br><span class="line">:export &#123;</span><br><span class="line">  primaryColor: $primary-color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* app.js */</span><br><span class="line">import style from &apos;index.scss&apos;;</span><br><span class="line"></span><br><span class="line">// 会输出 #F40</span><br><span class="line">console.log(style.primaryColor);</span><br></pre></td></tr></table></figure><h4 id="模块引用"><a href="#模块引用" class="headerlink" title="模块引用"></a>模块引用</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* another.css */</span></span><br><span class="line"><span class="selector-class">.className</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* app.css */</span></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">composes</span>: className from <span class="string">'./another.css'</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="css-变量-js-使用"><a href="#css-变量-js-使用" class="headerlink" title="css 变量 js 使用"></a>css 变量 js 使用</h4><ul><li>CSS Modules 支持使用变量，不过需要安装 PostCSS 和 postcss-modules-values。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save postcss-loader postcss-modules-values</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> values = <span class="built_in">require</span>(<span class="string">'postcss-modules-values'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: __dirname + <span class="string">'/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    filename: <span class="string">'./bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel'</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [<span class="string">'es2015'</span>, <span class="string">'stage-0'</span>, <span class="string">'react'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: <span class="string">"style-loader!css-loader?modules!postcss-loader"</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss: [</span><br><span class="line">    values</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* colors.css */</span></span><br><span class="line">@value blue: <span class="number">#0c77f8</span>;</span><br><span class="line">@value red: <span class="number">#ff0000</span>;</span><br><span class="line">@value green: <span class="number">#aaf200</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* app.css */</span><br><span class="line">@value colors: &quot;./colors.css&quot;;</span><br><span class="line">@value blue, red, green from colors;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">  color: red;</span><br><span class="line">  background-color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CSSModules的特点"><a href="#CSSModules的特点" class="headerlink" title="CSSModules的特点"></a>CSSModules的特点</h4><ul><li>不使用选择器，只使用 class 名来定义样式</li><li>不层叠多个 class，只使用一个 class 把所有样式定义好</li><li>不嵌套class</li><li>所有样式通过 composes 组合来实现复用</li></ul><h3 id="CSS-Modules-Vue"><a href="#CSS-Modules-Vue" class="headerlink" title="CSS Modules Vue"></a>CSS Modules Vue</h3><blockquote><p>CSS Modules 是一个流行的，用于模块化和组合 CSS 的系统。vue-loader 提供了与 CSS Modules 的一流集成，可以作为模拟 scoped CSS 的替代方案。</p><ol><li>首先，CSS Modules 必须通过向 css-loader 传入 modules: true 来开启：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line">&#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      // ... 其它规则省略</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        use: [</span><br><span class="line">          &apos;vue-style-loader&apos;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &apos;css-loader&apos;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              // 开启 CSS Modules</span><br><span class="line">              modules: true,</span><br><span class="line">              // 自定义生成的类名</span><br><span class="line">              localIdentName: &apos;[local]_[hash:base64:8]&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><ol start="2"><li>然后在你的 <style> 上添加 module 特性：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style module&gt;</span><br><span class="line">.red &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">.bold &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol></style></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;现有的-css-问题&quot;&gt;&lt;a href=&quot;#现有的-css-问题&quot; class=&quot;headerlink&quot; title=&quot;现有的 css 问题&quot;&gt;&lt;/a&gt;现有的 &lt;code&gt;css&lt;/code&gt; 问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;全局污染&lt;/li&gt;
&lt;li&gt;命名混乱&lt;
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="cssmodules" scheme="18600917746.github.io/tags/cssmodules/"/>
    
  </entry>
  
  <entry>
    <title>hello-travis-CI</title>
    <link href="18600917746.github.io/2019/02/14/hello-travis-CI/"/>
    <id>18600917746.github.io/2019/02/14/hello-travis-CI/</id>
    <published>2019-02-14T07:38:06.000Z</published>
    <updated>2019-02-14T07:38:06.125Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hello-jenkins</title>
    <link href="18600917746.github.io/2019/02/14/hello-jenkins/"/>
    <id>18600917746.github.io/2019/02/14/hello-jenkins/</id>
    <published>2019-02-14T07:37:15.000Z</published>
    <updated>2019-02-14T07:37:15.873Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用commander.js做一个Nodejs命令行程序</title>
    <link href="18600917746.github.io/2019/02/12/%E4%BD%BF%E7%94%A8commander-js%E5%81%9A%E4%B8%80%E4%B8%AANodejs%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F/"/>
    <id>18600917746.github.io/2019/02/12/使用commander-js做一个Nodejs命令行程序/</id>
    <published>2019-02-12T05:46:35.000Z</published>
    <updated>2019-02-12T05:46:35.997Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hello-nginx</title>
    <link href="18600917746.github.io/2019/02/12/hello-nginx/"/>
    <id>18600917746.github.io/2019/02/12/hello-nginx/</id>
    <published>2019-02-12T02:46:59.000Z</published>
    <updated>2019-02-12T03:33:43.638Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为什么使用 <code>Nginx</code></p></blockquote><p>Nginx是一款轻量级的HTTP服务器，采用事件驱动的异步非阻塞处理方式框架，这让其具有极好的IO性能，时常用于服务端的反向代理和负载均衡。</p><h2 id="1-初识Nginx和环境准备"><a href="#1-初识Nginx和环境准备" class="headerlink" title="1.初识Nginx和环境准备"></a>1.初识Nginx和环境准备</h2><ul><li>需要一台闲置的电脑当成主机</li><li>购买阿里云ECS</li><li>安装虚拟机</li></ul><blockquote><p>Nginx的快速搭建，安装依赖</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf pcre-devel make automake</span><br><span class="line">yum -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure><blockquote><p>根据自己的喜好创建目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- root</span><br><span class="line">    - apps   </span><br><span class="line">        - app 程序主目录</span><br><span class="line">        - logs 日志目录</span><br><span class="line">        - download 下载目录</span><br><span class="line">        - work 文档说明目录</span><br><span class="line">        - backup 备份目录</span><br></pre></td></tr></table></figure><h2 id="2-Nginx的快速搭建"><a href="#2-Nginx的快速搭建" class="headerlink" title="2.Nginx的快速搭建"></a>2.Nginx的快速搭建</h2><ul><li>查看最新稳定的版本是多少</li><li>使用 <code>yum list | grep nginx</code> 查看服务器 <code>ynm</code> 源支持的版本是多少，如果没有最新的，自行修改 <code>ynm</code> 源地址</li><li>使用 <code>npm install nginx</code> 安装 <code>nginx</code> </li><li><p>使用 <code>nginx -v</code> 查看是否安装成功与版本 </p><blockquote><p>修改 <code>ynm</code> 源地址的教程</p></blockquote></li><li><p>创建配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure></li><li><p>编写对应系统配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Nginx基本配置文件详讲"><a href="#3-Nginx基本配置文件详讲" class="headerlink" title="3.Nginx基本配置文件详讲"></a>3.Nginx基本配置文件详讲</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;为什么使用 &lt;code&gt;Nginx&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx是一款轻量级的HTTP服务器，采用事件驱动的异步非阻塞处理方式框架，这让其具有极好的IO性能，时常用于服务端的反向代理和负载均衡。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="后端" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/hello/"/>
    
    
      <category term="nginx" scheme="18600917746.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的js全屏操作</title>
    <link href="18600917746.github.io/2019/01/31/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84js%E5%85%A8%E5%B1%8F%E6%93%8D%E4%BD%9C/"/>
    <id>18600917746.github.io/2019/01/31/你不知道的js全屏操作/</id>
    <published>2019-01-31T04:19:23.000Z</published>
    <updated>2019-01-31T04:22:23.584Z</updated>
    
    <content type="html"><![CDATA[<h3 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleFullScreen</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ## The below if statement seems to work better ## if ((document.fullScreenElement &amp;&amp; document.fullScreenElement !== null) || (document.msfullscreenElement &amp;&amp; document.msfullscreenElement !== null) || (!document.mozFullScreen &amp;&amp; !document.webkitIsFullScreen)) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">document</span>.fullScreenElement !== <span class="literal">undefined</span> &amp;&amp; <span class="built_in">document</span>.fullScreenElement === <span class="literal">null</span>) || (<span class="built_in">document</span>.msFullscreenElement !== <span class="literal">undefined</span> &amp;&amp; <span class="built_in">document</span>.msFullscreenElement === <span class="literal">null</span>) || (<span class="built_in">document</span>.mozFullScreen !== <span class="literal">undefined</span> &amp;&amp; !<span class="built_in">document</span>.mozFullScreen) || (<span class="built_in">document</span>.webkitIsFullScreen !== <span class="literal">undefined</span> &amp;&amp; !<span class="built_in">document</span>.webkitIsFullScreen)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elem.requestFullScreen) &#123;</span><br><span class="line">            elem.requestFullScreen();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem.mozRequestFullScreen) &#123;</span><br><span class="line">            elem.mozRequestFullScreen();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem.webkitRequestFullScreen) &#123;</span><br><span class="line">            elem.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem.msRequestFullscreen) &#123;</span><br><span class="line">            elem.msRequestFullscreen();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.cancelFullScreen) &#123;</span><br><span class="line">            <span class="built_in">document</span>.cancelFullScreen();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.mozCancelFullScreen) &#123;</span><br><span class="line">            <span class="built_in">document</span>.mozCancelFullScreen();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.webkitCancelFullScreen) &#123;</span><br><span class="line">            <span class="built_in">document</span>.webkitCancelFullScreen();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.msExitFullscreen) &#123;</span><br><span class="line">            <span class="built_in">document</span>.msExitFullscreen();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"click to toggle fullscreen"</span> <span class="attr">onclick</span>=<span class="string">"toggleFullScreen(document.body)"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-pseudo">:fullscreen</span></span><br><span class="line">*<span class="selector-pseudo">:-ms-fullscreen</span>,</span><br><span class="line">*<span class="selector-pseudo">:-webkit-full-screen</span>,</span><br><span class="line">*<span class="selector-pseudo">:-moz-full-screen</span> &#123;</span><br><span class="line">   <span class="attribute">overflow</span>: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;直接上代码&quot;&gt;&lt;a href=&quot;#直接上代码&quot; class=&quot;headerlink&quot; title=&quot;直接上代码&quot;&gt;&lt;/a&gt;直接上代码&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="茶余饭后" scheme="18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
      <category term="jsCode" scheme="18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/jsCode/"/>
    
    
      <category term="jsCode" scheme="18600917746.github.io/tags/jsCode/"/>
    
  </entry>
  
  <entry>
    <title>hello-flutter</title>
    <link href="18600917746.github.io/2019/01/31/hello-flutter/"/>
    <id>18600917746.github.io/2019/01/31/hello-flutter/</id>
    <published>2019-01-31T03:39:00.000Z</published>
    <updated>2019-02-15T05:53:43.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="flutter"><a href="#flutter" class="headerlink" title="flutter"></a>flutter</h3><ul><li>dart 基础语法</li></ul><h3 id="flutter-生态环境"><a href="#flutter-生态环境" class="headerlink" title="flutter 生态环境"></a>flutter 生态环境</h3><ul><li><a href="https://github.com/Solido/awesome-flutter" target="_blank" rel="noopener">awesome-flutter</a></li></ul><h3 id="flutter-性能"><a href="#flutter-性能" class="headerlink" title="flutter 性能"></a>flutter 性能</h3><ul><li>最高能达到 120 fps</li></ul><h3 id="flutter-特点"><a href="#flutter-特点" class="headerlink" title="flutter 特点"></a>flutter 特点</h3><ul><li>开源、免费。</li><li>原生用户界面，原生代码。</li><li>可以跨 <code>4</code> 个平台，甚至支持嵌入式开发。</li></ul><h3 id="flutter-环境搭建"><a href="#flutter-环境搭建" class="headerlink" title="flutter 环境搭建"></a>flutter 环境搭建</h3><h3 id="flutter-版本验证"><a href="#flutter-版本验证" class="headerlink" title="flutter 版本验证"></a>flutter 版本验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -v</span><br></pre></td></tr></table></figure><h3 id="flutter-检查开发环境"><a href="#flutter-检查开发环境" class="headerlink" title="flutter 检查开发环境"></a>flutter 检查开发环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><h3 id="Material是一种标准的移动端和web端的视觉设计语言"><a href="#Material是一种标准的移动端和web端的视觉设计语言" class="headerlink" title="Material是一种标准的移动端和web端的视觉设计语言"></a>Material是一种标准的移动端和web端的视觉设计语言</h3><h3 id="flutter-组件的使用"><a href="#flutter-组件的使用" class="headerlink" title="flutter 组件的使用"></a>flutter 组件的使用</h3><blockquote><p>Text Widget 文本组件的使用</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">void</span> main () =&gt; runApp(MyApp());</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context )&#123;</span><br><span class="line">      <span class="keyword">return</span> MaterialApp(</span><br><span class="line">        title:<span class="string">'Text widget'</span>,</span><br><span class="line">        home:Scaffold(</span><br><span class="line">          body:Center(</span><br><span class="line">            child:Text(<span class="string">'Hello JSPang'</span>)</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件属性"><a href="#组件属性" class="headerlink" title="组件属性"></a>组件属性</h3><ul><li><p>TextAlign 文本的对齐方式</p><ul><li>TextAlign.center: 文本以居中形式对齐,这个也算比较常用的了。</li><li>TextAlign.left:左对齐，经常使用，让文本居左进行对齐，效果和start一样。</li><li>TextAlign.right :右对齐，使用频率也不算高。</li><li>TextAlign.start:以开始位置进行对齐，类似于左对齐。</li><li>TextAlign.end: 以为本结尾处进行对齐，不常用。有点类似右对齐.<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> MaterialApp(</span><br><span class="line">    title:<span class="string">'Text widget'</span>,</span><br><span class="line">    home:Scaffold(</span><br><span class="line">      body:Center(</span><br><span class="line">        child:Text(<span class="string">'Hello JSPang'</span>,</span><br><span class="line">        textAlign:TextAlign.left</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br></pre></td></tr></table></figure></li></ul></li><li><p>maxLines 最多显示几行</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> MaterialApp(</span><br><span class="line">    title:<span class="string">'Text widget'</span>,</span><br><span class="line">    home:Scaffold(</span><br><span class="line">      body:Center(</span><br><span class="line">        child:Text(<span class="string">'Hello JSPang'</span>,</span><br><span class="line">        textAlign:TextAlign.left,</span><br><span class="line">        maxLines:<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br></pre></td></tr></table></figure></li><li><p>overflow 文本溢出操作</p><ul><li>TextOverflow.clip 直接切断</li><li>TextOverflow.ellipse 多余文字显示省略号</li><li>TextOverflow.fade 溢出的部分会有渐变的效果，但是是 上下 方向<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> MaterialApp(</span><br><span class="line">    title:<span class="string">'Text widget'</span>,</span><br><span class="line">    home:Scaffold(</span><br><span class="line">      body:Center(</span><br><span class="line">        child:Text(<span class="string">'Hello JSPang'</span>,</span><br><span class="line">        textAlign:TextAlign.left,</span><br><span class="line">        maxLines:<span class="number">1</span>,</span><br><span class="line">        overflow:TextOverflow.ellipsis,</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br></pre></td></tr></table></figure></li></ul></li><li><p>style 样式属性</p><ul><li>fontSize 字号 </li><li>color 文本颜色</li><li>decoration 下划线的位置</li><li>decorationStyle 下划线的样式<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> MaterialApp(</span><br><span class="line">    title:<span class="string">'Text widget'</span>,</span><br><span class="line">    home:Scaffold(</span><br><span class="line">      body:Center(</span><br><span class="line">        child:Text(<span class="string">'Hello JSPang'</span>,</span><br><span class="line">        textAlign:TextAlign.left,</span><br><span class="line">        maxLines:<span class="number">1</span>,</span><br><span class="line">        overflow:TextOverflow.ellipsis,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">            fontSize:<span class="number">25.0</span>,</span><br><span class="line">            color:Color.fromARGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">150</span>, <span class="number">150</span>),</span><br><span class="line">            decoration:TextDecoration.underline,</span><br><span class="line">            decorationStyle:TextDecorationStyle.solid,</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>Container Widget 文本组件的使用</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> MaterialApp(</span><br><span class="line">  title: <span class="string">'标题'</span>,</span><br><span class="line">  home: Scaffold(</span><br><span class="line">    body: Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">'hello fultter！'</span>,</span><br><span class="line">          textAlign: TextAlign.left,</span><br><span class="line">          maxLines: <span class="number">2</span>,</span><br><span class="line">          overflow: TextOverflow.ellipsis,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">              fontSize: <span class="number">24</span>,</span><br><span class="line">              color: Color.fromARGB(<span class="number">255</span>, <span class="number">100</span>, <span class="number">12</span>, <span class="number">87</span>),</span><br><span class="line">              decoration: TextDecoration.underline,</span><br><span class="line">              decorationStyle: TextDecorationStyle.<span class="built_in">double</span>,</span><br><span class="line">              decorationColor: Color.fromARGB(<span class="number">255</span>, <span class="number">10</span>, <span class="number">102</span>, <span class="number">87</span>)),</span><br><span class="line">        ),</span><br><span class="line">        alignment: Alignment(<span class="number">0</span>, <span class="number">0.1</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>child 定义子组件<ul><li>Text()  文本组件</li></ul></li><li>alignment 定义组件的位置<ul><li>Alignment.topLeft 上左</li><li>Alignment.topCenter 上中</li><li>Alignment.topRight 上右</li><li>Alignment.center 居中</li><li>Alignment.centerLeft 居左</li><li>Alignment.centerRight 中右</li><li>Alignment.bottomLeft 下左</li><li>Alignment.bottomCenter 下中</li><li>Alignment.bottomRight 下右</li><li>Alignment(x,y) x,y 取值区间为 1 -1</li></ul></li><li>width 容器的宽度</li><li>height 容器的高度</li><li>padding 内边距 [常量] <ul><li>const EdgeInsets.fromLTRB</li><li>const EdgeInsets.All</li></ul></li><li>margin 外边距 [常量] <ul><li>const EdgeInsets.fromLTRB</li><li>const EdgeInsets.All</li></ul></li><li>decoration 定义背景与边框<ul><li>BoxDecoration<ul><li>gradient 渐变背景<ul><li>const LinearGradient</li></ul></li><li>border 边框<ul><li>Border.all</li><li>Border.merge<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> MaterialApp(</span><br><span class="line">  title: <span class="string">'标题'</span>,</span><br><span class="line">  home: Scaffold(</span><br><span class="line">    body: Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">'hello fultter！'</span>,</span><br><span class="line">          textAlign: TextAlign.right,</span><br><span class="line">          maxLines: <span class="number">2</span>,</span><br><span class="line">          overflow: TextOverflow.ellipsis,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">              fontSize: <span class="number">12</span>,</span><br><span class="line">              color: Color.fromARGB(<span class="number">255</span>, <span class="number">100</span>, <span class="number">12</span>, <span class="number">87</span>),</span><br><span class="line">              decoration: TextDecoration.underline,</span><br><span class="line">              decorationStyle: TextDecorationStyle.<span class="built_in">double</span>,</span><br><span class="line">              decorationColor: Color.fromARGB(<span class="number">255</span>, <span class="number">10</span>, <span class="number">102</span>, <span class="number">87</span>)),</span><br><span class="line">        ),</span><br><span class="line">        alignment: Alignment.topLeft,</span><br><span class="line">        width: <span class="number">150</span>,</span><br><span class="line">        height: <span class="number">80</span>,</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>),</span><br><span class="line">        margin: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">20.0</span>, <span class="number">102</span>, <span class="number">31</span>, <span class="number">3</span>),</span><br><span class="line">        decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">            gradient: <span class="keyword">const</span> LinearGradient(colors: [</span><br><span class="line">              Colors.lightBlue,</span><br><span class="line">              Colors.greenAccent,</span><br><span class="line">              Colors.purple</span><br><span class="line">            ]),</span><br><span class="line">            border: Border.all(width: <span class="number">2.0</span>, color: Colors.red)),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><blockquote><p>Image Widget 图片组件的使用</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context )&#123;</span><br><span class="line">      <span class="keyword">return</span> MaterialApp(</span><br><span class="line">        title:<span class="string">'Text widget'</span>,</span><br><span class="line">        home:Scaffold(</span><br><span class="line">          body:Center(</span><br><span class="line">          child:Container(</span><br><span class="line">            child:<span class="keyword">new</span> Image.network(</span><br><span class="line">              <span class="string">'https://18600917746.github.io/images/pay.jpg'</span>,</span><br><span class="line">              scale:<span class="number">1.0</span>,</span><br><span class="line">            ),</span><br><span class="line">            width:<span class="number">300.0</span>,</span><br><span class="line">            height:<span class="number">200.0</span>,</span><br><span class="line">            color: Colors.lightBlue,</span><br><span class="line">          ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Scaffold 组件 使用</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> MaterialApp(</span><br><span class="line">    title:<span class="string">'Text widget'</span>,</span><br><span class="line">    home:Scaffold(</span><br><span class="line">      body:Center(</span><br><span class="line">      child:Container(</span><br><span class="line">        child:<span class="keyword">new</span> Image.network(</span><br><span class="line">          <span class="string">'https://18600917746.github.io/images/pay.jpg'</span>,</span><br><span class="line">          scale:<span class="number">1.0</span>,</span><br><span class="line">        ),</span><br><span class="line">        width:<span class="number">300.0</span>,</span><br><span class="line">        height:<span class="number">200.0</span>,</span><br><span class="line">        color: Colors.lightBlue,</span><br><span class="line">      ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><ul><li>Scaffold 脚手架<ul><li>appBar 头部导航</li><li>body 主体内容</li><li>floatingActionButton</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;flutter&quot;&gt;&lt;a href=&quot;#flutter&quot; class=&quot;headerlink&quot; title=&quot;flutter&quot;&gt;&lt;/a&gt;flutter&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;dart 基础语法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;flutter-生态环境&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="flutter" scheme="18600917746.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>hello-php</title>
    <link href="18600917746.github.io/2019/01/29/hello-php/"/>
    <id>18600917746.github.io/2019/01/29/hello-php/</id>
    <published>2019-01-29T02:55:36.000Z</published>
    <updated>2019-01-29T06:58:28.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>Integer（整型）</p><ul><li>整数必须至少有一个数字 (0-9)</li><li>整数不能包含逗号或空格</li><li>整数是没有小数点的</li><li>整数可以是正数或负数</li><li>整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$integar = <span class="number">12</span>;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>Float（浮点型）</p><ul><li>浮点数是带小数部分的数字，或是指数形式<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$float = <span class="number">12.5</span>;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>String（字符串）</p><ul><li>一个字符串是一串字符的序列</li><li>你可以将任何文本放在单引号和双引号中<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$string = <span class="string">'hello word'</span>;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>Boolean（布尔型）</p><ul><li>布尔型可以是 TRUE 或 FALSE。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$boolan = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>Array（数组）</p><ul><li>数组可以在一个变量中存储多个值。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$array = <span class="keyword">array</span>(<span class="string">"Volvo"</span>, <span class="string">"BMW"</span>, <span class="string">"Toyota"</span>);</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>Object（对象）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$object = <span class="keyword">array</span>(<span class="string">"Peter"</span> =&gt; <span class="string">"35"</span>, <span class="string">"Ben"</span> =&gt; <span class="string">"37"</span>, <span class="string">"Joe"</span> =&gt; <span class="string">"43"</span>);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p> NULL（空值）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$null = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="字符传"><a href="#字符传" class="headerlink" title="字符传"></a>字符传</h3><ul><li>获取字符传的长度<ul><li>strlen() </li></ul></li><li>字符串连接<ul><li><code>.</code><h3 id="PHP-变量作用域"><a href="#PHP-变量作用域" class="headerlink" title="PHP 变量作用域"></a>PHP 变量作用域</h3></li></ul></li><li>local</li><li>global</li><li>static</li><li>parameter</li></ul><blockquote><p>local 局部作用域</p><blockquote><p>在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">?php </span><br><span class="line">$x=<span class="number">5</span>; <span class="comment">// 全局变量 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    $y=<span class="number">10</span>; <span class="comment">// 局部变量 </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;测试函数内变量:&lt;p&gt;"</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"变量 x 为: $x"</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"变量 y 为: $y"</span>; </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">myTest(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;测试函数外变量:&lt;p&gt;"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"变量 x 为: $x"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"变量 y 为: $y"</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><p>global 作用域</p><blockquote><p>global 关键字用于函数内访问全局变量。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="number">5</span>;</span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $x,$y;</span><br><span class="line">    $y=$x+$y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><p>Static 作用域 </p><blockquote><p>当一个函数完成时，它的所有变量通常都会被删除。当你声明了 <code>Static</code> 关键字就不会被销毁<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> $x;</span><br><span class="line">    $x++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myTest(); <span class="comment">// 0</span></span><br><span class="line">myTest(); <span class="comment">// 1</span></span><br><span class="line">myTest(); <span class="comment">// 2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><p>parameter 参数作用域</p><blockquote><p>参数是通过调用代码将值传递给函数的局部变量。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">($x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $x;</span><br><span class="line">&#125;</span><br><span class="line">myTest(<span class="number">5</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><h3 id="PHP-echo-和-print-语句"><a href="#PHP-echo-和-print-语句" class="headerlink" title="PHP echo 和 print 语句"></a>PHP echo 和 print 语句</h3><blockquote><p>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p></blockquote><ul><li>echo <ul><li>可以输出一个或多个字符串</li><li>echo 是一个语言结构，使用的时候可以不用加括号，也可以加上括号： echo 或 echo()。</li></ul></li><li>print<ul><li>只允许输出一个字符串，返回值总为 1</li><li>print 同样是一个语言结构，可以使用括号，也可以不使用括号： print 或 print()。</li></ul></li></ul><h3 id="php-超级全局变量"><a href="#php-超级全局变量" class="headerlink" title="php 超级全局变量"></a>php 超级全局变量</h3><ul><li>$GLOBALS</li><li>$_SERVER </li><li>$_REQUEST 接收 <code>form</code> <code>get</code> 或者 <code>post</code> 请求</li><li>$_POST 接收 <code>form</code> <code>post</code> 请求</li><li>$_GET 接收 <code>form</code> <code>get</code> 请求</li><li>$_FILES </li><li>$_ENV 获取进程 参数</li><li>$_COOKIE 定义 <code>cookie</code> </li><li>$_SESSION 定义 <code>session</code></li></ul><blockquote><ol><li>$GLOBALS 是PHP的一个超级全局变量组，在一个PHP脚本的全部作用域中都可以访问。</li><li>$GLOBALS 是一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$x = <span class="number">75</span>; </span><br><span class="line">$y = <span class="number">25</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addition</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    $GLOBALS[<span class="string">'z'</span>] = $GLOBALS[<span class="string">'x'</span>] + $GLOBALS[<span class="string">'y'</span>]; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">addition(); </span><br><span class="line"><span class="keyword">echo</span> $z; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'PHP_SELF'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'SERVER_NAME'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_HOST'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'SCRIPT_NAME'</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>元素/代码</th><th>描述</th></tr></thead><tbody><tr><td>$_SERVER[‘PHP_SELF’]</td><td>当前执行脚本的文件名，与 document root 有关。例如，在地址为 <code>http://example.com/test.php/foo.bar</code> 的脚本中使用 $_SERVER[‘PHP_SELF’] 将得到 /test.php/foo.bar。<strong>FILE</strong> 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。</td></tr><tr><td>$_SERVER[‘GATEWAY_INTERFACE’]</td><td>服务器使用的 CGI 规范的版本；例如，”CGI/1.1”。</td></tr><tr><td>$_SERVER[‘SERVER_ADDR’]</td><td>当前运行脚本所在的服务器的 IP 地址。</td></tr><tr><td>$_SERVER[‘SERVER_NAME’]</td><td>当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。(如: <code>www.baidu.com</code>)</td></tr><tr><td>$_SERVER[‘SERVER_SOFTWARE’]</td><td>服务器标识字符串，在响应请求时的头信息中给出。 (如：Apache/2.2.24)</td></tr><tr><td>$_SERVER[‘SERVER_PROTOCOL’]</td><td>请求页面时通信协议的名称和版本。例如，”HTTP/1.0”。</td></tr><tr><td>$_SERVER[‘REQUEST_METHOD’]</td><td>访问页面使用的请求方法；例如，”GET”, “HEAD”，”POST”，”PUT”。</td></tr><tr><td>$_SERVER[‘REQUEST_TIME’]</td><td>请求开始时的时间戳。从 PHP 5.1.0 起可用。 (如：1377687496)</td></tr><tr><td>$_SERVER[‘QUERY_STRING’]</td><td>query string（查询字符串），如果有的话，通过它进行页面访问。</td></tr><tr><td>$_SERVER[‘HTTP_ACCEPT’]</td><td>当前请求头中 Accept: 项的内容，如果存在的话。</td></tr><tr><td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td><td>当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：”iso-8859-1,*,utf-8”。</td></tr><tr><td>$_SERVER[‘HTTP_HOST’]</td><td>当前请求头中 Host: 项的内容，如果存在的话。</td></tr><tr><td>$_SERVER[‘HTTP_REFERER’]</td><td>引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。)</td></tr><tr><td>$_SERVER[‘HTTPS’]</td><td>如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。</td></tr><tr><td>$_SERVER[‘REMOTE_ADDR’]</td><td>浏览当前页面的用户的 IP 地址。</td></tr><tr><td>$_SERVER[‘REMOTE_HOST’]</td><td>浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。</td></tr><tr><td>$_SERVER[‘REMOTE_PORT’]</td><td>用户机器上连接到 Web 服务器所使用的端口号。</td></tr><tr><td>$_SERVER[‘SCRIPT_FILENAME’]</td><td>当前执行脚本的绝对路径。</td></tr><tr><td>$_SERVER[‘SERVER_ADMIN’]</td><td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。(如：<a href="mailto:someone@runoob.com" target="_blank" rel="noopener">someone@runoob.com</a>)</td></tr><tr><td>$_SERVER[‘SERVER_PORT’]</td><td>Web 服务器使用的端口。默认值为 “80”。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。</td></tr><tr><td>$_SERVER[‘SERVER_SIGNATURE’]</td><td>包含了服务器版本和虚拟主机名的字符串。</td></tr><tr><td>$_SERVER[‘PATH_TRANSLATED’]</td><td>当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。</td></tr><tr><td>$_SERVER[‘SCRIPT_NAME’]</td><td>包含当前脚本的路径。这在页面需要指向自己时非常有用。<strong>FILE</strong> 常量包含当前脚本(例如包含文件)的完整路径和文件名。</td></tr><tr><td>$_SERVER[‘SCRIPT_URI’]</td><td>URI 用来指定要访问的页面。例如 “/index.html”。</td></tr></tbody></table><blockquote><p>$_REQUEST 用于收集HTML表单提交的数据</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"</span>&gt;</span><br><span class="line">Name: &lt;input type=<span class="string">"text"</span> name=<span class="string">"fname"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$name = $_REQUEST[<span class="string">'fname'</span>]; </span><br><span class="line"><span class="keyword">echo</span> $name; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>$_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”post”。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"</span>&gt;</span><br><span class="line">Name: &lt;input type=<span class="string">"text"</span> name=<span class="string">"fname"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$name = $_POST[<span class="string">'fname'</span>]; </span><br><span class="line"><span class="keyword">echo</span> $name; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>1.$_GET 同样被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”get”。<br>2.$_GET 也可以收集URL中发送的数据。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"</span>&gt;</span><br><span class="line">Name: &lt;input type=<span class="string">"text"</span> name=<span class="string">"fname"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">"test_get.php?subject=PHP&amp;web=runoob.com"</span>&gt;Test $GET&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$name = $_POST[<span class="string">'fname'</span>]; </span><br><span class="line">$subject = $_POST[<span class="string">'subject'</span>]; </span><br><span class="line">$web = $_POST[<span class="string">'web'</span>]; </span><br><span class="line"><span class="keyword">echo</span> $name; </span><br><span class="line"><span class="keyword">echo</span> $subject; </span><br><span class="line"><span class="keyword">echo</span> $web; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h3><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>addcslashes()</td><td>返回在指定的字符前添加反斜杠的字符串。</td></tr><tr><td>addslashes()</td><td>返回在预定义的字符前添加反斜杠的字符串。</td></tr><tr><td>bin2hex()</td><td>把 ASCII 字符的字符串转换为十六进制值。</td></tr><tr><td>chop()</td><td>移除字符串右侧的空白字符或其他字符。</td></tr><tr><td>chr()</td><td>从指定 ASCII 值返回字符。</td></tr><tr><td>chunk_split()</td><td>把字符串分割为一连串更小的部分。</td></tr><tr><td>convert_cyr_string()</td><td>把字符串由一种 Cyrillic 字符集转换成另一种。</td></tr><tr><td>convert_uudecode()</td><td>对 uuencode 编码的字符串进行解码。</td></tr><tr><td>convert_uuencode()</td><td>使用 uuencode 算法对字符串进行编码。</td></tr><tr><td>count_chars()</td><td>返回字符串所用字符的信息。</td></tr><tr><td>crc32()</td><td>计算一个字符串的 32 位 CRC（循环冗余校验）。</td></tr><tr><td>crypt()</td><td>单向的字符串加密法（hashing）。</td></tr><tr><td>echo()</td><td>输出一个或多个字符串。</td></tr><tr><td>explode()</td><td>把字符串打散为数组。</td></tr><tr><td>fprintf()</td><td>把格式化的字符串写入到指定的输出流。</td></tr><tr><td>get_html_translation_table()</td><td>返回 htmlspecialchars() 和 htmlentities() 使用的翻译表。</td></tr><tr><td>hebrev()</td><td>把希伯来（Hebrew）文本转换为可见文本。</td></tr><tr><td>hebrevc()</td><td>把希伯来（Hebrew）文本转换为可见文本，并把新行（\n）转换为 <br>。</td></tr><tr><td>hex2bin()</td><td>把十六进制值的字符串转换为 ASCII 字符。</td></tr><tr><td>html_entity_decode()</td><td>把 HTML 实体转换为字符。</td></tr><tr><td>htmlentities()</td><td>把字符转换为 HTML 实体。</td></tr><tr><td>htmlspecialchars_decode()</td><td>把一些预定义的 HTML 实体转换为字符。</td></tr><tr><td>htmlspecialchars()</td><td>把一些预定义的字符转换为 HTML 实体。</td></tr><tr><td>implode()</td><td>返回一个由数组元素组合成的字符串。</td></tr><tr><td>join()</td><td>implode() 的别名。</td></tr><tr><td>lcfirst()</td><td>把字符串中的首字符转换为小写。</td></tr><tr><td>levenshtein()</td><td>返回两个字符串之间的 Levenshtein 距离。</td></tr><tr><td>localeconv()</td><td>返回本地数字及货币格式信息。</td></tr><tr><td>ltrim()</td><td>移除字符串左侧的空白字符或其他字符。</td></tr><tr><td>md5()</td><td>计算字符串的 MD5 散列。</td></tr><tr><td>md5_file()</td><td>计算文件的 MD5 散列。</td></tr><tr><td>metaphone()</td><td>计算字符串的 metaphone 键。</td></tr><tr><td>money_format()</td><td>返回格式化为货币字符串的字符串。</td></tr><tr><td>nl_langinfo()</td><td>返回指定的本地信息。</td></tr><tr><td>nl2br()</td><td>在字符串中的每个新行之前插入 HTML 换行符。</td></tr><tr><td>number_format()</td><td>通过千位分组来格式化数字。</td></tr><tr><td>ord()</td><td>返回字符串中第一个字符的 ASCII 值。</td></tr><tr><td>parse_str()</td><td>把查询字符串解析到变量中。</td></tr><tr><td>print()</td><td>输出一个或多个字符串。</td></tr><tr><td>printf()</td><td>输出格式化的字符串。</td></tr><tr><td>quoted_printable_decode()</td><td>把 quoted-printable 字符串转换为 8 位字符串。</td></tr><tr><td>quoted_printable_encode()</td><td>把 8 位字符串转换为 quoted-printable 字符串。</td></tr><tr><td>quotemeta()</td><td>引用元字符。</td></tr><tr><td>rtrim()</td><td>移除字符串右侧的空白字符或其他字符。</td></tr><tr><td>setlocale()</td><td>设置地区信息（地域信息）。</td></tr><tr><td>sha1()</td><td>计算字符串的 SHA-1 散列。</td></tr><tr><td>sha1_file()</td><td>计算文件的 SHA-1 散列。</td></tr><tr><td>similar_text()</td><td>计算两个字符串的相似度。</td></tr><tr><td>soundex()</td><td>计算字符串的 soundex 键。</td></tr><tr><td>sprintf()</td><td>把格式化的字符串写入一个变量中。</td></tr><tr><td>sscanf()</td><td>根据指定的格式解析来自一个字符串的输入。</td></tr><tr><td>str_getcsv()</td><td>把 CSV 字符串解析到数组中。</td></tr><tr><td>str_ireplace()</td><td>替换字符串中的一些字符（大小写不敏感）。</td></tr><tr><td>str_pad()</td><td>把字符串填充为新的长度。</td></tr><tr><td>str_repeat()</td><td>把字符串重复指定的次数。</td></tr><tr><td>str_replace()</td><td>替换字符串中的一些字符（大小写敏感）。</td></tr><tr><td>str_rot13()</td><td>对字符串执行 ROT13 编码。</td></tr><tr><td>str_shuffle()</td><td>随机地打乱字符串中的所有字符。</td></tr><tr><td>str_split()</td><td>把字符串分割到数组中。</td></tr><tr><td>str_word_count()</td><td>计算字符串中的单词数。</td></tr><tr><td>strcasecmp()</td><td>比较两个字符串（大小写不敏感）。</td></tr><tr><td>strchr()</td><td>查找字符串在另一字符串中的第一次出现。（strstr() 的别名。）</td></tr><tr><td>strcmp()</td><td>比较两个字符串（大小写敏感）。</td></tr><tr><td>strcoll()</td><td>比较两个字符串（根据本地设置）。</td></tr><tr><td>strcspn()</td><td>返回在找到任何指定的字符之前，在字符串查找的字符数。</td></tr><tr><td>strip_tags()</td><td>剥去字符串中的 HTML 和 PHP 标签。</td></tr><tr><td>stripcslashes()</td><td>删除由 addcslashes() 函数添加的反斜杠。</td></tr><tr><td>stripslashes()</td><td>删除由 addslashes() 函数添加的反斜杠。</td></tr><tr><td>stripos()</td><td>返回字符串在另一字符串中第一次出现的位置（大小写不敏感）。</td></tr><tr><td>stristr()</td><td>查找字符串在另一字符串中第一次出现的位置（大小写不敏感）。</td></tr><tr><td>strlen()</td><td>返回字符串的长度。</td></tr><tr><td>strnatcasecmp()</td><td>使用一种”自然排序”算法来比较两个字符串（大小写不敏感）。</td></tr><tr><td>strnatcmp()</td><td>使用一种”自然排序”算法来比较两个字符串（大小写敏感）。</td></tr><tr><td>strncasecmp()</td><td>前 n 个字符的字符串比较（大小写不敏感）。</td></tr><tr><td>strncmp()</td><td>前 n 个字符的字符串比较（大小写敏感）。</td></tr><tr><td>strpbrk()</td><td>在字符串中搜索指定字符中的任意一个。</td></tr><tr><td>strpos()</td><td>返回字符串在另一字符串中第一次出现的位置（大小写敏感）。</td></tr><tr><td>strrchr()</td><td>查找字符串在另一个字符串中最后一次出现。</td></tr><tr><td>strrev()</td><td>反转字符串。</td></tr><tr><td>strripos()</td><td>查找字符串在另一字符串中最后一次出现的位置(大小写不敏感)。</td></tr><tr><td>strrpos()</td><td>查找字符串在另一字符串中最后一次出现的位置(大小写敏感)。</td></tr><tr><td>strspn()</td><td>返回在字符串中包含的特定字符的数目。</td></tr><tr><td>strstr()</td><td>查找字符串在另一字符串中的第一次出现（大小写敏感）。</td></tr><tr><td>strtok()</td><td>把字符串分割为更小的字符串。</td></tr><tr><td>strtolower()</td><td>把字符串转换为小写字母。</td></tr><tr><td>strtoupper()</td><td>把字符串转换为大写字母。</td></tr><tr><td>strtr()</td><td>转换字符串中特定的字符。</td></tr><tr><td>substr()</td><td>返回字符串的一部分。</td></tr><tr><td>substr_compare()</td><td>从指定的开始位置（二进制安全和选择性区分大小写）比较两个字符串。</td></tr><tr><td>substr_count()</td><td>计算子串在字符串中出现的次数。</td></tr><tr><td>substr_replace()</td><td>把字符串的一部分替换为另一个字符串。</td></tr><tr><td>trim()</td><td>移除字符串两侧的空白字符和其他字符。</td></tr><tr><td>ucfirst()</td><td>把字符串中的首字符转换为大写。</td></tr><tr><td>ucwords()</td><td>把字符串中每个单词的首字符转换为大写。</td></tr><tr><td>vfprintf()</td><td>把格式化的字符串写到指定的输出流。</td></tr><tr><td>vprintf()</td><td>输出格式化的字符串。</td></tr><tr><td>vsprintf()</td><td>把格式化字符串写入变量中。</td></tr><tr><td>wordwrap()</td><td>按照指定长度对字符串进行折行处理。</td></tr></tbody></table><h3 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array(数组)"></a>Array(数组)</h3><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>array()</td><td>创建数组。</td></tr><tr><td>array_change_key_case()</td><td>返回其键均为大写或小写的数组。</td></tr><tr><td>array_chunk()</td><td>把一个数组分割为新的数组块。</td></tr><tr><td>array_column()</td><td>返回输入数组中某个单一列的值。</td></tr><tr><td>array_combine()</td><td>通过合并两个数组（一个为键名数组，一个为键值数组）来创建一个新数组。</td></tr><tr><td>array_count_values()</td><td>用于统计数组中所有值出现的次数。</td></tr><tr><td>array_diff()</td><td>比较数组，返回两个数组的差集（只比较键值）。</td></tr><tr><td>array_diff_assoc()</td><td>比较数组，返回两个数组的差集（比较键名和键值）。</td></tr><tr><td>array_diff_key()</td><td>比较数组，返回两个数组的差集（只比较键名）。</td></tr><tr><td>array_diff_uassoc()</td><td>比较数组，返回两个数组的差集（比较键名和键值，使用用户自定义的键名比较函数）。</td></tr><tr><td>array_diff_ukey()</td><td>比较数组，返回两个数组的差集（只比较键名，使用用户自定义的键名比较函数）。</td></tr><tr><td>array_fill()</td><td>用给定的键值填充数组。</td></tr><tr><td>array_fill_keys()</td><td>用给定的指定键名的键值填充数组。</td></tr><tr><td>array_filter()</td><td>用回调函数过滤数组中的元素。</td></tr><tr><td>array_flip()</td><td>反转/交换数组中的键名和对应关联的键值。</td></tr><tr><td>array_intersect()</td><td>比较数组，返回两个数组的交集（只比较键值）。</td></tr><tr><td>array_intersect_assoc()</td><td>比较数组，返回两个数组的交集（比较键名和键值）。</td></tr><tr><td>array_intersect_key()</td><td>比较数组，返回两个数组的交集（只比较键名）。</td></tr><tr><td>array_intersect_uassoc()</td><td>比较数组，返回两个数组的交集（比较键名和键值，使用用户自定义的键名比较函数）。</td></tr><tr><td>array_intersect_ukey()</td><td>比较数组，返回两个数组的交集（只比较键名，使用用户自定义的键名比较函数）。</td></tr><tr><td>array_key_exists()</td><td>检查指定的键名是否存在于数组中。</td></tr><tr><td>array_keys()</td><td>返回数组中所有的键名。</td></tr><tr><td>array_map()</td><td>将用户自定义函数作用到给定数组的每个值上，返回新的值。</td></tr><tr><td>array_merge()</td><td>把一个或多个数组合并为一个数组。</td></tr><tr><td>array_merge_recursive()</td><td>递归地把一个或多个数组合并为一个数组。</td></tr><tr><td>array_multisort()</td><td>对多个数组或多维数组进行排序。</td></tr><tr><td>array_pad()</td><td>将指定数量的带有指定值的元素插入到数组中。</td></tr><tr><td>array_pop()</td><td>删除数组中的最后一个元素（出栈）。</td></tr><tr><td>array_product()</td><td>计算数组中所有值的乘积。</td></tr><tr><td>array_push()</td><td>将一个或多个元素插入数组的末尾（入栈）。</td></tr><tr><td>array_rand()</td><td>从数组中随机选出一个或多个元素，返回键名。</td></tr><tr><td>array_reduce()</td><td>通过使用用户自定义函数，迭代地将数组简化为一个字符串，并返回。</td></tr><tr><td>array_replace()</td><td>使用后面数组的值替换第一个数组的值。</td></tr><tr><td>array_replace_recursive()</td><td>递归地使用后面数组的值替换第一个数组的值。</td></tr><tr><td>array_reverse()</td><td>将原数组中的元素顺序翻转，创建新的数组并返回。</td></tr><tr><td>array_search()</td><td>在数组中搜索给定的值，如果成功则返回相应的键名。</td></tr><tr><td>array_shift()</td><td>删除数组中的第一个元素，并返回被删除元素的值。</td></tr><tr><td>array_slice()</td><td>返回数组中的选定部分。</td></tr><tr><td>array_splice()</td><td>把数组中的指定元素去掉并用其它值取代。</td></tr><tr><td>array_sum()</td><td>返回数组中所有值的和。</td></tr><tr><td>array_udiff()</td><td>比较数组，返回两个数组的差集（只比较键值，使用一个用户自定义的键名比较函数）。</td></tr><tr><td>array_udiff_assoc()</td><td>比较数组，返回两个数组的差集（比较键名和键值，使用内建函数比较键名，使用用户自定义函数比较键值）。</td></tr><tr><td>array_udiff_uassoc()</td><td>比较数组，返回两个数组的差集（比较键名和键值，使用两个用户自定义的键名比较函数）。</td></tr><tr><td>array_uintersect()</td><td>比较数组，返回两个数组的交集（只比较键值，使用一个用户自定义的键名比较函数）。</td></tr><tr><td>array_uintersect_assoc()</td><td>比较数组，返回两个数组的交集（比较键名和键值，使用内建函数比较键名，使用用户自定义函数比较键值）。</td></tr><tr><td>array_uintersect_uassoc()</td><td>比较数组，返回两个数组的交集（比较键名和键值，使用两个用户自定义的键名比较函数）。</td></tr><tr><td>array_unique()</td><td>删除数组中重复的值。</td></tr><tr><td>array_unshift()</td><td>在数组开头插入一个或多个元素。</td></tr><tr><td>array_values()</td><td>返回数组中所有的值。</td></tr><tr><td>array_walk()</td><td>对数组中的每个成员应用用户函数。</td></tr><tr><td>array_walk_recursive()</td><td>对数组中的每个成员递归地应用用户函数。</td></tr><tr><td>arsort()</td><td>对关联数组按照键值进行降序排序。</td></tr><tr><td>asort()</td><td>对关联数组按照键值进行升序排序。</td></tr><tr><td>compact()</td><td>创建一个包含变量名和它们的值的数组。</td></tr><tr><td>count()</td><td>返回数组中元素的数目。</td></tr><tr><td>current()</td><td>返回数组中的当前元素。</td></tr><tr><td>each()</td><td>返回数组中当前的键／值对。</td></tr><tr><td>end()</td><td>将数组的内部指针指向最后一个元素。</td></tr><tr><td>extract()</td><td>从数组中将变量导入到当前的符号表。</td></tr><tr><td>in_array()</td><td>检查数组中是否存在指定的值。</td></tr><tr><td>key()</td><td>从关联数组中取得键名。</td></tr><tr><td>krsort()</td><td>对关联数组按照键名降序排序。</td></tr><tr><td>ksort()</td><td>对关联数组按照键名升序排序。</td></tr><tr><td>list()</td><td>把数组中的值赋给一些数组变量。</td></tr><tr><td>natcasesort()</td><td>用”自然排序”算法对数组进行不区分大小写字母的排序。</td></tr><tr><td>natsort()</td><td>用”自然排序”算法对数组排序。</td></tr><tr><td>next()</td><td>将数组中的内部指针向后移动一位。</td></tr><tr><td>pos()</td><td>current() 的别名。</td></tr><tr><td>prev()</td><td>将数组的内部指针倒回一位。</td></tr><tr><td>range()</td><td>创建一个包含指定范围的元素的数组。</td></tr><tr><td>reset()</td><td>将数组的内部指针指向第一个元素。</td></tr><tr><td>rsort()</td><td>对数值数组进行降序排序。</td></tr><tr><td>shuffle()</td><td>把数组中的元素按随机顺序重新排列。</td></tr><tr><td>sizeof()</td><td>count() 的别名。</td></tr><tr><td>sort()</td><td>对数值数组进行升序排序。</td></tr><tr><td>uasort()</td><td>使用用户自定义的比较函数对数组中的键值进行排序。</td></tr><tr><td>uksort()</td><td>使用用户自定义的比较函数对数组中的键名进行排序。</td></tr><tr><td>usort()</td><td>使用用户自定义的比较函数对数组进行排序。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Integer（整型）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数必须至少有一个数字 (0-9)&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="后端" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/hello/"/>
    
    
      <category term="php" scheme="18600917746.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>进程、线程与协程</title>
    <link href="18600917746.github.io/2019/01/28/%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B/"/>
    <id>18600917746.github.io/2019/01/28/进程、线程与协程/</id>
    <published>2019-01-28T08:17:49.000Z</published>
    <updated>2019-01-31T04:23:21.867Z</updated>
    
    <content type="html"><![CDATA[<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><blockquote><p>一个程序可以由多个进程组成【一个QQ应用可以登录多个qq账号同时执行】</p><ul><li>可被 <code>CPU</code> 执行性的 <code>可执行文件</code></li><li>是一个静态的文件，如果被执行了就是变成了动态的 <code>进程</code></li></ul></blockquote><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><blockquote><p>一个进程可以由多个线程组成</p><ul><li>什么是进程<ul><li>系统进行资源分配和调度的基本单位，是操作系统结构的基础。</li><li>在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；</li><li>在当代面向线程设计的计算机结构中，进程是线程的容器。</li><li>狭义定义：进程是正在运行的程序的实例</li></ul></li></ul></blockquote><blockquote><p>进程的概念主要有两点：第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行之），它才能成为一个活动的实体，我们称其为进程。</p></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><blockquote><p>一个线程可以包含多个协程</p><ul><li>什么是线程</li></ul></blockquote><blockquote><p>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。</p></blockquote><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><blockquote><p>协程是最小的执行单元</p></blockquote><ul><li>什么是协程<ul><li>协程，又称微线程</li><li>因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</li></ul></li></ul><blockquote><p>与子例程一样，协程也是一种程序组件。 相对子例程而言，协程更为一般和灵活，但在实践中使用没有子例程那样广泛。 协程源自Simula和Modula-2语言，但也有其他语言支持。 协程更适合于用来实现彼此熟悉的程序组件，如合作式多任务，迭代器，无限列表和管道。</p></blockquote><h3 id="程序的分类"><a href="#程序的分类" class="headerlink" title="程序的分类"></a>程序的分类</h3><ul><li>IO 密集型【input/output 输出/输出行】<ul><li>CPU 操作硬盘</li><li>接口发送接收数据</li><li>不在 <code>cpu</code> 与 <code>内存</code> 之间操作的</li><li>多数与网络有关</li></ul></li><li>CPU 密集型<ul><li>cpu 进行数学计算</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;程序&quot;&gt;&lt;a href=&quot;#程序&quot; class=&quot;headerlink&quot; title=&quot;程序&quot;&gt;&lt;/a&gt;程序&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一个程序可以由多个进程组成【一个QQ应用可以登录多个qq账号同时执行】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可被 &lt;code
      
    
    </summary>
    
      <category term="茶余饭后" scheme="18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
      <category term="文章" scheme="18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>hello-mongoDB</title>
    <link href="18600917746.github.io/2019/01/28/hello-mongoDB/"/>
    <id>18600917746.github.io/2019/01/28/hello-mongoDB/</id>
    <published>2019-01-28T04:03:49.000Z</published>
    <updated>2019-01-28T04:04:55.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB的启动方式"><a href="#MongoDB的启动方式" class="headerlink" title="MongoDB的启动方式"></a>MongoDB的启动方式</h2><blockquote><p>1.通过命令启动mongo服务<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath = D:\mongodb\data\db --logpath = D:\mongodb\data\log\mongod.log</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.通过配置文件来启动mongo服务，配置文件需要自己创建，只需要在-f 后制定你自己的配置文件路径即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f D:\mongodb\conf\mongo.conf</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="mongo-conf"><a href="#mongo-conf" class="headerlink" title="mongo.conf"></a>mongo.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">path: C:\Users\Administrator\Desktop\nnn\dataBase\data\log\mongod.log</span><br><span class="line">storage:</span><br><span class="line">   dbPath: C:\Users\Administrator\Desktop\nnn\dataBase\data\db</span><br><span class="line">net:</span><br><span class="line">bindIp: 127.0.0.1</span><br><span class="line">  port: 27018</span><br></pre></td></tr></table></figure><h2 id="MongoDB-Shell"><a href="#MongoDB-Shell" class="headerlink" title="MongoDB Shell"></a>MongoDB Shell</h2><blockquote><p>连接已开启的 mongoDB 服务器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port=<span class="number">27018</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>创建数据库 of 切换数据库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use one</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>显示已有数据库（不包括 无表 数据库）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看当前所在的数据库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看当前所在的表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>show collections</span><br><span class="line"><span class="number">2.</span>show tables</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看数据库版本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.version()</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看当前用户信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show users</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在当前数据库下创建表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table.inset(&#123;&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>退出当前 shell<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>exit</span><br><span class="line"><span class="number">2.</span>Ctrl + c</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="数据库-基本操作"><a href="#数据库-基本操作" class="headerlink" title="数据库 基本操作"></a>数据库 基本操作</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="1-inset-data-单条插入数据库，并创建-id"><a href="#1-inset-data-单条插入数据库，并创建-id" class="headerlink" title="1.inset(data) 单条插入数据库，并创建 _id"></a>1.inset(data) 单条插入数据库，并创建 _id</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'lishi'</span>,</span><br><span class="line"><span class="string">"age"</span>:<span class="number">24</span></span><br><span class="line"> &#125;</span><br><span class="line">db.table.insert(data);</span><br></pre></td></tr></table></figure><h4 id="2-batchInset-data-多条插入数据库，并创建-id-适用于多条数据插入到一个表中"><a href="#2-batchInset-data-多条插入数据库，并创建-id-适用于多条数据插入到一个表中" class="headerlink" title="2.batchInset(data) 多条插入数据库，并创建 _id [适用于多条数据插入到一个表中]"></a>2.batchInset(data) 多条插入数据库，并创建 _id [适用于多条数据插入到一个表中]</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=[&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'lishi'</span>,</span><br><span class="line"><span class="string">"age"</span>:<span class="number">24</span></span><br><span class="line"> &#125;,&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'zhaoliu'</span>,</span><br><span class="line"><span class="string">"age"</span>:<span class="number">22</span></span><br><span class="line"> &#125;]</span><br><span class="line">db.table.batchInset(data);</span><br></pre></td></tr></table></figure><h4 id="第三方数据库导入"><a href="#第三方数据库导入" class="headerlink" title="第三方数据库导入"></a>第三方数据库导入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 mongoimport  最大消息长度是 <span class="number">48</span>M ，插入错误立即停止</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有 文档 都要在 <span class="number">16</span>M 以下</span><br></pre></td></tr></table></figure><h3 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h3><h4 id="1-find-option"><a href="#1-find-option" class="headerlink" title="1.find(option);"></a>1.find(option);</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table.find(&#123;&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-findOne-option"><a href="#2-findOne-option" class="headerlink" title="2.findOne(option);"></a>2.findOne(option);</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne();</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><h4 id="1-update-option-data-upsert-More"><a href="#1-update-option-data-upsert-More" class="headerlink" title="1.update(option,data,upsert,More);"></a>1.update(option,data,upsert,More);</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'lishi -&gt; zhangsan'</span>,</span><br><span class="line"><span class="string">"age"</span>:<span class="number">25</span></span><br><span class="line"> &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"name"</span>:<span class="string">'lishi'</span>&#125;,data);</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>option</td><td>object</td><td>{}</td><td>y</td><td>查询条件</td></tr><tr><td>data</td><td>object</td><td>{}</td><td>y</td><td>插入的数据</td></tr><tr><td>upsert</td><td>boolean</td><td>false</td><td>n{建议默认填写}</td><td>是否使用upsert</td></tr><tr><td>More</td><td>boolean</td><td>false</td><td>n{建议默认填写}</td><td>是否更新多个文档</td></tr></tbody></table><h3 id="【永久删除】数据"><a href="#【永久删除】数据" class="headerlink" title="【永久删除】数据"></a>【永久删除】数据</h3><h4 id="1-remove-option"><a href="#1-remove-option" class="headerlink" title="1.remove(option);"></a>1.remove(option);</h4><blockquote><p>option 为空时删除所有的数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'lishi -&gt; zhangsan'</span></span><br><span class="line"> &#125;</span><br><span class="line">db.table.remove(data);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="【永久删除】清空表"><a href="#【永久删除】清空表" class="headerlink" title="【永久删除】清空表"></a>【永久删除】清空表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table.drop()</span><br></pre></td></tr></table></figure><h2 id="创建-mongorc-js-文件-mongo-同级目录自动执行文件-常用于移除危险操作"><a href="#创建-mongorc-js-文件-mongo-同级目录自动执行文件-常用于移除危险操作" class="headerlink" title="创建 .mongorc.js 文件    [mongo 同级目录自动执行文件]{常用于移除危险操作}"></a>创建 .mongorc.js 文件    [mongo 同级目录自动执行文件]{常用于移除危险操作}</h2><blockquote><p>启动时 –norc 可以禁止启动 .mongorc.js 文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .mongorc.js</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">3</span>);</span><br><span class="line">print(<span class="string">'Hell，'</span>+list[index]+<span class="string">'haha'</span>);</span><br><span class="line"><span class="comment">// 常用于移除危险操作</span></span><br><span class="line"><span class="keyword">var</span> no=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">print(<span class="string">'Not on my watch.'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 禁止删除数据库</span></span><br><span class="line">db.dropDatabase = DB.prototype.dropDatabase = no;</span><br><span class="line"><span class="comment">// 禁止删除集合</span></span><br><span class="line">DBCollection.prototype.drop = no;</span><br><span class="line"><span class="comment">// 禁止删除索引</span></span><br><span class="line">DBCollection.prototype.dropIndex = no；</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="update-使用修改器"><a href="#update-使用修改器" class="headerlink" title="update 使用修改器"></a>update 使用修改器</h2><h3 id="set-修改单条数据"><a href="#set-修改单条数据" class="headerlink" title="$set 修改单条数据"></a>$set 修改单条数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>), <span class="string">"name"</span> : <span class="string">"cheng"</span> &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$set"</span>:&#123;<span class="string">"name"</span>:<span class="string">'lishi'</span>&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>), <span class="string">"name"</span> : <span class="string">"lishi"</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="unset-删除单条数据"><a href="#unset-删除单条数据" class="headerlink" title="$unset 删除单条数据"></a>$unset 删除单条数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>), <span class="string">"name"</span> : <span class="string">"lishi"</span> &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$unset"</span>:&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="inc-数字类-值增加或减少"><a href="#inc-数字类-值增加或减少" class="headerlink" title="$inc 数字类 值增加或减少"></a>$inc 数字类 值增加或减少</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>), <span class="string">"name"</span> : <span class="string">"lishi"</span> &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$inc"</span>:&#123;<span class="string">"score"</span>:<span class="number">10</span>&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>),&#123;<span class="string">"score"</span>:<span class="number">10</span>&#125;&#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$inc"</span>:&#123;<span class="string">"score"</span>:<span class="number">-2</span>&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>),&#123;<span class="string">"score"</span>:<span class="number">8</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="push-数组修改器"><a href="#push-数组修改器" class="headerlink" title="$push [数组修改器]"></a>$push [数组修改器]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>),&#123;<span class="string">"score"</span>:<span class="number">8</span>&#125;&#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$push"</span>:&#123;<span class="string">"comments"</span>:&#123;<span class="string">"name"</span>:<span class="string">"joe"</span>,<span class="string">"age"</span>:<span class="number">24</span>,<span class="string">"content"</span>:<span class="string">"Hello..."</span>&#125;&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd55e45e299a187e4ed729f"</span>), <span class="string">"age"</span> : <span class="number">190</span>, <span class="string">"comments"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"joe"</span>, <span class="string">"age"</span> : <span class="number">24</span>, <span class="string">"content"</span> : <span class="string">"Hello..."</span> &#125; ] &#125;</span><br><span class="line"><span class="comment">// 一次 $push 添加多次数值</span></span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$push"</span>:&#123;<span class="string">"comments"</span>:&#123;<span class="string">"$each"</span>:[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]&#125;&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd55e45e299a187e4ed729f"</span>), <span class="string">"age"</span> : <span class="number">190</span>, <span class="string">"comments"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"joe"</span>, <span class="string">"age"</span> : <span class="number">24</span>, <span class="string">"content"</span> : <span class="string">"Hello..."</span> &#125;,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="slice-限制数组的长度-参数只能是负数"><a href="#slice-限制数组的长度-参数只能是负数" class="headerlink" title="$slice 限制数组的长度 [参数只能是负数]"></a>$slice 限制数组的长度 [参数只能是负数]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保留最后添加的 10 个</span></span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;</span><br><span class="line"><span class="string">"$push"</span>:&#123;<span class="string">"comments"</span>:&#123;</span><br><span class="line"><span class="string">"$each"</span>:[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>],</span><br><span class="line"><span class="string">"$slice"</span>:<span class="number">-10</span></span><br><span class="line">&#125;&#125;&#125;);</span><br><span class="line"><span class="comment">// 保留前 10 个 根据 name 进行排序 保留</span></span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;</span><br><span class="line"><span class="string">"$push"</span>:&#123;<span class="string">"comments"</span>:&#123;</span><br><span class="line"><span class="string">"$each"</span>:[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>],</span><br><span class="line"><span class="string">"$slice"</span>:<span class="number">-10</span>,</span><br><span class="line"><span class="string">"$sort"</span>:&#123;<span class="string">"name"</span>:<span class="number">-1</span>&#125;</span><br><span class="line">&#125;&#125;&#125;);</span><br></pre></td></tr></table></figure><h3 id="addToSet-数组去重复添加"><a href="#addToSet-数组去重复添加" class="headerlink" title="$addToSet 数组去重复添加"></a>$addToSet 数组去重复添加</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne()；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span> ] &#125;</span><br><span class="line">da.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$addToSet"</span>:&#123;<span class="string">"list"</span>:<span class="string">"王五"</span>&#125;&#125;)；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>,<span class="string">"王五"</span> ] &#125;</span><br><span class="line">da.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$addToSet"</span>:&#123;<span class="string">"list"</span>:<span class="string">"王五"</span>&#125;&#125;)；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>,<span class="string">"王五"</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="each-循环添加-去重"><a href="#each-循环添加-去重" class="headerlink" title="$each 循环添加 + 去重"></a>$each 循环添加 + 去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne()；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>,<span class="string">"王五"</span> ] &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$addToSet"</span>:&#123;<span class="string">"list"</span>:&#123;<span class="string">"$each"</span>:[<span class="string">"钱七"</span>,<span class="string">"李八"</span>,<span class="string">"王五"</span>]&#125;&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"钱七"</span>, <span class="string">"李八"</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="pop-数组删除元素-1-删除最后一个-1-删除第一个"><a href="#pop-数组删除元素-1-删除最后一个-1-删除第一个" class="headerlink" title="$pop 数组删除元素 [ 1 删除最后一个 -1 删除第一个]"></a>$pop 数组删除元素 [ 1 删除最后一个 -1 删除第一个]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne()；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"钱七"</span>, <span class="string">"李八"</span> ] &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$pop"</span>:&#123;<span class="string">"list"</span>:<span class="number">1</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"钱七"</span>] &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$pop"</span>:&#123;<span class="string">"list"</span>:<span class="number">-1</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [<span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"钱七"</span>] &#125;</span><br></pre></td></tr></table></figure><h3 id="pull-数组指定删除元素-会删除数组中所有的匹配值"><a href="#pull-数组指定删除元素-会删除数组中所有的匹配值" class="headerlink" title="$pull 数组指定删除元素 [会删除数组中所有的匹配值]"></a>$pull 数组指定删除元素 [会删除数组中所有的匹配值]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne()；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [<span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"钱七"</span>] &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$pull"</span>:&#123;<span class="string">"list"</span>:<span class="string">"钱七"</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [<span class="string">"李四"</span>, <span class="string">"王五"</span>] &#125;</span><br></pre></td></tr></table></figure><h3 id="定位符修改数据"><a href="#定位符修改数据" class="headerlink" title="$ 定位符修改数据"></a>$ 定位符修改数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne()；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"cheng"</span>, <span class="string">"age"</span> : <span class="number">12</span> &#125;, &#123; <span class="string">"name"</span> : <span class="string">"li"</span>, <span class="string">"age"</span> : <span class="number">24</span> &#125;] &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"list.name"</span>:<span class="string">"cheng"</span>&#125;,&#123;<span class="string">"$set"</span>:&#123;<span class="string">"list.$.name"</span>:<span class="string">"钱七"</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"钱七"</span>, <span class="string">"age"</span> : <span class="number">12</span> &#125;, &#123; <span class="string">"name"</span> : <span class="string">"li"</span>, <span class="string">"age"</span> : <span class="number">24</span> &#125;] &#125;</span><br></pre></td></tr></table></figure><h3 id="setOnInsert-创建同时进行赋值，并后期不会通过-setOnInsert-更新"><a href="#setOnInsert-创建同时进行赋值，并后期不会通过-setOnInsert-更新" class="headerlink" title="\ $setOnInsert 创建同时进行赋值，并后期不会通过 $setOnInsert 更新"></a>\ $setOnInsert 创建同时进行赋值，并后期不会通过 $setOnInsert 更新</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.one.update(&#123;&#125;,&#123;<span class="string">"$setOneInsert"</span>:&#123;<span class="string">"createdAt"</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;&#125;,<span class="literal">true</span>)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>), <span class="string">"createAt"</span> : ISODate(<span class="string">"2018-10-29T14:20:02.287Z"</span>) &#125;</span><br><span class="line">db.one.update(&#123;&#125;,&#123;<span class="string">"$setOneInsert"</span>:&#123;<span class="string">"createdAt"</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;&#125;,<span class="literal">true</span>)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>), <span class="string">"createAt"</span> : ISODate(<span class="string">"2018-10-29T14:20:02.287Z"</span>) &#125;</span><br></pre></td></tr></table></figure><h2 id="save-shell-帮助函数-实现快速的修改"><a href="#save-shell-帮助函数-实现快速的修改" class="headerlink" title="save() shell 帮助函数 实现快速的修改"></a>save() shell 帮助函数 实现快速的修改</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x =db.one.findOne();</span><br><span class="line">x.num =<span class="number">24</span>;</span><br><span class="line">db.one.save(x);</span><br></pre></td></tr></table></figure><h2 id="db-runCommand-getLastError-n-返回最后-n-次的相关信息"><a href="#db-runCommand-getLastError-n-返回最后-n-次的相关信息" class="headerlink" title="db.runCommand({getLastError: n }) 返回最后 n 次的相关信息"></a>db.runCommand({getLastError: n }) 返回最后 n 次的相关信息</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"connectionId"</span> : <span class="number">5</span>,</span><br><span class="line">       <span class="string">"updatedExisting"</span> : <span class="literal">true</span>,</span><br><span class="line">       <span class="string">"n"</span> : <span class="number">1</span>,</span><br><span class="line">       <span class="string">"syncMillis"</span> : <span class="number">0</span>,</span><br><span class="line">       <span class="string">"writtenTo"</span> : <span class="literal">null</span>,</span><br><span class="line">       <span class="string">"err"</span> : <span class="literal">null</span>,</span><br><span class="line">       <span class="string">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回参数描述</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>connectionId</td><td>匹配并修改</td></tr><tr><td>updatedExisting</td><td>是否更新成功</td></tr><tr><td>n</td><td>更新的文档个数</td></tr><tr><td>syncMillis</td><td>修改并插入</td></tr><tr><td>writtenTo</td><td>修改并插入</td></tr><tr><td>err</td><td>修改并插入</td></tr><tr><td>ok</td><td>成功的个数</td></tr><tr><td>codeName</td><td>代码名称</td></tr><tr><td>errmsg</td><td>错误描述</td></tr></tbody></table><h2 id="db-runCommand-“findAndModify”-”process”-返回被更新的文档"><a href="#db-runCommand-“findAndModify”-”process”-返回被更新的文档" class="headerlink" title="db.runCommand({“findAndModify”:”process”})返回被更新的文档"></a>db.runCommand({“findAndModify”:”process”})返回被更新的文档</h2><h1 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h1><h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><h3 id="find-key1-val1-key2-val2-多条件精准查询"><a href="#find-key1-val1-key2-val2-多条件精准查询" class="headerlink" title="find({key1:val1,key2:val2}) 多条件精准查询"></a>find({key1:val1,key2:val2}) 多条件精准查询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有 name 是 lisi 并且 age 是 24 的数据</span></span><br><span class="line">db.one.find(&#123;<span class="string">"name"</span>:<span class="string">"lisi"</span>,<span class="string">"age"</span>:<span class="number">24</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="find-option-返回-指定-键值对"><a href="#find-option-返回-指定-键值对" class="headerlink" title="find({},option) 返回 指定 键值对"></a>find({},option) 返回 指定 键值对</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回所有数据，并显示指定的 键/值  1 是显示 ， 0 是剔除</span></span><br><span class="line">find(&#123;&#125;,&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;)</span><br><span class="line">&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>),<span class="string">"name"</span> : <span class="string">"cheng"</span> &#125;</span><br><span class="line">find(&#123;&#125;,&#123;<span class="string">"name"</span>:<span class="number">1</span>,<span class="string">"_id"</span>:<span class="number">0</span>&#125;)</span><br><span class="line">&#123;<span class="string">"name"</span> : <span class="string">"cheng"</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="find-使用查询条件"><a href="#find-使用查询条件" class="headerlink" title="find 使用查询条件"></a>find 使用查询条件</h2><h3 id="lt-lte-gt-gte-ne-对应-lt-lt-gt-gt"><a href="#lt-lte-gt-gte-ne-对应-lt-lt-gt-gt" class="headerlink" title="\$lt  \$lte  \$gt  \$gte  \$ne 对应 &lt;=  &lt;  &gt;  &gt;=  !="></a>\$lt  \$lte  \$gt  \$gte  \$ne 对应 &lt;=  &lt;  &gt;  &gt;=  !=</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询 age 小于 24 的</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$lt"</span>:<span class="number">24</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>), <span class="string">"age"</span> : <span class="number">12</span>, <span class="string">"name"</span> : <span class="string">"cheng"</span>&#125;</span><br><span class="line"><span class="comment">//查询 age 大于等于 10 的</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$gte"</span>:<span class="number">10</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>), <span class="string">"age"</span> : <span class="number">12</span>, <span class="string">"name"</span> : <span class="string">"cheng"</span>&#125;</span><br><span class="line"><span class="comment">//查询 age 不等于 10 的</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$ne"</span>:<span class="number">10</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>), <span class="string">"age"</span> : <span class="number">12</span>, <span class="string">"name"</span> : <span class="string">"cheng"</span>&#125;</span><br><span class="line"><span class="comment">//查询 age 大于 12 并小于 24 的数据</span></span><br><span class="line">db.one.fond(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$gt"</span>:<span class="number">12</span>,<span class="string">"$lt"</span>:<span class="number">24</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="OR-查询-in-or-not"><a href="#OR-查询-in-or-not" class="headerlink" title="OR 查询 $in $or $not"></a>OR 查询 $in $or $not</h3><blockquote><p>$in 一个键匹配多个值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询 所有 age 等于 24 或 30 或 190 的数据</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$in"</span>:[<span class="number">24</span>,<span class="number">30</span>,<span class="number">190</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>$nin 一个键匹配多个值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询 所有 age 不等于 24 或 30 或 190 的数据</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$nin"</span>:[<span class="number">24</span>,<span class="number">30</span>,<span class="number">190</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>$or 多 键值对 查询<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询 name 等于 李四 或者 age 等于 12 的数据</span></span><br><span class="line">db.one.find(&#123;<span class="string">"$or"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"李四"</span>&#125;,&#123;<span class="string">"age"</span>:<span class="number">12</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>$not 取反<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询 age 不等于 5 或者 "190.0 的所有数据</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$not"</span>:&#123;<span class="string">"$in"</span>:[<span class="number">5</span>,<span class="string">"190.0"</span>]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="查询-null"><a href="#查询-null" class="headerlink" title="查询 null"></a>查询 null</h3><blockquote><p>$exists -&gt; 检查 此值是否为 null<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.one.find(&#123;<span class="string">"z"</span>:&#123;<span class="string">"$in"</span>:[<span class="literal">null</span>],<span class="string">"$exists"</span>:<span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="数组查询"><a href="#数组查询" class="headerlink" title="数组查询"></a>数组查询</h2><h3 id="all"><a href="#all" class="headerlink" title="$all"></a>$all</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.two.insert(&#123;<span class="string">"list"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]&#125;)</span><br><span class="line">db.two.insert(&#123;<span class="string">"list"</span>:[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]&#125;)</span><br><span class="line">db.two.insert(&#123;<span class="string">"list"</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]&#125;)</span><br><span class="line"><span class="comment">// 查询 list 数包含 2 3 4 </span></span><br><span class="line">db.two.find(&#123;<span class="string">"list"</span>:&#123;<span class="string">"$all"</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>), <span class="string">"list"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a880cd06e4da48a928a"</span>), <span class="string">"list"</span> : [ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="size-查询特定长度的-数组"><a href="#size-查询特定长度的-数组" class="headerlink" title="$size 查询特定长度的 数组"></a>$size 查询特定长度的 数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将 "_id" : ObjectId("5bde9a7e0cd06e4da48a9289") 的 list 添加一条</span></span><br><span class="line">db.two.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>)&#125;,&#123;<span class="string">"$push"</span>:&#123;<span class="string">"list"</span>:<span class="string">"100"</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>), <span class="string">"list"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"100"</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a880cd06e4da48a928a"</span>), <span class="string">"list"</span> : [ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a8f0cd06e4da48a928b"</span>), <span class="string">"list"</span> : [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ] &#125;</span><br><span class="line">db.two.find(&#123;<span class="string">"list"</span>:&#123;<span class="string">"$size"</span>:<span class="number">5</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>), <span class="string">"list"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"100"</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="slice-指定截取-数据"><a href="#slice-指定截取-数据" class="headerlink" title="$slice 指定截取 数据"></a>$slice 指定截取 数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回 数组前 10 条数据</span></span><br><span class="line">db.two.find(&#123;&#125;,&#123;<span class="string">"list"</span>:&#123;<span class="string">"$slice"</span>:<span class="number">10</span>&#125;&#125;)</span><br><span class="line"><span class="comment">//返回 数组后 10 条数据</span></span><br><span class="line">db.two.find(&#123;&#125;,&#123;<span class="string">"list"</span>:&#123;<span class="string">"$slice"</span>:<span class="number">-10</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// 返回 文档下所有符合匹配条件的数据 的指定条数</span></span><br><span class="line"><span class="comment">// 返回 </span></span><br><span class="line">db.two.find(&#123;<span class="string">"list.age"</span>:&#123;<span class="string">"$lt"</span>:<span class="number">12</span>&#125;&#125;,&#123;<span class="string">"$slice.$"</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><h3 id="limit-限制上限"><a href="#limit-限制上限" class="headerlink" title="limit() 限制上限"></a>limit() 限制上限</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.two.find(&#123;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>), <span class="string">"list"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"100"</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a880cd06e4da48a928a"</span>), <span class="string">"list"</span> : [ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a8f0cd06e4da48a928b"</span>), <span class="string">"list"</span> : [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ] &#125;</span><br><span class="line">db.two.find(&#123;&#125;).limit(<span class="number">2</span>)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>), <span class="string">"list"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"100"</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a880cd06e4da48a928a"</span>), <span class="string">"list"</span> : [ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="skip-n-跳过-n-个"><a href="#skip-n-跳过-n-个" class="headerlink" title="skip(n) 跳过 n 个"></a>skip(n) 跳过 n 个</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.two.find(&#123;&#125;).skip(<span class="number">2</span>)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a8f0cd06e4da48a928b"</span>), <span class="string">"list"</span> : [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort() 排序"></a>sort() 排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 name 升序 age 降序</span></span><br><span class="line">db.two.find().sort(&#123;<span class="string">"name"</span>:<span class="number">1</span>,<span class="string">"age"</span>:<span class="number">-1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据库命令"><a href="#数据库命令" class="headerlink" title="数据库命令"></a>数据库命令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出所有的 数据库命令</span></span><br><span class="line">db.listCommannds()</span><br></pre></td></tr></table></figure><h2 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据 name 作为 索引值</span></span><br><span class="line">db.two.ensureIndex(&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><blockquote><p>唯一索引</p></blockquote><h3 id="建立唯一索引"><a href="#建立唯一索引" class="headerlink" title="建立唯一索引"></a>建立唯一索引</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保障 同文档内所有的 id 不能重复</span></span><br><span class="line">db.two.ensureIndex(&#123;<span class="string">"id"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"unique"</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="建立-复合唯一索引"><a href="#建立-复合唯一索引" class="headerlink" title="建立 复合唯一索引"></a>建立 复合唯一索引</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 id username 建立复合索引</span></span><br><span class="line">db.two.ensureIndex(&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="attr">username</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"unique"</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">// 仅能包含三种类型</span></span><br><span class="line">db.two.insert(&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"username"</span>:<span class="string">"li"</span>&#125;);</span><br><span class="line">db.two.insert(&#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"username"</span>:<span class="string">"li"</span>&#125;);</span><br><span class="line">db.two.insert(&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"username"</span>:<span class="string">"zhang"</span>&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>稀疏索引</p></blockquote><h3 id="建立稀疏索引"><a href="#建立稀疏索引" class="headerlink" title="建立稀疏索引"></a>建立稀疏索引</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文档索引嵌套"><a href="#文档索引嵌套" class="headerlink" title="文档索引嵌套"></a>文档索引嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'李四'</span>,</span><br><span class="line"><span class="string">"loc"</span>:&#123;</span><br><span class="line"><span class="string">"ip"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"state"</span>:<span class="string">"NY"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据文档的 state 建立 索引</span></span><br><span class="line">db.two.ensureIndex(&#123;<span class="string">"loc.state"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="数组文档嵌套索引"><a href="#数组文档嵌套索引" class="headerlink" title="数组文档嵌套索引"></a>数组文档嵌套索引</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'李四'</span>,</span><br><span class="line"><span class="string">"loc"</span>:&#123;</span><br><span class="line"><span class="string">"ip"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"state"</span>:<span class="string">"NY"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'李四'</span>,</span><br><span class="line"><span class="string">"loc"</span>:&#123;</span><br><span class="line"><span class="string">"ip"</span>:<span class="string">"127.0.0.2"</span>,</span><br><span class="line"><span class="string">"state"</span>:<span class="string">"NY"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line"><span class="comment">// 根据数组中的文档建立索引</span></span><br><span class="line">db.two.ensureIndex(&#123;<span class="string">"loc.state"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="getIndexes-查询已建立的索引"><a href="#getIndexes-查询已建立的索引" class="headerlink" title="getIndexes() 查询已建立的索引"></a>getIndexes() 查询已建立的索引</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">db.two.getIndexes()</span><br><span class="line">[&#123;</span><br><span class="line">               <span class="string">"v"</span> : <span class="number">2</span>,</span><br><span class="line">               <span class="string">"key"</span> : &#123;</span><br><span class="line">                       <span class="string">"_id"</span> : <span class="number">1</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="string">"name"</span> : <span class="string">"_id_"</span>,</span><br><span class="line">               <span class="string">"ns"</span> : <span class="string">"test.two"</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">               <span class="string">"v"</span> : <span class="number">2</span>,</span><br><span class="line">               <span class="string">"key"</span> : &#123;</span><br><span class="line">                       <span class="string">"name"</span> : <span class="number">1</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="string">"name"</span> : <span class="string">"name_1"</span>,</span><br><span class="line">               <span class="string">"ns"</span> : <span class="string">"test.two"</span></span><br><span class="line">       &#125;]</span><br></pre></td></tr></table></figure><h2 id="dropIndex-删除索引"><a href="#dropIndex-删除索引" class="headerlink" title="dropIndex() 删除索引"></a>dropIndex() 删除索引</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.two.dropIndex(&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>v</td><td>内部使用，表示索引版本</td></tr><tr><td>key</td><td>建立的索引</td></tr></tbody></table><h1 id="explain-查询结果文件描述-必须放在-最后面"><a href="#explain-查询结果文件描述-必须放在-最后面" class="headerlink" title="explain() 查询结果文件描述[必须放在 最后面]"></a>explain() 查询结果文件描述[必须放在 最后面]</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.two.find().explain()</span><br></pre></td></tr></table></figure><h1 id="hint-“-natural”-1-强制全表查询"><a href="#hint-“-natural”-1-强制全表查询" class="headerlink" title=".hint({“$natural”:1}) 强制全表查询"></a>.hint({“$natural”:1}) 强制全表查询</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.two.find().hint(&#123;<span class="string">"$natural"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>nMatched</td><td>匹配并修改</td></tr><tr><td>nUpserted</td><td>更新并插入</td></tr><tr><td>nModified</td><td>修改并插入</td></tr></tbody></table><h1 id="shell-参数说明"><a href="#shell-参数说明" class="headerlink" title="shell 参数说明"></a>shell 参数说明</h1><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>nMatched</td><td>匹配并修改</td></tr><tr><td>nUpserted</td><td>更新并插入</td></tr><tr><td>nModified</td><td>修改并插入</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MongoDB的启动方式&quot;&gt;&lt;a href=&quot;#MongoDB的启动方式&quot; class=&quot;headerlink&quot; title=&quot;MongoDB的启动方式&quot;&gt;&lt;/a&gt;MongoDB的启动方式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1.通过命令启动mongo服务&lt;b
      
    
    </summary>
    
      <category term="后端" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/hello/"/>
    
    
      <category term="mongoDB" scheme="18600917746.github.io/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>super-git</title>
    <link href="18600917746.github.io/2019/01/28/super-git/"/>
    <id>18600917746.github.io/2019/01/28/super-git/</id>
    <published>2019-01-28T03:51:43.000Z</published>
    <updated>2019-01-28T03:59:06.628Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本地关联到远程</p></blockquote><ol><li><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>添加到暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li><p>提交的缓存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos; &apos;</span><br></pre></td></tr></table></figure></li><li><p>连接到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [gitAddress]</span><br></pre></td></tr></table></figure></li><li><p>推送代码到远程端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol><ul><li>如果出现下列情况, 是因为远程含有文件未进行合并，例如 README.md</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">To https://gitee.com/maYun18600917746/MuiH5Plus.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to &apos;https://gitee.com/maYun18600917746/MuiH5Plus.git&apos;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &apos;git pull ...&apos;) before pushing again.</span><br><span class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure><ul><li>执行下列操作合并代码，然后执行第 5 步</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><blockquote><p>创建 git 忽略文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore</span><br></pre></td></tr></table></figure><h3 id="添加忽略文件"><a href="#添加忽略文件" class="headerlink" title="添加忽略文件"></a>添加忽略文件</h3><ul><li>忽略文件夹</li></ul><p><code>node_modules/</code></p><ul><li>忽略文件</li></ul><p><code>makefile</code></p><ul><li>忽略 后缀名相文件</li></ul><p><code>*.js</code></p><blockquote><p>向 github 开源项目贡献代码</p></blockquote><ul><li>首先你具有 <code>github</code> 账号</li><li>登录自己的 <code>github</code> 或者 其他第三方 git</li></ul><ul><li><a href="https://github.com" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://gitee.com/login" target="_blank" rel="noopener">码云</a></li></ul><ul><li>拉取项目到自己的 仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 在 `github` 上搜索你要 贡献项目的地址</span><br><span class="line">2. 在项目分支上点击 fork 按钮</span><br><span class="line">3. 代码就会存在你的仓库中</span><br></pre></td></tr></table></figure><ul><li>拉取仓库中的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;url&gt;</span><br></pre></td></tr></table></figure><ul><li>修改代码，完善功能。</li><li>提交代码到 <code>github</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li>进入自己的 github 点击项目</li><li>然后点击 <code>new pull request</code> 按钮，进入 <code>pull request</code> 界面</li><li>点击 <code>create pull request</code> 创建一个新的 <code>markDown</code> 修改说明</li><li>后续等待 作者是否 <code>merge</code> 你的提交-</li></ul><blockquote><p>本地合并 两个 git 远程源地址文件</p></blockquote><ul><li>先将两个 源地址文件 拉取到本地</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;a&gt;</span><br><span class="line">git clone &lt;b&gt;</span><br></pre></td></tr></table></figure><ul><li>将 <code>a</code> 作为要保留 代码库</li></ul><ol><li>进入 <code>a</code> 代码库</li><li><p>添加本地 <code>b</code> 作为 <code>a</code> 的远程仓库，并设置别名 <code>remoteB</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote add remoteB ../b/</span><br><span class="line">``` </span><br><span class="line">3. 合并连个仓库的代码</span><br><span class="line">```git</span><br><span class="line">git fetch remoteB</span><br></pre></td></tr></table></figure></li><li><p>将 <code>remoteB</code> 下的 想要的分支 合并到 <code>a</code>  的新分支上 <code>branchB</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branchB remoteB/&lt;branchName&gt;</span><br></pre></td></tr></table></figure></li><li><p>切换到要合并到的分支上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branchName&gt;</span><br></pre></td></tr></table></figure></li><li><p>合并代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase  branchB</span><br></pre></td></tr></table></figure></li><li><p>解决冲突，添加 <code>commitID</code> 提交可以了</p></li><li>提交的 远程仓库就可以了</li></ol><blockquote><p>强行提交文件</p></blockquote><h2 id="不建议此操作-除非你很明白你的代码就是最全，最新的"><a href="#不建议此操作-除非你很明白你的代码就是最全，最新的" class="headerlink" title="不建议此操作 除非你很明白你的代码就是最全，最新的"></a>不建议此操作 除非你很明白你的代码就是最全，最新的</h2><ul><li>有如下几种解决方法：</li></ul><p>1.使用强制 <code>push</code> 的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure></p><p>2.push前先将远程 <code>repository</code> 修改 <code>pull</code> 下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><p>3.若不想 <code>merge</code> 远程和本地修改，可以先创建新的分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch [name]</span><br><span class="line">git push -u origin [name]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本地关联到远程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化项目&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="super" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/super/"/>
    
    
      <category term="git" scheme="18600917746.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hello-git</title>
    <link href="18600917746.github.io/2019/01/28/hello-git/"/>
    <id>18600917746.github.io/2019/01/28/hello-git/</id>
    <published>2019-01-28T03:48:41.000Z</published>
    <updated>2019-01-28T03:53:41.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git"><a href="#git" class="headerlink" title="git"></a><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">git</a></h2><h3 id="git-config-配置信息"><a href="#git-config-配置信息" class="headerlink" title="git config - 配置信息"></a>git config - 配置信息</h3><ul><li><p>配置用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;John Doe&quot;</span><br><span class="line">git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure></li><li><p>配置文本编辑器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor emacs</span><br></pre></td></tr></table></figure></li><li><p>检查配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li><li><p>检查单个配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config &lt;key&gt;</span><br><span class="line"></span><br><span class="line">git config user.name</span><br></pre></td></tr></table></figure></li><li><p>设置别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line">// 查看最近一次提交</span><br><span class="line">git config --global alias.last &apos;log -1 HEAD&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-help-获取帮助"><a href="#git-help-获取帮助" class="headerlink" title="git help - 获取帮助"></a>git help - 获取帮助</h3><ul><li>获取帮助<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;verb&gt;</span><br><span class="line">git &lt;verb&gt; --help</span><br><span class="line">man git-&lt;verb&gt;</span><br><span class="line"></span><br><span class="line">git help config</span><br></pre></td></tr></table></figure></li></ul><h2 id="本地仓库管理"><a href="#本地仓库管理" class="headerlink" title="本地仓库管理"></a>本地仓库管理</h2><h3 id="git-init-本地初始化"><a href="#git-init-本地初始化" class="headerlink" title="git init - 本地初始化"></a>git init - 本地初始化</h3><ul><li>在现有目录中初始化仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-status-查看状态"><a href="#git-status-查看状态" class="headerlink" title="git status - 查看状态"></a>git status - 查看状态</h3><ul><li><p>检查当前文件状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>检查当前文件状态，简要格式输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status -s</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-add-添加文件"><a href="#git-add-添加文件" class="headerlink" title="git add - 添加文件"></a>git add - 添加文件</h3><ul><li>跟踪新文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [fileName/dirName]</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-diff-对比更改"><a href="#git-diff-对比更改" class="headerlink" title="git diff - 对比更改"></a>git diff - 对比更改</h3><ul><li><p>对比尚未暂存的文件更新了哪些部分</p><ul><li>此命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对比已暂存的将要添加到下次提交里的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br><span class="line">git diff --staged</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-commit-提交文件"><a href="#git-commit-提交文件" class="headerlink" title="git commit - 提交文件"></a>git commit - 提交文件</h3><ul><li><p>提交更新，并打开 git 编辑器输入本次提交备注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure></li><li><p>单行输入本次提交备注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;add files&apos;</span><br></pre></td></tr></table></figure></li><li><p>跳过使用暂存区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &apos;added new benchmarks&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-reset-版本切换"><a href="#git-reset-版本切换" class="headerlink" title="git reset 版本切换"></a>git reset 版本切换</h3><ul><li><p>commitID 命令历史查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure></li><li><p>commitID 提交历史查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></li><li><p>回退上一个版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --head HEAD^</span><br></pre></td></tr></table></figure></li><li><p>回退两个版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --head HEAD^^</span><br></pre></td></tr></table></figure></li><li><p>回退指定 n 次数的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --head HEAD~n</span><br></pre></td></tr></table></figure></li><li><p>git reset –head 根据 commitID 切换版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --head &lt;commitID&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-rm-移除文件"><a href="#git-rm-移除文件" class="headerlink" title="git rm - 移除文件"></a>git rm - 移除文件</h3><ul><li><p>工作区域移除，取消 git 关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm [fileName/dirName]</span><br></pre></td></tr></table></figure></li><li><p>暂存区移除，取消 git 关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -f [fileName/dirName]</span><br></pre></td></tr></table></figure></li><li><p>取消 git 关联但不移除文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached [fileName/dirName]</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-mv-重命名或移动文件"><a href="#git-mv-重命名或移动文件" class="headerlink" title="git mv - 重命名或移动文件"></a>git mv - 重命名或移动文件</h3><ul><li>移动文件或重命名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv [oldFlieName] [newFlieName]</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-log-查看历史记录"><a href="#git-log-查看历史记录" class="headerlink" title="git log - 查看历史记录"></a>git log - 查看历史记录</h3><ul><li>查看提交历史<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></li></ul><h4 id="git-log-的常用选项"><a href="#git-log-的常用选项" class="headerlink" title="git log 的常用选项"></a>git log 的常用选项</h4><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>按补丁格式显示每个更新之间的差异</td></tr><tr><td>–stat</td><td>显示每次更新的文件修改统计信息</td></tr><tr><td>–shortstat</td><td>只显示 –stat 中最后的行数修改添加移除统计</td></tr><tr><td>–name-only</td><td>仅在提交信息后显示已修改的文件清单</td></tr><tr><td>–name-status</td><td>显示新增、修改、删除的文件清单</td></tr><tr><td>–abbrev-commit</td><td>仅显示 SHA-1 的前几个字符，而非所有的 40 个字符</td></tr><tr><td>–relative-date</td><td>使用较短的相对时间显示（比如，“2 weeks ago”）</td></tr><tr><td>–graph</td><td>显示 ASCII 图形表示的分支合并历史</td></tr><tr><td>–pretty</td><td>使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）</td></tr></tbody></table><ul><li><p>按补丁格式显示每个更新之间的差异</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -p</span><br></pre></td></tr></table></figure></li><li><p>显示最近 n 次提交的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -[n]</span><br></pre></td></tr></table></figure></li><li><p>显示每次更新的文件修改统计信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --stat</span><br></pre></td></tr></table></figure></li><li><p>时间限制输出提交信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git log --since</span><br><span class="line"></span><br><span class="line">// 最近两周的提交信息</span><br><span class="line">git log --since=2.weeks</span><br></pre></td></tr></table></figure></li><li><p>仅输出 commitID 与 提交备注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure></li><li><p>显示 ASCII 图形表示的分支合并历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph</span><br></pre></td></tr></table></figure></li><li><p>查看指定作者提交的历史信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --author=[gitUserName]</span><br></pre></td></tr></table></figure></li><li><p>按提交的信息中的关键词 输出信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --grep=[Key word]</span><br></pre></td></tr></table></figure></li></ul><h4 id="限制-git-log-输出的选项"><a href="#限制-git-log-输出的选项" class="headerlink" title="限制 git log 输出的选项"></a>限制 git log 输出的选项</h4><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-(n)</td><td>仅显示最近的 n 条提交</td></tr><tr><td>–since, –after</td><td>仅显示指定时间之后的提交</td></tr><tr><td>–until, –before</td><td>仅显示指定时间之前的提交</td></tr><tr><td>–author</td><td>仅显示指定作者相关的提交</td></tr><tr><td>–committer</td><td>仅显示指定提交者相关的提交</td></tr><tr><td>–grep</td><td>仅显示含指定关键字的提交</td></tr><tr><td>-S</td><td>仅显示添加或移除了某个关键字的提交</td></tr></tbody></table><h4 id="格式化输出-提交历史"><a href="#格式化输出-提交历史" class="headerlink" title="格式化输出 提交历史"></a>格式化输出 提交历史</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=format:&quot;%h - %an, %ar : %s&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>%H</td><td>提交对象（commit）的完整哈希字串</td></tr><tr><td>%h</td><td>提交对象的简短哈希字串</td></tr><tr><td>%T</td><td>树对象（tree）的完整哈希字串</td></tr><tr><td>%t</td><td>树对象的简短哈希字串</td></tr><tr><td>%P</td><td>父对象（parent）的完整哈希字串</td></tr><tr><td>%p</td><td>父对象的简短哈希字串</td></tr><tr><td>%an</td><td>作者（author）的名字</td></tr><tr><td>%ae</td><td>作者的电子邮件地址</td></tr><tr><td>%ad</td><td>作者修订日期（可以用 –date= 选项定制格式）</td></tr><tr><td>%ar</td><td>作者修订日期，按多久以前的方式显示</td></tr><tr><td>%cn</td><td>提交者（committer）的名字</td></tr><tr><td>%ce</td><td>提交者的电子邮件地址</td></tr><tr><td>%cd</td><td>提交日期</td></tr><tr><td>%cr</td><td>提交日期，按多久以前的方式显示</td></tr><tr><td>%s</td><td>提交说明</td></tr></tbody></table><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><h3 id="git-commit-–amend-撤回本次备注"><a href="#git-commit-–amend-撤回本次备注" class="headerlink" title="git commit –amend - 撤回本次备注"></a>git commit –amend - 撤回本次备注</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h3 id="撤回本次-commit-提交"><a href="#撤回本次-commit-提交" class="headerlink" title="撤回本次 commit  提交"></a>撤回本次 commit  提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure><h3 id="git-reset-HEAD-取消暂存的文件"><a href="#git-reset-HEAD-取消暂存的文件" class="headerlink" title="git reset HEAD - 取消暂存的文件"></a>git reset HEAD - 取消暂存的文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD [fileName]</span><br></pre></td></tr></table></figure><h3 id="git-checkout-放弃对文件的更改"><a href="#git-checkout-放弃对文件的更改" class="headerlink" title="git checkout  - 放弃对文件的更改"></a>git checkout  - 放弃对文件的更改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;fileName/dirName&gt;</span><br></pre></td></tr></table></figure><h2 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h2><h3 id="git-clone-克隆远程"><a href="#git-clone-克隆远程" class="headerlink" title="git clone - 克隆远程"></a>git clone - 克隆远程</h3><ul><li><p>克隆现有的仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure></li><li><p>克隆现有的仓库并设置别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url] [name]</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-remote-远程仓库源"><a href="#git-remote-远程仓库源" class="headerlink" title="git remote  - 远程仓库源"></a>git remote  - 远程仓库源</h3><ul><li><p>查看远程仓库源地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li><p>添加远程仓库源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看远程仓库源信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure></li><li><p>远程仓库源重命名或移动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rename [oldFileName] [newFileName]</span><br></pre></td></tr></table></figure></li><li><p>远程仓库源移除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm [fileName]</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-fetch-从远程仓库中抓取与拉取"><a href="#git-fetch-从远程仓库中抓取与拉取" class="headerlink" title="git fetch - 从远程仓库中抓取与拉取"></a>git fetch - 从远程仓库中抓取与拉取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [remote-name]</span><br></pre></td></tr></table></figure><h3 id="git-push-推送代码到远程"><a href="#git-push-推送代码到远程" class="headerlink" title="git push - 推送代码到远程"></a>git push - 推送代码到远程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><h3 id="git-tag-列出本地已有标签"><a href="#git-tag-列出本地已有标签" class="headerlink" title="git tag - 列出本地已有标签"></a>git tag - 列出本地已有标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><ul><li>特定的模式查找标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 列出所有 1.8.5 开头的标签</span><br><span class="line">git tag -l &apos;v1.8.5*&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="带注释的标签"><a href="#带注释的标签" class="headerlink" title="带注释的标签"></a>带注释的标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a [tagname] -m &apos;my version 1.4&apos;</span><br></pre></td></tr></table></figure><h3 id="轻量标签"><a href="#轻量标签" class="headerlink" title="轻量标签"></a>轻量标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.4</span><br></pre></td></tr></table></figure><h3 id="追加标签"><a href="#追加标签" class="headerlink" title="追加标签"></a>追加标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.2 [commitID]</span><br></pre></td></tr></table></figure><h3 id="共享标签"><a href="#共享标签" class="headerlink" title="共享标签"></a>共享标签</h3><ul><li><p>单次推送标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.5</span><br></pre></td></tr></table></figure></li><li><p>推送所所有的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure></li><li><p>检索标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branchname] [tagname]</span><br></pre></td></tr></table></figure></li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="git-branch-分支管理"><a href="#git-branch-分支管理" class="headerlink" title="git branch -分支管理"></a>git branch -分支管理</h3><ul><li><p>分支创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [branchname]</span><br></pre></td></tr></table></figure></li><li><p>添加到远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin [branchName]:[branchName]</span><br></pre></td></tr></table></figure></li><li><p>分支切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branchname]</span><br></pre></td></tr></table></figure></li><li><p>展示所以的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li><p>查看所有分支的最后一次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure></li><li><p>查看已经合并到当前的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged</span><br></pre></td></tr></table></figure></li><li><p>查看所有未合并工作的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --no-merged</span><br></pre></td></tr></table></figure></li><li><p>删除分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [branchname]</span><br></pre></td></tr></table></figure></li><li><p>删除远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete [branchname]</span><br></pre></td></tr></table></figure></li><li><p>创建分支并切换到分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branchName]</span><br></pre></td></tr></table></figure></li><li><p>创建本地分支并关联到远程指定分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b serverfix origin/serverfix</span><br></pre></td></tr></table></figure></li><li><p>设置当前分支的上游分支（将本地分支关联到远程分支）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. git push --set-upstream origin [branchName]</span><br><span class="line">2. git branch -u origin [branchName]</span><br></pre></td></tr></table></figure></li><li><p>撤销本地分支与远程分支的映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --unset-upstream</span><br></pre></td></tr></table></figure></li><li><p>查看设置的所有跟踪分支的映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure></li><li><p>分支拉取 [自动拉取并合并]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull </span><br><span class="line"></span><br><span class="line">git fetch </span><br><span class="line">git merge</span><br></pre></td></tr></table></figure></li><li><p>分支拉取 [自动拉取 + 变基]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch </span><br><span class="line">git rebase</span><br></pre></td></tr></table></figure></li><li><p>修改 pull 的默认流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global pull.rebase true</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-merge-本地分支合并"><a href="#git-merge-本地分支合并" class="headerlink" title="git merge - 本地分支合并"></a>git merge - 本地分支合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [branch]</span><br></pre></td></tr></table></figure><h3 id="git-mergetool-图形化解决分支冲突"><a href="#git-mergetool-图形化解决分支冲突" class="headerlink" title="git mergetool 图形化解决分支冲突"></a>git mergetool 图形化解决分支冲突</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; class=&quot;headerlink&quot; title=&quot;git&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="git" scheme="18600917746.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hello-vue</title>
    <link href="18600917746.github.io/2019/01/24/hello-vue/"/>
    <id>18600917746.github.io/2019/01/24/hello-vue/</id>
    <published>2019-01-24T01:57:27.000Z</published>
    <updated>2019-01-28T04:01:00.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-架构预览"><a href="#vue-架构预览" class="headerlink" title="vue 架构预览"></a>vue 架构预览</h3><h3 id="双向绑定与-setState-原理"><a href="#双向绑定与-setState-原理" class="headerlink" title="双向绑定与 setState 原理"></a>双向绑定与 setState 原理</h3><ul><li>Object.defineProperty es5对象属性拦截器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'a'</span>, &#123;</span><br><span class="line">  get() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get val'</span>);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;,</span><br><span class="line">  set(newVal) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set val'</span>);</span><br><span class="line"></span><br><span class="line">    a = newVal;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">obj.a;</span><br><span class="line">obj.a = <span class="string">'set val'</span>;</span><br></pre></td></tr></table></figure><ul><li>Observer</li><li>Watcher</li><li>Dep</li><li>Directive 指令</li></ul><h3 id="vue2-Virtual-dom"><a href="#vue2-Virtual-dom" class="headerlink" title="vue2 Virtual-dom"></a>vue2 Virtual-dom</h3><h3 id="vue2-DOM-DIff-算法解析"><a href="#vue2-DOM-DIff-算法解析" class="headerlink" title="vue2 DOM DIff 算法解析"></a>vue2 DOM DIff 算法解析</h3><h3 id="vue2-整体解析流程"><a href="#vue2-整体解析流程" class="headerlink" title="vue2 整体解析流程"></a>vue2 整体解析流程</h3><h3 id="vue-运行时优化"><a href="#vue-运行时优化" class="headerlink" title="vue 运行时优化"></a>vue 运行时优化</h3><h3 id="再见-vue-前端技术框架选型"><a href="#再见-vue-前端技术框架选型" class="headerlink" title="再见 vue 前端技术框架选型"></a>再见 vue 前端技术框架选型</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue-架构预览&quot;&gt;&lt;a href=&quot;#vue-架构预览&quot; class=&quot;headerlink&quot; title=&quot;vue 架构预览&quot;&gt;&lt;/a&gt;vue 架构预览&lt;/h3&gt;&lt;h3 id=&quot;双向绑定与-setState-原理&quot;&gt;&lt;a href=&quot;#双向绑定与-setSta
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="vue" scheme="18600917746.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>super-css</title>
    <link href="18600917746.github.io/2019/01/23/super-css/"/>
    <id>18600917746.github.io/2019/01/23/super-css/</id>
    <published>2019-01-23T09:30:05.000Z</published>
    <updated>2019-01-28T04:01:14.244Z</updated>
    
    <content type="html"><![CDATA[<h3 id="双飞翼布局【圣杯布局】"><a href="#双飞翼布局【圣杯布局】" class="headerlink" title="双飞翼布局【圣杯布局】"></a>双飞翼布局【圣杯布局】</h3><ul><li>使用场景<ul><li>不能使用 <code>html5</code> 的文档格式，应该使用 <code>html:xt</code> 过渡版本文档类型</li><li>早期多数用于 IE 浏览器</li></ul></li><li>作用<ul><li>将主体 <code>DOM</code> 前置，优先渲染主体内容，提高用户体验</li></ul></li><li>相关技能<ul><li>position</li><li>margin</li><li>负边距</li><li>登高</li><li>盒子模型</li><li>清除浮动</li></ul></li></ul><h3 id="低版本单独实现等高-【高版本推荐使用-flex】"><a href="#低版本单独实现等高-【高版本推荐使用-flex】" class="headerlink" title="低版本单独实现等高 【高版本推荐使用 flex】"></a>低版本单独实现等高 【高版本推荐使用 flex】</h3><ul><li>使用 padding 撑开元素</li><li>使用 margin 负边距回收高度</li><li>父类使用 overflow:hidden </li></ul><h3 id="BFC-IFC-GFC-FFC"><a href="#BFC-IFC-GFC-FFC" class="headerlink" title="BFC IFC GFC FFC"></a>BFC IFC GFC FFC</h3><ul><li>BFC【block formatting context】块格式化上下文   <ul><li>根元素</li><li><code>float</code> 属性不为 <code>none</code></li><li><code>position</code> 为 <code>absolute</code> 或者 <code>fixed</code></li><li><code>display</code> 为 <code>inline-block</code> <code>table-cell</code> <code>table-caption</code> <code>flex</code> <code>inline-flex</code></li><li><code>overflow</code> 不为 <code>visible</code></li></ul></li><li>IFC【inline formatting context】 内联格式化上下文<ul><li>线框高度由行内元素中最高的实际高度计算二得来（不受到竖直方向的 <code>padding/margin</code> 影响）</li></ul></li><li>FFC【flex formatting context】自适应格式化上下文<ul><li><code>display</code> 为 <code>flex</code> 或 <code>inline-flex</code></li></ul></li><li>GFC 【gridLayout formatting context】网格布局格式化上下文<ul><li><code>display</code> 为 <code>grid</code> 此元素将会获得一个独立的渲染区域，可以通过 <code>grid container</code> 上定义网格定义行 <code>grid defintion rows</code> 和 定义网格定义列 <code>grid defintion columns</code> 属性在各自网格项目中 <code>grid item</code> 上定义 <code>grid row</code> 和网格列 <code>grid columns</code> 为每一个网格项目 <code>grid item</code> 定义位置与空间</li></ul></li></ul><h3 id="CSS-hint"><a href="#CSS-hint" class="headerlink" title="CSS hint"></a>CSS hint</h3><ul><li>不要使用对个 <code>css</code> 选择元素，如 <code>.a.b.c</code>  这是解析最慢的，<code>ie6</code> 以下更不能解析</li><li>移除空的 <code>css</code> 规则 如 <code>a{}</code> 因为浏览器解析先去节点查询，后做样式复制</li><li>正确的使用显示属性，如 <code>display:inline;</code> 不要和 <code>width</code> <code>height</code> <code>float</code> <code>margin</code> <code>padding</code> 同时使用，<code>display:inline-block;</code> 不要和 <code>float</code> 同时使用</li><li>避免使用太多的浮动元素，当浮动超过了 <code>10</code> 个，就会显示警告</li><li>避免使用太多的字号，当字号超过了 <code>10</code> 种以上，就会显示警告</li><li>避免使用太多的 <code>web</code> 字体，当字体超过了 <code>5</code> 种 就会发出警告</li><li>避免使用 <code>id</code> 作为选择器，因为权重太高</li><li>标题元素最好一个页面只定义一次，便于 <code>SEO</code> 正确识别</li><li>使用 <code>winth:100%</code> 要当心你选择的盒模型</li><li>属性为 <code>0</code> 的不要写单位，无论值为多少有单位就会进行换算</li><li>各个浏览器的专属属性要有规范</li><li>避免使用看起来相似正则表达式一样的 <code>css3</code> 属性选择器</li><li>遵守盒模型规则</li></ul><h3 id="css-分层理论"><a href="#css-分层理论" class="headerlink" title="css 分层理论"></a>css 分层理论</h3><ul><li>为什么要分层</li><li>SMACSS<ul><li>【Scalable and Modular Architecture for CSS】可扩展的模块化架构的 CSS 像 <code>OOCSS</code> 一样减少重复样式为基础</li></ul></li><li>BEM<br>— SUIT</li><li>ACSS</li><li>ITCSS</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SMACSS --&gt;</span></span><br><span class="line">div.container</span><br><span class="line">    div.container-header</span><br><span class="line">        div.container-header__title</span><br><span class="line">            div.container-header__title--home</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;双飞翼布局【圣杯布局】&quot;&gt;&lt;a href=&quot;#双飞翼布局【圣杯布局】&quot; class=&quot;headerlink&quot; title=&quot;双飞翼布局【圣杯布局】&quot;&gt;&lt;/a&gt;双飞翼布局【圣杯布局】&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用场景&lt;ul&gt;
&lt;li&gt;不能使用 &lt;code&gt;html
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="super" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/super/"/>
    
    
      <category term="css" scheme="18600917746.github.io/tags/css/"/>
    
      <category term="布局" scheme="18600917746.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="html" scheme="18600917746.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>同源策略与跨域</title>
    <link href="18600917746.github.io/2019/01/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F/"/>
    <id>18600917746.github.io/2019/01/23/同源策略与跨域/</id>
    <published>2019-01-23T02:58:42.000Z</published>
    <updated>2019-01-23T03:08:46.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><ul><li>‘’</li></ul><h3 id="同源策略限制的对象"><a href="#同源策略限制的对象" class="headerlink" title="同源策略限制的对象"></a>同源策略限制的对象</h3><ul><li><code>cookie</code>、<code>localStrong</code>、<code>sessionStrong</code>、<code>indexDB</code> 无法进行读取。</li><li><code>DOM</code> 无法获取</li><li><code>AJAX</code> 不能发送</li></ul><h3 id="如何设置同源策略"><a href="#如何设置同源策略" class="headerlink" title="如何设置同源策略"></a>如何设置同源策略</h3><ul><li><code>javascript</code> 进行 <code>domain</code> </li><li>后台进行设置 <code>domain</code> 设置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domain = <span class="string">'.xxx.com'</span></span><br></pre></td></tr></table></figure><h3 id="前端不受同源策略影响的标签"><a href="#前端不受同源策略影响的标签" class="headerlink" title="前端不受同源策略影响的标签"></a>前端不受同源策略影响的标签</h3><ul><li>img</li><li>link</li><li>background-image</li><li>iframe </li><li>script</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;‘’&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;同源策略限制的对象&quot;&gt;&lt;a href=&quot;#同源策略限制的对象&quot; cl
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="跨域" scheme="18600917746.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>hello-indexDB</title>
    <link href="18600917746.github.io/2019/01/22/hello-indexDB/"/>
    <id>18600917746.github.io/2019/01/22/hello-indexDB/</id>
    <published>2019-01-22T10:51:07.000Z</published>
    <updated>2019-01-28T03:53:52.537Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="indexDB" scheme="18600917746.github.io/tags/indexDB/"/>
    
  </entry>
  
  <entry>
    <title>super-html</title>
    <link href="18600917746.github.io/2019/01/22/super-html/"/>
    <id>18600917746.github.io/2019/01/22/super-html/</id>
    <published>2019-01-22T09:23:24.000Z</published>
    <updated>2019-01-28T04:01:29.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在-webapp-中使用-img-来实现用户手机网速的测试"><a href="#在-webapp-中使用-img-来实现用户手机网速的测试" class="headerlink" title="在 webapp 中使用 img 来实现用户手机网速的测试"></a>在 webapp 中使用 img 来实现用户手机网速的测试</h3><ul><li>请求一个指定大小的 img 文件</li><li>定义一个当前时间</li><li>在 img onload 触犯函数内定义 img 加载完毕的时间</li><li>二者相减等到 加载事件/文件大小 就能得到用户的网速</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="string">"getSpeed()"</span>, <span class="number">1000</span>);</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">   <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">   img.src = <span class="string">"http://www.haosailbio.com/content/images/thumbs/default-image_600.png?timeStamp="</span> + startTime;</span><br><span class="line">   img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// 图片大小</span></span><br><span class="line">     <span class="keyword">var</span> size = <span class="number">600</span> * <span class="number">1000</span>;</span><br><span class="line">     <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">     <span class="keyword">var</span> speed = <span class="built_in">parseInt</span>(size / (endTime - startTime));</span><br><span class="line">     <span class="keyword">var</span> unit = <span class="string">"KB/S"</span>;</span><br><span class="line">     <span class="keyword">if</span>(speed &gt;= <span class="number">1024</span>)&#123;</span><br><span class="line">       speed = (speed / <span class="number">1024</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">       unit = <span class="string">"MB/S"</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>).innerHTML = <span class="string">"当前带宽："</span>+ speed + unit + <span class="string">"&lt;br/&gt;请求用时："</span> + (endTime - startTime) / <span class="number">1000</span> + <span class="string">"s"</span>;</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在-webapp-中使用-img-来实现用户手机网速的测试&quot;&gt;&lt;a href=&quot;#在-webapp-中使用-img-来实现用户手机网速的测试&quot; class=&quot;headerlink&quot; title=&quot;在 webapp 中使用 img 来实现用户手机网速的测试&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="super" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/super/"/>
    
    
      <category term="html" scheme="18600917746.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>hello-linux</title>
    <link href="18600917746.github.io/2019/01/22/hello-linux/"/>
    <id>18600917746.github.io/2019/01/22/hello-linux/</id>
    <published>2019-01-22T07:34:01.000Z</published>
    <updated>2019-01-28T08:14:46.679Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><ul><li>vi 实现文件内容定位</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 vi 只读模式下输入 `/` 输入检索字段，回车确认</span><br></pre></td></tr></table></figure><h3 id="服务器管理命令"><a href="#服务器管理命令" class="headerlink" title="服务器管理命令"></a>服务器管理命令</h3><ul><li>systemctl  【.service后缀可以省略】<ul><li>systemctl status &lt;name> 查看某服务的状态</li><li>systemctl start &lt;name> 启动某服务</li><li>systemctl stop &lt;name> 停止某服务</li><li>systemctl restart &lt;name> 重启某服务</li><li>systemctl list-units –type=service 查看所有已经启动的服务</li><li>systemctl enable &lt;name> 自动启动某服务</li><li>systemctl disable &lt;name> 某服务不会自动启动</li></ul></li></ul><h3 id="网络管理命令"><a href="#网络管理命令" class="headerlink" title="网络管理命令"></a>网络管理命令</h3><h3 id="URL下载文件"><a href="#URL下载文件" class="headerlink" title="URL下载文件"></a>URL下载文件</h3><ul><li>wget命令用来从指定的<code>URL下载文件</code>。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget(选项)(参数)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-a&lt;日志文件&gt;</td><td>在指定的日志文件中记录资料的执行过程</td></tr><tr><td>-A&lt;后缀名&gt;</td><td>指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔</td></tr><tr><td>-b</td><td>进行后台的方式运行wget</td></tr><tr><td>-B&lt;连接地址&gt;</td><td>设置参考的连接地址的基地地址</td></tr><tr><td>-c</td><td>继续执行上次终端的任务</td></tr><tr><td>-C&lt;标志&gt;</td><td>设置服务器数据块功能标志on为激活，off为关闭，默认值为on</td></tr><tr><td>-d</td><td>调试模式运行指令</td></tr><tr><td>-D&lt;域名列表&gt;</td><td>设置顺着的域名列表，域名之间用“，”分隔</td></tr><tr><td>-e&lt;指令&gt;</td><td>作为文件“.wgetrc”中的一部分执行指定的指令</td></tr><tr><td>-h</td><td>显示指令帮助信息</td></tr><tr><td>-i&lt;文件&gt;</td><td>从指定文件获取要下载的URL地址</td></tr><tr><td>-l&lt;目录列表&gt;</td><td>设置顺着的目录列表，多个目录用“，”分隔</td></tr><tr><td>-L</td><td>仅顺着关联的连接</td></tr><tr><td>-r</td><td>递归下载方式</td></tr><tr><td>-nc</td><td>文件存在时，下载文件不覆盖原有文件</td></tr><tr><td>-nv</td><td>下载时只显示更新和出错信息，不显示指令的详细执行过程</td></tr><tr><td>-q</td><td>不显示指令执行过程</td></tr><tr><td>-nh</td><td>不查询主机名称</td></tr><tr><td>-v</td><td>显示详细执行过程</td></tr><tr><td>-V</td><td>显示版本信息</td></tr><tr><td>–passive-ftp</td><td>使用被动模式PASV连接FTP服务器</td></tr><tr><td>–follow-ftp</td><td>从HTML文件中下载FTP连接文件。</td></tr></tbody></table><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>ctrl + c</td><td>进程中止</td></tr><tr><td>ctrl + d</td><td>结束输入或退出shell</td></tr><tr><td>ctrl + s</td><td>暂停屏幕输出</td></tr><tr><td>ctrl + q</td><td>恢复屏幕输出</td></tr><tr><td>ctrl + l</td><td>清空屏幕</td></tr><tr><td>ctrl + u</td><td>清空当前输入行</td></tr><tr><td>ctrl + a/e</td><td>光标跳转到首/尾</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vi&quot;&gt;&lt;a href=&quot;#vi&quot; class=&quot;headerlink&quot; title=&quot;vi&quot;&gt;&lt;/a&gt;vi&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;vi 实现文件内容定位&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="后端" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/hello/"/>
    
    
      <category term="linux" scheme="18600917746.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>node.js与io.js</title>
    <link href="18600917746.github.io/2019/01/21/node-js%E4%B8%8Eio-js/"/>
    <id>18600917746.github.io/2019/01/21/node-js与io-js/</id>
    <published>2019-01-21T06:23:08.000Z</published>
    <updated>2019-01-21T06:32:57.811Z</updated>
    
    <content type="html"><![CDATA[<ul><li>虽然现在node的版本已经到了<code>10+</code>，但是小伙伴们知道node发展时的一些趣事吗；</li></ul><h3 id="iojs和node-js到底有啥恩怨情仇？"><a href="#iojs和node-js到底有啥恩怨情仇？" class="headerlink" title="iojs和node.js到底有啥恩怨情仇？"></a>iojs和node.js到底有啥恩怨情仇？</h3><p>因为<code>node</code>半道分家了。 最初刚火由<code>Joyent</code>资助并推动的，创始人<code>Ryan Dahl</code>加入<code>Joyent</code>全职负责<code>Node.js</code>的发展，基本上是公司把<code>node</code>买下来了。<br>开始一切很好，公司出钱出力，推动<code>node</code>发展，基本不干涉社区发展，社区辅助作者提交核心代码，尽心尽力完善<code>npm</code>模块。</p><p>时间长了就有矛盾了，经过一段时间后<code>node</code>的核心代码更新渐渐慢了，同时渐渐变得保守，发展以稳定可靠为主。而社区的人们更希望能引入新特性，紧随前沿趋势变化。</p><p>最后闹得越来越僵，期间还有什么 “人称代词事件” 的发生让更多人选择放弃了，许多<code>node</code>社区大神都撤了，一部分选择<code>go</code>之类的其他语言了。</p><p>还有一部分则选择做他们自己想法中的<code>node</code>，最后因为商标问题最终他们将名字定为<code>io.js</code>。</p><p>然后就开始了各自的版本，<code>node.js</code>依旧比较慢，在 <code>0.1X.x</code> 奋斗，<code>io.js</code>则基本保持周更，<code>1.0</code>很快就出来了。</p><p>后来<code>Joyent</code>决定与<code>o.js</code>和解。成立<code>node.js</code>基金会，将<code>node.js</code>迁移到基金会管理，然后就和<code>io.js</code>商讨合并，然而<code>io.js</code>更新飞快，谈合并期间 <code>2.0</code> 版本也出来了。<br>最后和解达成，<code>io.js</code> 发布声明 <code>3.0</code> 将是 <code>io.js</code> 的最后一个大版本。</p><p>所以合并后就是<code>4.0</code>作为新一代<code>node</code>的版本号，大概情况如下。</p><p>0.x ————-1.x ————– 2.x ———— 3.x ————– 4.x<br>node.js ——-io.js ————- io.js ———–io.js ———–node.js+io.js</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;虽然现在node的版本已经到了&lt;code&gt;10+&lt;/code&gt;，但是小伙伴们知道node发展时的一些趣事吗；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;iojs和node-js到底有啥恩怨情仇？&quot;&gt;&lt;a href=&quot;#iojs和node-js到底有啥恩怨情仇？&quot; c
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="node.js" scheme="18600917746.github.io/tags/node-js/"/>
    
      <category term="io.js" scheme="18600917746.github.io/tags/io-js/"/>
    
      <category term="茶余饭后" scheme="18600917746.github.io/tags/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
  </entry>
  
</feed>
