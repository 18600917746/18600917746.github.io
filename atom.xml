<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cheng</title>
  
  <subtitle>腹有诗书气自华</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="18600917746.github.io/"/>
  <updated>2019-01-23T10:18:32.862Z</updated>
  <id>18600917746.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>super-css</title>
    <link href="18600917746.github.io/2019/01/23/super-css/"/>
    <id>18600917746.github.io/2019/01/23/super-css/</id>
    <published>2019-01-23T09:30:05.000Z</published>
    <updated>2019-01-23T10:18:32.862Z</updated>
    
    <content type="html"><![CDATA[<h3 id="双飞翼布局【圣杯布局】"><a href="#双飞翼布局【圣杯布局】" class="headerlink" title="双飞翼布局【圣杯布局】"></a>双飞翼布局【圣杯布局】</h3><ul><li>使用场景<ul><li>不能使用 <code>html5</code> 的文档格式，应该使用 <code>html:xt</code> 过渡版本文档类型</li><li>早期多数用于 IE 浏览器</li></ul></li><li>作用<ul><li>将主体 <code>DOM</code> 前置，优先渲染主体内容，提高用户体验</li></ul></li><li>相关技能<ul><li>position</li><li>margin</li><li>负边距</li><li>登高</li><li>盒子模型</li><li>清除浮动</li></ul></li></ul><h3 id="低版本单独实现等高-【高版本推荐使用-flex】"><a href="#低版本单独实现等高-【高版本推荐使用-flex】" class="headerlink" title="低版本单独实现等高 【高版本推荐使用 flex】"></a>低版本单独实现等高 【高版本推荐使用 flex】</h3><ul><li>使用 padding 撑开元素</li><li>使用 margin 负边距回收高度</li><li>父类使用 overflow:hidden </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;双飞翼布局【圣杯布局】&quot;&gt;&lt;a href=&quot;#双飞翼布局【圣杯布局】&quot; class=&quot;headerlink&quot; title=&quot;双飞翼布局【圣杯布局】&quot;&gt;&lt;/a&gt;双飞翼布局【圣杯布局】&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用场景&lt;ul&gt;
&lt;li&gt;不能使用 &lt;code&gt;html
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/html/"/>
    
    
      <category term="css" scheme="18600917746.github.io/tags/css/"/>
    
      <category term="布局" scheme="18600917746.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="html" scheme="18600917746.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>同源策略与跨域</title>
    <link href="18600917746.github.io/2019/01/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F/"/>
    <id>18600917746.github.io/2019/01/23/同源策略与跨域/</id>
    <published>2019-01-23T02:58:42.000Z</published>
    <updated>2019-01-23T03:08:46.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><ul><li>‘’</li></ul><h3 id="同源策略限制的对象"><a href="#同源策略限制的对象" class="headerlink" title="同源策略限制的对象"></a>同源策略限制的对象</h3><ul><li><code>cookie</code>、<code>localStrong</code>、<code>sessionStrong</code>、<code>indexDB</code> 无法进行读取。</li><li><code>DOM</code> 无法获取</li><li><code>AJAX</code> 不能发送</li></ul><h3 id="如何设置同源策略"><a href="#如何设置同源策略" class="headerlink" title="如何设置同源策略"></a>如何设置同源策略</h3><ul><li><code>javascript</code> 进行 <code>domain</code> </li><li>后台进行设置 <code>domain</code> 设置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domain = <span class="string">'.xxx.com'</span></span><br></pre></td></tr></table></figure><h3 id="前端不受同源策略影响的标签"><a href="#前端不受同源策略影响的标签" class="headerlink" title="前端不受同源策略影响的标签"></a>前端不受同源策略影响的标签</h3><ul><li>img</li><li>link</li><li>background-image</li><li>iframe </li><li>script</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;‘’&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;同源策略限制的对象&quot;&gt;&lt;a href=&quot;#同源策略限制的对象&quot; cl
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="跨域" scheme="18600917746.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>hello-indexDB</title>
    <link href="18600917746.github.io/2019/01/22/hello-indexDB/"/>
    <id>18600917746.github.io/2019/01/22/hello-indexDB/</id>
    <published>2019-01-22T10:51:07.000Z</published>
    <updated>2019-01-22T10:52:49.839Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="indexDB" scheme="18600917746.github.io/tags/indexDB/"/>
    
  </entry>
  
  <entry>
    <title>super-html</title>
    <link href="18600917746.github.io/2019/01/22/super-html/"/>
    <id>18600917746.github.io/2019/01/22/super-html/</id>
    <published>2019-01-22T09:23:24.000Z</published>
    <updated>2019-01-23T05:05:56.393Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在-webapp-中使用-img-来实现用户手机网速的测试"><a href="#在-webapp-中使用-img-来实现用户手机网速的测试" class="headerlink" title="在 webapp 中使用 img 来实现用户手机网速的测试"></a>在 webapp 中使用 img 来实现用户手机网速的测试</h3><ul><li>请求一个指定大小的 img 文件</li><li>定义一个当前时间</li><li>在 img onload 触犯函数内定义 img 加载完毕的时间</li><li>二者相减等到 加载事件/文件大小 就能得到用户的网速</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="string">"getSpeed()"</span>, <span class="number">1000</span>);</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">   <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">   img.src = <span class="string">"http://www.haosailbio.com/content/images/thumbs/default-image_600.png?timeStamp="</span> + startTime;</span><br><span class="line">   img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// 图片大小</span></span><br><span class="line">     <span class="keyword">var</span> size = <span class="number">600</span> * <span class="number">1000</span>;</span><br><span class="line">     <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">     <span class="keyword">var</span> speed = <span class="built_in">parseInt</span>(size / (endTime - startTime));</span><br><span class="line">     <span class="keyword">var</span> unit = <span class="string">"KB/S"</span>;</span><br><span class="line">     <span class="keyword">if</span>(speed &gt;= <span class="number">1024</span>)&#123;</span><br><span class="line">       speed = (speed / <span class="number">1024</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">       unit = <span class="string">"MB/S"</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>).innerHTML = <span class="string">"当前带宽："</span>+ speed + unit + <span class="string">"&lt;br/&gt;请求用时："</span> + (endTime - startTime) / <span class="number">1000</span> + <span class="string">"s"</span>;</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在-webapp-中使用-img-来实现用户手机网速的测试&quot;&gt;&lt;a href=&quot;#在-webapp-中使用-img-来实现用户手机网速的测试&quot; class=&quot;headerlink&quot; title=&quot;在 webapp 中使用 img 来实现用户手机网速的测试&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="18600917746.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>hello-linux</title>
    <link href="18600917746.github.io/2019/01/22/hello-linux/"/>
    <id>18600917746.github.io/2019/01/22/hello-linux/</id>
    <published>2019-01-22T07:34:01.000Z</published>
    <updated>2019-01-22T08:25:59.174Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><ul><li>vi 实现文件内容定位<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 vi 只读模式下输入 `/` 输入检索字段，回车确认</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vi&quot;&gt;&lt;a href=&quot;#vi&quot; class=&quot;headerlink&quot; title=&quot;vi&quot;&gt;&lt;/a&gt;vi&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;vi 实现文件内容定位&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="后端" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="linux" scheme="18600917746.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>node.js与io.js</title>
    <link href="18600917746.github.io/2019/01/21/node-js%E4%B8%8Eio-js/"/>
    <id>18600917746.github.io/2019/01/21/node-js与io-js/</id>
    <published>2019-01-21T06:23:08.000Z</published>
    <updated>2019-01-21T06:32:57.811Z</updated>
    
    <content type="html"><![CDATA[<ul><li>虽然现在node的版本已经到了<code>10+</code>，但是小伙伴们知道node发展时的一些趣事吗；</li></ul><h3 id="iojs和node-js到底有啥恩怨情仇？"><a href="#iojs和node-js到底有啥恩怨情仇？" class="headerlink" title="iojs和node.js到底有啥恩怨情仇？"></a>iojs和node.js到底有啥恩怨情仇？</h3><p>因为<code>node</code>半道分家了。 最初刚火由<code>Joyent</code>资助并推动的，创始人<code>Ryan Dahl</code>加入<code>Joyent</code>全职负责<code>Node.js</code>的发展，基本上是公司把<code>node</code>买下来了。<br>开始一切很好，公司出钱出力，推动<code>node</code>发展，基本不干涉社区发展，社区辅助作者提交核心代码，尽心尽力完善<code>npm</code>模块。</p><p>时间长了就有矛盾了，经过一段时间后<code>node</code>的核心代码更新渐渐慢了，同时渐渐变得保守，发展以稳定可靠为主。而社区的人们更希望能引入新特性，紧随前沿趋势变化。</p><p>最后闹得越来越僵，期间还有什么 “人称代词事件” 的发生让更多人选择放弃了，许多<code>node</code>社区大神都撤了，一部分选择<code>go</code>之类的其他语言了。</p><p>还有一部分则选择做他们自己想法中的<code>node</code>，最后因为商标问题最终他们将名字定为<code>io.js</code>。</p><p>然后就开始了各自的版本，<code>node.js</code>依旧比较慢，在 <code>0.1X.x</code> 奋斗，<code>io.js</code>则基本保持周更，<code>1.0</code>很快就出来了。</p><p>后来<code>Joyent</code>决定与<code>o.js</code>和解。成立<code>node.js</code>基金会，将<code>node.js</code>迁移到基金会管理，然后就和<code>io.js</code>商讨合并，然而<code>io.js</code>更新飞快，谈合并期间 <code>2.0</code> 版本也出来了。<br>最后和解达成，<code>io.js</code> 发布声明 <code>3.0</code> 将是 <code>io.js</code> 的最后一个大版本。</p><p>所以合并后就是<code>4.0</code>作为新一代<code>node</code>的版本号，大概情况如下。</p><p>0.x ————-1.x ————– 2.x ———— 3.x ————– 4.x<br>node.js ——-io.js ————- io.js ———–io.js ———–node.js+io.js</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;虽然现在node的版本已经到了&lt;code&gt;10+&lt;/code&gt;，但是小伙伴们知道node发展时的一些趣事吗；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;iojs和node-js到底有啥恩怨情仇？&quot;&gt;&lt;a href=&quot;#iojs和node-js到底有啥恩怨情仇？&quot; c
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="node.js" scheme="18600917746.github.io/tags/node-js/"/>
    
      <category term="io.js" scheme="18600917746.github.io/tags/io-js/"/>
    
      <category term="茶余饭后" scheme="18600917746.github.io/tags/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>hello-koa2</title>
    <link href="18600917746.github.io/2019/01/21/hello-koa2/"/>
    <id>18600917746.github.io/2019/01/21/hello-koa2/</id>
    <published>2019-01-21T04:02:05.000Z</published>
    <updated>2019-01-22T07:19:05.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="koa入手先知"><a href="#koa入手先知" class="headerlink" title="koa入手先知"></a>koa入手先知</h2><p><code>Koa</code> 是一个新的 <code>web</code> 框架，由 <code>Express</code> 幕后的原班人马打造， 致力于成为 <code>web</code> 应用和 <code>API</code> 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 <code>async</code> 函数，<code>Koa</code> 帮你丢弃回调函数，并有力地增强错误处理。 <code>Koa</code> 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p><ul><li><code>koa</code>的<code>路由中间件</code>需要安装<code>koa-router</code>模块来实现</li></ul><h3 id="koa安装"><a href="#koa安装" class="headerlink" title="koa安装"></a>koa安装</h3><ul><li>首先你要确定你已经安装的nodeJS</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><ul><li>创建空文件夹并初始化package.json包管理配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir mykoa</span><br><span class="line">cd myapp</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><ul><li>安装<code>koa2</code>包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install koa --save</span><br><span class="line">npm install koa-router --save</span><br></pre></td></tr></table></figure><h3 id="通过koa启动一个简单的server服务"><a href="#通过koa启动一个简单的server服务" class="headerlink" title="通过koa启动一个简单的server服务"></a>通过<code>koa</code>启动一个简单的<code>server</code>服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'Hello koa2'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(router.routes()).use(router.allowedMethods());</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务已开启'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa应用生成器"><a href="#koa应用生成器" class="headerlink" title="koa应用生成器"></a>koa应用生成器</h3><ul><li>使用koa社区比较活跃的方式生成与<code>express-generator</code>类似的框架</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g koa-generator</span><br></pre></td></tr></table></figure><ul><li>koa-generator支持<code>1.x</code>与<code>2.x</code>的生成【建议与时俱进】</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">koa2 myapp</span><br></pre></td></tr></table></figure><ul><li>安装依赖包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myapp</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h3 id="koa实例方法"><a href="#koa实例方法" class="headerlink" title="koa实例方法"></a>koa实例方法</h3><ul><li>app.use 注册中间件</li><li>app.callback 返回适用于 http.createServer() 方法的回调函数来处理请求</li><li>app.keys 设置签名的 Cookie 密钥</li><li>app.context app.context 是从其创建 ctx 的原型。您可以通过编辑 app.context 为 ctx 添加其他属性。</li><li>app.listen 绑定端口</li></ul><h3 id="koa核心成员-ctx"><a href="#koa核心成员-ctx" class="headerlink" title="koa核心成员 ctx"></a>koa核心成员 <code>ctx</code></h3><ul><li>Request<ul><li>ctx.req <code>node</code> 的 <code>request</code> 对象</li><li>ctx.request <code>koa</code> 的 <code>Request</code> 对象【推荐使用】</li><li>ctx.request.header 请求标头对象</li><li>ctx.request.header= 设置请求标头对象</li><li>ctx.request.headers 请求标头对象【别名 ctx.header 】</li><li>ctx.request.headers= 设置标头对象【别名 ctx.header= 】</li><li>ctx.request.method 请求方法</li><li>ctx.request.method= 设置请求方法，对于实现诸如 <code>methodOverride()</code> 的中间件是有用的。</li><li>ctx.request.url 获取请求 <code>URL</code></li><li>ctx.request.url= 设置请求 <code>URL</code>, 对 <code>url</code> 重写有用。</li><li>ctx.request.originalUrl 获取请求原始URL。</li><li>ctx.request.origin 获取 <code>URL</code> 的来源，包括 <code>protocol</code> 和 <code>host</code>。</li><li>ctx.request.href 获取完整的链接地址</li><li>ctx.request.length 返回以数字返回请求的 <code>Content-Length</code>，或 <code>undefined</code>。</li><li>ctx.request.path 获取请求路径名。</li><li>ctx.request.path= 设置请求路径名，并在存在时保留查询字符串。</li><li>ctx.request.query 获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。</li><li>ctx.request.query= 将查询字符串设置为给定对象。</li><li>ctx.request.querystring 根据 ? 获取原始查询字符串.</li><li>ctx.request.querystring= 设置原始查询字符串。</li><li>ctx.request.host 获取当前主机<code>（hostname:port）</code>。当 <code>app.proxy</code> 是 <code>true</code> 时支持 <code>X-Forwarded-Host</code>，否则使用 <code>Host</code>。</li><li>ctx.request.charset 在存在时获取请求字符集，或者 undefined</li><li>ctx.request.hostname 存在时获取主机名。当 <code>app.proxy</code> 是 <code>true</code> 时支持 <code>X-Forwarded-Host</code>，否则使用 <code>Host</code>。</li><li>ctx.request.fresh 检查请求缓存是否<code>“新鲜”</code>，也就是内容没有改变。此方法用于 <code>If-None-Match / ETag</code>, 和 <code>If-Modified-Since</code> 和 <code>Last-Modified</code> 之间的缓存协商。 在设置一个或多个这些响应头后应该引用它。</li><li>ctx.request.stale 与 <code>request.fresh</code> 相反</li><li>ctx.request.search 根据 <code>?</code> 获取原始查询字符串【不包括 <code>？</code> 】</li><li>ctx.request.socket 返回请求套接字。</li><li>ctx.request.protocol 返回请求协议，<code>“https”</code> 或 <code>“http”</code>。当 <code>app.proxy</code> 是 <code>true</code> 时支持 <code>X-Forwarded-Proto</code>。</li><li>ctx.request.secure 通过 ctx.protocol == “https” 来检查请求是否通过 TLS 发出。</li><li>ctx.request.ip 请求远程地址。 当 app.proxy 是 true 时支持 X-Forwarded-Proto。</li><li>ctx.request.ips 当 <code>X-Forwarded-For</code> 存在并且 <code>app.proxy</code> 被启用时，这些 <code>ips</code> 的数组被返回，从上游 - &gt;下游排序。 禁用时返回一个空数组。</li><li>ctx.request.subdomains 将子域返回为数组。</li><li>ctx.request.is()</li><li>ctx.request.type= 设置返回的数据类型</li><li>ctx.request.type  获取请求 <code>Content-Type</code> 不含参数 <code>&quot;charset&quot;</code>。</li><li>ctx.request.accepts()</li><li>ctx.request.acceptsEncodings() </li><li>ctx.request.acceptsCharsets()</li><li>ctx.request.acceptsLanguages()</li><li>ctx.request.get()</li></ul></li><li>Response<ul><li>ctx.res <code>node</code> 的 <code>request</code> 对象</li><li>ctx.response <code>koa</code> 的 <code>Response</code> 对象【推荐使用】</li><li>ctx.body </li><li>ctx.body=</li><li>ctx.status</li><li>ctx.status=</li><li>ctx.message</li><li>ctx.message= </li><li>ctx.length= 返回以数字返回请求的 Content-Length，或 undefined。</li><li>ctx.length 返回以数字返回请求的 Content-Length，或 undefined。</li><li>ctx.type= 设置返回的数据类型</li><li>ctx.type  获取请求的数据类型</li><li>ctx.headerSent</li><li>ctx.redirect()</li><li>ctx.attachment()</li><li>ctx.set()  设置响应标头 field 到 value:</li><li>ctx.append()</li><li>ctx.remove()</li><li>ctx.lastModified=</li><li>ctx.etag=</li></ul></li><li>state<ul><li>ctx.state 推荐使用的命名空间，可以挂载一些公用的数据</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.state.user = <span class="keyword">await</span> User.find(id);</span><br></pre></td></tr></table></figure><ul><li><p>cookies</p><ul><li>ctx.cookies.get 获取 <code>cookie</code> 的 <code>name</code></li><li>ctx.cookies.set 设置 <code>cookie</code> 的相关信息<ul><li>axAge 一个数字表示从 <code>Date.now()</code> 得到的毫秒数</li><li>signed cookie 签名值</li><li>expires cookie 过期的 Date</li><li>path cookie 路径, 默认是<code>&#39;/&#39;</code></li><li>domain <code>cookie</code> 域名</li><li>secure 安全 <code>cookie</code></li><li>httpOnly 服务器可访问 <code>cookie</code>, 默认是 <code>true</code></li><li>overwrite 一个布尔值，表示是否覆盖以前设置的同名的 <code>cookie</code> (默认是 <code>false</code>). 如果是 <code>true</code>, 在同一个请求中设置相同名称的所有 <code>Cookie</code>（不管路径或域）是否在设置此 <code>Cookie</code> 时从 <code>Set-Cookie</code> 标头中过滤掉。</li></ul></li></ul></li><li><p>throw</p><ul><li>ctx.throw 创建错误 - <a href="https://github.com/jshttp/http-errors" target="_blank" rel="noopener">http-errors</a></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.throw(<span class="number">400</span>);</span><br><span class="line">ctx.throw(<span class="number">400</span>, <span class="string">'name required'</span>);</span><br><span class="line">ctx.throw(<span class="number">400</span>, <span class="string">'name required'</span>, &#123; <span class="attr">user</span>: user &#125;);</span><br></pre></td></tr></table></figure><ul><li>assert <ul><li>ctx.assert 断言模块 -  <a href="https://github.com/jshttp/http-assert" target="_blank" rel="noopener">http-assert</a></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.assert(ctx.state.user, <span class="number">401</span>, <span class="string">'User not found. Please login!'</span>);</span><br></pre></td></tr></table></figure><h3 id="同一个应用程序同时作为-HTTP-和-HTTPS-或多个地址"><a href="#同一个应用程序同时作为-HTTP-和-HTTPS-或多个地址" class="headerlink" title="同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址"></a>同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">http.createServer(app.callback()).listen(<span class="number">3000</span>);</span><br><span class="line">https.createServer(app.callback()).listen(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><h3 id="koa-最经典的-洋葱模型"><a href="#koa-最经典的-洋葱模型" class="headerlink" title="koa 最经典的 洋葱模型"></a>koa 最经典的 洋葱模型</h3><ul><li>使用 <code>next()</code> 向下传递的时候一定要使用 <code>await</code> 去修饰</li></ul><p><img src="./koa.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><h3 id="koa-处理-get-请求"><a href="#koa-处理-get-请求" class="headerlink" title="koa 处理 get 请求"></a>koa 处理 get 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/get'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    req: ctx.request.query,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-动态路由-请求"><a href="#koa-处理-动态路由-请求" class="headerlink" title="koa 处理 动态路由 请求"></a>koa 处理 动态路由 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/get/:id'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    req: ctx.params.id,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-post-请求"><a href="#koa-处理-post-请求" class="headerlink" title="koa 处理 post 请求"></a>koa 处理 post 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line">router.post(<span class="string">'/post'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    req: ctx.request.body,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-图片-请求"><a href="#koa-处理-图片-请求" class="headerlink" title="koa 处理 图片 请求"></a>koa 处理 图片 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs= <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">router.get(<span class="string">'/koa'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'触发'</span>);</span><br><span class="line">  <span class="keyword">let</span> data = fs.createReadStream(<span class="string">'./public/koa.png'</span>);</span><br><span class="line">  ctx.type = <span class="string">'.png'</span>;</span><br><span class="line">  ctx.body = data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-文件上传-请求"><a href="#koa-处理-文件上传-请求" class="headerlink" title="koa 处理 文件上传 请求"></a>koa 处理 文件上传 请求</h3><ul><li>使用 <code>form</code> 表单上传文件，一定要开启 <code>enctype=&quot;multipart/form-data&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description 判断文件夹是否存在 如果不存在则创建文件夹</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">exports.checkDirExist = <span class="function"><span class="keyword">function</span> <span class="title">checkDirExist</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(p)) &#123;</span><br><span class="line">        fs.mkdirSync(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.getUploadFileExt = <span class="function"><span class="keyword">function</span> <span class="title">getUploadFileExt</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ext = name.split(<span class="string">'.'</span>).pop();</span><br><span class="line">    <span class="keyword">return</span> ext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exports.getUploadFileName = <span class="function"><span class="keyword">function</span> <span class="title">getUploadFileName</span>(<span class="params">ext</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span><span class="subst">$&#123;<span class="built_in">Number</span>.<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">100</span>)&#125;</span>.<span class="subst">$&#123;ext&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.getUploadDirName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> month = <span class="built_in">Number</span>.parseInt(date.getMonth()) + <span class="number">1</span>;</span><br><span class="line">    month = month.toString().length &gt; <span class="number">1</span> ? month : <span class="string">`0<span class="subst">$&#123;month&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">let</span> dir = <span class="string">`<span class="subst">$&#123;date.getFullYear()&#125;</span><span class="subst">$&#123;month&#125;</span><span class="subst">$&#123;date.getDate()&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> dir;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">'koa-body'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;getUploadFileName, getUploadDirName, getUploadFileExt, checkDirExist&#125; = <span class="built_in">require</span>(<span class="string">'./utils/index'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局启用 post请求</span></span><br><span class="line">app.use(koaBody(&#123;</span><br><span class="line">  multipart: <span class="literal">true</span>, <span class="comment">// 默认是[json,form]</span></span><br><span class="line">  formidable: &#123;</span><br><span class="line">    maxFieldsSize: <span class="number">200</span> * <span class="number">1024</span> * <span class="number">1024</span>,<span class="comment">// 设置上传文件大小最大限制，默认2M</span></span><br><span class="line">    keepExtensions: <span class="literal">true</span>,</span><br><span class="line">    multiples: <span class="literal">false</span>,</span><br><span class="line">    onFileBegin: <span class="function">(<span class="params">name, file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 获取文件后缀</span></span><br><span class="line">      <span class="keyword">const</span> ext = getUploadFileExt(file.name);</span><br><span class="line">      <span class="built_in">console</span>.log(ext);</span><br><span class="line">      <span class="comment">// 自动创建文件目录</span></span><br><span class="line">      checkDirExist(<span class="string">'upload/'</span>);</span><br><span class="line">      <span class="comment">// 最终要保存到的文件夹目录</span></span><br><span class="line">      <span class="keyword">const</span> dir = path.join(__dirname, <span class="string">`upload/<span class="subst">$&#123;getUploadDirName()&#125;</span>`</span>);</span><br><span class="line">      <span class="comment">// 检查文件夹是否存在如果不存在则新建文件夹</span></span><br><span class="line">      checkDirExist(dir);</span><br><span class="line">      <span class="comment">// 重新覆盖 file.path 属性</span></span><br><span class="line">      file.path = <span class="string">`<span class="subst">$&#123;dir&#125;</span>/<span class="subst">$&#123;getUploadFileName(ext)&#125;</span>`</span>;</span><br><span class="line">      <span class="comment">// 保留原有名称</span></span><br><span class="line">      <span class="comment">// file.path = `$&#123;dir&#125;/$&#123;file.name&#125;`;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onError: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">router.post(<span class="string">'/upload'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    files: ctx.request.files.file,</span><br><span class="line">    filesPop: getUploadFileExt(ctx.request.files.file.name),</span><br><span class="line">    name: ctx.request.body.name,</span><br><span class="line">    message: <span class="string">'上传成功'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-文件下载-请求"><a href="#koa-处理-文件下载-请求" class="headerlink" title="koa 处理 文件下载 请求"></a>koa 处理 文件下载 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs= <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">router.get(<span class="string">'/koa'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'触发'</span>);</span><br><span class="line">  <span class="keyword">let</span> data = fs.createReadStream(<span class="string">'./static/koa.txt'</span>);</span><br><span class="line">  ctx.type = <span class="string">'application/octet-stream'</span>;</span><br><span class="line">  ctx.body = data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-cookie"><a href="#koa-处理-cookie" class="headerlink" title="koa 处理 cookie"></a>koa 处理 cookie</h3><ul><li>koa提供了从上下文直接读取、写入cookie的方法<ul><li>ctx.cookies.get(name, [options]) 读取上下文请求中的cookie</li><li>ctx.cookies.set(name, value, [options]) 在上下文中写入cookie</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 cookie</span></span><br><span class="line"><span class="keyword">let</span> cid = ctx.cookies.get(<span class="string">'cid'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 cookie </span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.url === <span class="string">'/index'</span>) &#123;</span><br><span class="line">    ctx.cookies.set(</span><br><span class="line">        <span class="string">'cid'</span>,</span><br><span class="line">        <span class="string">'hello world'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          domain: <span class="string">'localhost'</span>,  <span class="comment">// 写cookie所在的域名</span></span><br><span class="line">          path: <span class="string">'/index'</span>,       <span class="comment">// 写cookie所在的路径</span></span><br><span class="line">          maxAge: <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// cookie有效时长</span></span><br><span class="line">          expires: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017-02-15'</span>),  <span class="comment">// cookie失效时间</span></span><br><span class="line">          httpOnly: <span class="literal">false</span>,  <span class="comment">// 是否只用于http请求中获取</span></span><br><span class="line">          overwrite: <span class="literal">false</span>,  <span class="comment">// 是否允许重写</span></span><br><span class="line">        &#125;,</span><br><span class="line">    );</span><br><span class="line">    ctx.body = <span class="string">'cookie is ok'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-实现session"><a href="#koa-实现session" class="headerlink" title="koa 实现session"></a>koa 实现session</h3><ul><li>koa2 只提供了 <code>cookie</code> 没有原生的提供 <code>session</code> 所以需要自己编写或者使用第三方插件<ul><li>如果session数据量很小，可以直接存在内存中</li><li>如果session数据量很大，则需要存储介质存放session数据</li></ul></li><li>数据库存储方案<ul><li>将session存放在MySQL数据库中</li><li>需要用到中间件<ul><li>koa-session-minimal 适用于koa2 的session中间件，提供存储介质的读写接口 。</li><li>koa-mysql-session 为koa-session-minimal中间件提供MySQL数据库的session数据读写操作。</li><li>将sessionId和对于的数据存到数据库</li></ul></li><li>将数据库的存储的sessionId存到页面的cookie中 【不建议】</li><li>根据cookie的sessionId去获取对于的session信息</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session-minimal'</span>);</span><br><span class="line"><span class="keyword">const</span> MysqlSession = <span class="built_in">require</span>(<span class="string">'koa-mysql-session'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置存储session信息的mysql</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> MysqlSession(&#123;</span><br><span class="line">  user: <span class="string">'root'</span>,</span><br><span class="line">  password: <span class="string">'abc123'</span>,</span><br><span class="line">  database: <span class="string">'koa_demo'</span>,</span><br><span class="line">  host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存放sessionId的cookie配置</span></span><br><span class="line"><span class="keyword">let</span> cookie = &#123;</span><br><span class="line">  maxAge: <span class="string">''</span>, <span class="comment">// cookie有效时长</span></span><br><span class="line">  expires: <span class="string">''</span>,  <span class="comment">// cookie失效时间</span></span><br><span class="line">  path: <span class="string">''</span>, <span class="comment">// 写cookie所在的路径</span></span><br><span class="line">  domain: <span class="string">''</span>, <span class="comment">// 写cookie所在的域名</span></span><br><span class="line">  httpOnly: <span class="string">''</span>, <span class="comment">// 是否只用于http请求中获取</span></span><br><span class="line">  overwrite: <span class="string">''</span>,  <span class="comment">// 是否允许重写</span></span><br><span class="line">  secure: <span class="string">''</span>,</span><br><span class="line">  sameSite: <span class="string">''</span>,</span><br><span class="line">  signed: <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用session中间件</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  key: <span class="string">'SESSION_ID'</span>,</span><br><span class="line">  store: store,</span><br><span class="line">  cookie: cookie</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置session</span></span><br><span class="line">  <span class="keyword">if</span> ( ctx.url === <span class="string">'/set'</span> ) &#123;</span><br><span class="line">    ctx.session = &#123;</span><br><span class="line">      user_id: <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>),</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    ctx.body = ctx.session</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( ctx.url === <span class="string">'/'</span> ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取session信息</span></span><br><span class="line">    ctx.session.count = ctx.session.count + <span class="number">1</span>;</span><br><span class="line">    ctx.body = ctx.session</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[demo] session is starting at port 3000'</span>)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">### koa 处理 跨域</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### koa 处理 jsonp</span></span><br><span class="line"><span class="string">- 使用第三方控件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>npm</span><br><span class="line">npm install koa-jsonp --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonp = <span class="built_in">require</span>(<span class="string">'koa-jsonp'</span>);</span><br><span class="line">app.use(jsonp());</span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> returnData = &#123;</span><br><span class="line">    success: <span class="literal">true</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      text: <span class="string">'this is a jsonp api'</span>,</span><br><span class="line">      time: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 直接输出JSON</span></span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    success: <span class="literal">true</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      text: <span class="string">'this is a jsonp api'</span>,</span><br><span class="line">      time: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="koa-模板引擎-【需要-views-中间件支持】"><a href="#koa-模板引擎-【需要-views-中间件支持】" class="headerlink" title="koa 模板引擎 【需要 views 中间件支持】"></a>koa 模板引擎 【需要 views 中间件支持】</h3><ul><li>安装 views 中间件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save koa-views</span><br></pre></td></tr></table></figure><ul><li>ejs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs --save</span><br></pre></td></tr></table></figure><ul><li>设置渲染引擎</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(views(path.join(__dirname, <span class="string">'./views'</span>), &#123;</span><br><span class="line">  extension: <span class="string">'ejs'</span>,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><ul><li>创建一个简单的index.ejs骨架</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">message</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>根据路由传递参数，并渲染页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/ejs'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> ctx.render(<span class="string">'ejs'</span>, &#123;</span><br><span class="line">    title: <span class="string">'ejs'</span>,</span><br><span class="line">    message: <span class="string">'Hello koa - ejs'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-进行测试"><a href="#koa-进行测试" class="headerlink" title="koa 进行测试"></a>koa 进行测试</h3><ul><li>第三方相关库<ul><li>mocha 模块是测试框架</li><li>chai 模块是用来进行测试结果断言库，比如一个判断 1 + 1 是否等于 2</li><li>supertest 模块是http请求测试库，用来请求API接口</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mocha chai supertest --save-dev</span><br></pre></td></tr></table></figure><ul><li>编写测试用例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test/index.test.js</span></span><br><span class="line"><span class="keyword">const</span> supertest = <span class="built_in">require</span>(<span class="string">'supertest'</span>);</span><br><span class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'./../index'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> expect = chai.expect;</span><br><span class="line"><span class="keyword">const</span> request = supertest( app.listen() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试套件/组</span></span><br><span class="line">describe( <span class="string">'开始测试demo的GET请求'</span>, ( ) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 测试用例</span></span><br><span class="line">  it(<span class="string">'测试/getString.json请求'</span>, ( done ) =&gt; &#123;</span><br><span class="line">      request</span><br><span class="line">        .get(<span class="string">'/getString.json'</span>)</span><br><span class="line">        .expect(<span class="number">200</span>)</span><br><span class="line">        .end(<span class="function">(<span class="params"> err, res </span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 断言判断结果是否为object类型</span></span><br><span class="line">            expect(res.body).to.be.an(<span class="string">'object'</span>);</span><br><span class="line">            expect(res.body.success).to.be.an(<span class="string">'boolean'</span>);</span><br><span class="line">            expect(res.body.data).to.be.an(<span class="string">'string'</span>);</span><br><span class="line">            done()</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>执行测试用例<ul><li>如果使用的是 <code>webstrom</code> 可以配置执行脚本</li><li>如果全局安装的 <code>mocha</code> 可在当前文件夹直接执行 <code>mocha</code></li><li>如果是临时安装 需要执行 <code>./node_modules/.bin/mocha</code>   </li></ul></li></ul><h3 id="经典目录架构"><a href="#经典目录架构" class="headerlink" title="经典目录架构"></a>经典目录架构</h3><p><img src="./koaDir.jpg" alt=""></p><h3 id="通过-session-来进行用户登录权限判断"><a href="#通过-session-来进行用户登录权限判断" class="headerlink" title="通过 session 来进行用户登录权限判断"></a>通过 session 来进行用户登录权限判断</h3><ul><li>使用 <code>session</code> 中间件</li><li>登录以后存储 <code>session</code> 并设置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> session = ctx.session;</span><br><span class="line">session.isLogin = <span class="literal">true</span>;</span><br><span class="line">session.userName = userResult.name;</span><br><span class="line">session.userId = userResult.id;</span><br></pre></td></tr></table></figure><ul><li>做路由判断</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否有session</span></span><br><span class="line"><span class="keyword">if</span> ( ctx.session &amp;&amp; ctx.session.isLogin &amp;&amp; ctx.session.userName ) &#123;</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">'work页面'</span>;</span><br><span class="line">   ctx.render(<span class="string">'work'</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 没有登录态则跳转到错误页面</span></span><br><span class="line">  ctx.redirect(<span class="string">'/error'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;koa入手先知&quot;&gt;&lt;a href=&quot;#koa入手先知&quot; class=&quot;headerlink&quot; title=&quot;koa入手先知&quot;&gt;&lt;/a&gt;koa入手先知&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Koa&lt;/code&gt; 是一个新的 &lt;code&gt;web&lt;/code&gt; 框架，由 &lt;code
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="nodeJS" scheme="18600917746.github.io/tags/nodeJS/"/>
    
      <category term="koa2" scheme="18600917746.github.io/tags/koa2/"/>
    
  </entry>
  
  <entry>
    <title>hello-express</title>
    <link href="18600917746.github.io/2019/01/19/hello-express/"/>
    <id>18600917746.github.io/2019/01/19/hello-express/</id>
    <published>2019-01-19T08:26:54.000Z</published>
    <updated>2019-01-21T07:42:46.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="express安装"><a href="#express安装" class="headerlink" title="express安装"></a>express安装</h3><ul><li>首先你要确定你已经安装的<code>nodeJS</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><ul><li>创建空文件夹并初始化package.json包管理配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir myapp</span><br><span class="line">cd myapp</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><ul><li>安装express包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><h3 id="通过express启动一个简单的server服务"><a href="#通过express启动一个简单的server服务" class="headerlink" title="通过express启动一个简单的server服务"></a>通过express启动一个简单的server服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; res.send(<span class="string">'Hello Express!'</span>));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Express-应用程序生成器"><a href="#Express-应用程序生成器" class="headerlink" title="Express 应用程序生成器"></a>Express 应用程序生成器</h3><ul><li>使用<code>Express</code>官方提供的脚手架进行快捷搭建项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-generator -g</span><br></pre></td></tr></table></figure><ul><li>生成项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express --view=pug myapp</span><br></pre></td></tr></table></figure><ul><li>安装依赖包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myapp</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h3 id="Express实例方法"><a href="#Express实例方法" class="headerlink" title="Express实例方法"></a>Express实例方法</h3><ul><li>app.use</li><li>app.get</li><li>app.post</li><li>app.put</li><li>app.delete</li><li>app.listen</li></ul><h3 id="app路由的两个对象"><a href="#app路由的两个对象" class="headerlink" title="app路由的两个对象"></a>app路由的两个对象</h3><ul><li>req：表示HTTP请求，包含了请求头、参数、内容、HTTP头部属性<ul><li>req.query  用来接收<code>get</code>请求参数，并以对象的方式输出</li><li>req.hostname 获取主机名与IP地址</li><li>req.params 获取动态路由参数</li><li>req.baseUrl 获取路由当前安装的<code>url</code>路径</li><li>req.body 获取请求主体</li><li>req.cookies 获取请求<code>Cookies</code></li><li>req.fresh/req.stale 判断请求是否还新鲜</li><li>req.originUrl 获取原始请求<code>url</code></li><li>req.path 获取请求路径</li><li>req.protocol 获取协议类型</li><li>req.route 获取当前匹配的路由</li><li>req.subdomains 获取子域名</li><li>req.accepts 检查请求的<code>Accept</code>头的请求类型</li><li>req.get 获取指定的<code>HTTP</code>请求头</li><li>req.is 判断请求头<code>Content-Type</code>的<code>MMIE</code>类型</li></ul></li><li>res：表示服务器的响应，包含响应头、响应数据等<ul><li>res.append 追加请求头信息</li><li>res.set 在<code>res.append</code>之前将重置请求头</li><li>res.download 提示下载文件。</li><li>res.cookie 设置<code>cookie</code></li><li>res.clearCookie 清除<code>cookie</code></li><li>res.download 传输指定路径的文件</li><li>res.get 返回指定的请求头</li><li>res.end 结束响应过程。</li><li>res.json 发送<code>JSON</code>响应。</li><li>res.jsonp 使用<code>JSONP</code>支持发送<code>JSON</code>响应。</li><li>res.redirect 重定向请求。</li><li>res.render 渲染视图模板。</li><li>res.send 发送各种类型的回复。</li><li>res.sendFile 将文件作为八位字节流发送。</li><li>res.sendStatus 设置响应状态代码并将其字符串表示形式作为响应主体发送。</li><li>res.type 设置<code>Content-Type</code>的<code>MMIE</code>类型</li><li>res.format 根据<code>Content-Type</code>类型进行对应返回</li></ul></li></ul><h3 id="Express托管静态文件"><a href="#Express托管静态文件" class="headerlink" title="Express托管静态文件"></a>Express托管静态文件</h3><ul><li>为了提供诸如图像、CSS 文件和 JavaScript 文件之类的静态文件，请使用 <code>Express</code> 中的 express.static 内置中间件函数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express.static(root, [options])</span><br></pre></td></tr></table></figure><ul><li>通过如下代码就可以将 public 目录下的图片、CSS 文件、JavaScript 文件对外开放访问</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&apos;public&apos;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/images/kitten.jpg</span><br><span class="line">http://localhost:3000/css/style.css</span><br><span class="line">http://localhost:3000/js/app.js</span><br><span class="line">http://localhost:3000/images/bg.png</span><br><span class="line">http://localhost:3000/hello.html</span><br></pre></td></tr></table></figure><ul><li>如果要使用多个静态资源目录，请多次调用 express.static 中间件函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&apos;public&apos;))</span><br><span class="line">app.use(express.static(&apos;files&apos;))</span><br></pre></td></tr></table></figure><ul><li>也可以指定文件路径下访问资源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(&apos;/static&apos;, express.static(&apos;public&apos;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/static/images/kitten.jpg</span><br><span class="line">http://localhost:3000/static/css/style.css</span><br><span class="line">http://localhost:3000/static/js/app.js</span><br><span class="line">http://localhost:3000/static/images/bg.png</span><br><span class="line">http://localhost:3000/static/hello.html</span><br></pre></td></tr></table></figure><ul><li>关于启动的路径问题，建议使用路径拼接的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(&apos;/static&apos;, express.static(path.join(__dirname, &apos;public&apos;)))</span><br></pre></td></tr></table></figure><h3 id="Express动态路由"><a href="#Express动态路由" class="headerlink" title="Express动态路由"></a>Express动态路由</h3><ul><li>使用app.params来获取Express的动态路由参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/index/:id'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    data: req.params.id,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Express与前端交互"><a href="#Express与前端交互" class="headerlink" title="Express与前端交互"></a>Express与前端交互</h3><ul><li>获取<code>get</code>传递的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">'/index'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    data: req.query,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>获取<code>post</code>传递的数据 - 需要第三方模块的支持</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);<span class="comment">//解析,用req.body获取post参数</span></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.post(<span class="string">'/post'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    data: req.body,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="根据Content-Type的类型进行返回"><a href="#根据Content-Type的类型进行返回" class="headerlink" title="根据Content-Type的类型进行返回"></a>根据<code>Content-Type</code>的类型进行返回</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.format(&#123;</span><br><span class="line">  <span class="string">'text/plain'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'hey'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">'text/html'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'&lt;p&gt;hey&lt;/p&gt;'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">'application/json'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    res.send(&#123; <span class="attr">message</span>: <span class="string">'hey'</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">'default'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// log the request and respond with 406</span></span><br><span class="line">    res.status(<span class="number">406</span>).send(<span class="string">'Not Acceptable'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h3><ul><li>应用级中间件<ul><li>每次请求都会执行的公用中间件</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Time:'</span>, <span class="built_in">Date</span>.now());</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>路由级别中间件</li><li>错误处理中间件</li><li>内置中间件<ul><li>express.static 提供静态资产，如HTML文件，图像等。</li><li>express.json 使用JSON有效负载解析传入的请求。</li><li>express.urlencoded 用URL编码的有效负载解析传入的请求。</li></ul></li><li>第三方中间件<ul><li>cookie-parser 操作<code>cookie</code></li><li>cookie-session 操作<code>session</code></li><li>server-favicon 操作<code>favicon</code></li></ul></li></ul><h3 id="设置网站-favicon-图标"><a href="#设置网站-favicon-图标" class="headerlink" title="设置网站 favicon 图标"></a>设置网站 favicon 图标</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(favicon(__dirname + <span class="string">'/public/favicon.ico'</span>));</span><br></pre></td></tr></table></figure><h3 id="router路由"><a href="#router路由" class="headerlink" title="router路由"></a>router路由</h3><ul><li>路由处理函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req);</span><br><span class="line">  next();</span><br><span class="line">&#125;, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req);</span><br><span class="line">  next();</span><br><span class="line">&#125;, (req, res) =&gt; &#123;</span><br><span class="line">  req.json(&#123;</span><br><span class="line">    code: <span class="number">200</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> next1 = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> next2 = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> next3 = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send();</span><br><span class="line">&#125;;</span><br><span class="line">app.get(<span class="string">'/'</span>, [next1, next2, next3]);</span><br></pre></td></tr></table></figure><ul><li>一般经典处理路由方式<ul><li>第一层<code>next</code>处理逻辑</li><li>第二层<code>next</code>处理逻辑</li><li>……</li><li>处理完数据返回给用户</li></ul></li></ul><h3 id="错误处理路由-【尽量不要使用内置的错误处理句柄】"><a href="#错误处理路由-【尽量不要使用内置的错误处理句柄】" class="headerlink" title="错误处理路由 【尽量不要使用内置的错误处理句柄】"></a>错误处理路由 【尽量不要使用内置的错误处理句柄】</h3><ul><li>一般使用<code>标准输出</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(logError);</span><br></pre></td></tr></table></figure><ul><li>检测是否是<code>ajax</code>错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clientErrorHandler</span> (<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (req.xhr) &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(&#123; <span class="attr">error</span>: <span class="string">'Something failed!'</span> &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(clientErrorHandler);</span><br></pre></td></tr></table></figure><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorHandler</span> (<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  res.status(<span class="number">500</span>);</span><br><span class="line">  res.render(<span class="string">'error'</span>, &#123; <span class="attr">error</span>: err &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(errorHandler)</span><br></pre></td></tr></table></figure></li><li><p>使用第三方中间件</p></li></ul><h3 id="Express服务器日志中间件"><a href="#Express服务器日志中间件" class="headerlink" title="Express服务器日志中间件"></a>Express服务器日志中间件</h3><ul><li>morgan</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install morgan --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个读写的文件流</span></span><br><span class="line"><span class="keyword">const</span> accessLogStream = fs.createWriteStream(path.join(__dirname, <span class="string">'/log/access.log'</span>), &#123;<span class="attr">flag</span>: <span class="string">'a'</span>&#125;);</span><br><span class="line">app.use(morgan(<span class="function"><span class="keyword">function</span>(<span class="params">tokens, req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    tokens.method(req, res),</span><br><span class="line">    tokens.url(req, res),</span><br><span class="line">    tokens.status(req, res),</span><br><span class="line">    tokens.res(req, res, <span class="string">'content-length'</span>),</span><br><span class="line">    tokens[<span class="string">'response-time'</span>](req, res) + <span class="string">'ms'</span>,</span><br><span class="line">  ].join(<span class="string">' - '</span>);</span><br><span class="line">&#125;, &#123;<span class="attr">stream</span>: accessLogStream&#125;));</span><br></pre></td></tr></table></figure><ul><li>winston</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install winston --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">'winston'</span>);</span><br><span class="line"><span class="keyword">const</span> logger = winston.createLogger(&#123;</span><br><span class="line">  level: <span class="string">'info'</span>,</span><br><span class="line">  format: winston.format.json(),</span><br><span class="line">  transports: [</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// - Write to all logs with level `info` and below to `combined.log`</span></span><br><span class="line">    <span class="comment">// - Write all logs error (and below) to `error.log`.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">new</span> winston.transports.Console(),</span><br><span class="line">    <span class="keyword">new</span> winston.transports.File(&#123;<span class="attr">filename</span>: <span class="string">'error.log'</span>, <span class="attr">level</span>: <span class="string">'error'</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> winston.transports.File(&#123;<span class="attr">filename</span>: <span class="string">'combined.log'</span>&#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>可选触发方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger.log(<span class="string">'info'</span>, <span class="string">'这是info'</span>);</span><br><span class="line">logger.log(<span class="string">'error'</span>, <span class="string">'error+'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Express跨域"><a href="#Express跨域" class="headerlink" title="Express跨域"></a>Express跨域</h3><ul><li>修改<code>Access-Control-Allow-Origin</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置跨域访问</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>);</span><br><span class="line">    res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用第三方中间件<ul><li><a href="https://www.npmjs.com/package/cors" target="_blank" rel="noopener">cors</a></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.use(cors());</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/products/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">msg</span>: <span class="string">'This is CORS-enabled for all origins!'</span>&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'CORS-enabled web server listening on port 80'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.npmjs.com/package/http-proxy-middleware" target="_blank" rel="noopener">http-proxy-middleware</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.use(<span class="string">'/api'</span>, proxy(&#123; <span class="attr">target</span>: <span class="string">'*'</span>, <span class="attr">changeOrigin</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h3 id="使用模板引擎渲染页面"><a href="#使用模板引擎渲染页面" class="headerlink" title="使用模板引擎渲染页面"></a>使用模板引擎渲染页面</h3><ul><li>安装<code>pug</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pug --save</span><br></pre></td></tr></table></figure><ul><li>设置渲染引擎</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'pug'</span>);</span><br><span class="line">app.set(<span class="string">"views"</span>, path.resolve(__dirname, <span class="string">"views"</span>));</span><br></pre></td></tr></table></figure><ul><li>创建一个简单的<code>index.pug</code>骨架</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title= title</span><br><span class="line">  body</span><br><span class="line">    h1= message</span><br></pre></td></tr></table></figure><ul><li>根据路由传递参数，并渲染页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Hey'</span>, <span class="attr">message</span>: <span class="string">'Hello there!'</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>安装<code>EJS</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs --save</span><br></pre></td></tr></table></figure><ul><li>设置渲染引擎</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</span><br><span class="line">app.set(<span class="string">"views"</span>, path.resolve(__dirname, <span class="string">"views"</span>));</span><br></pre></td></tr></table></figure><ul><li>创建一个简单的<code>index.ejs</code>骨架</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">message</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>根据路由传递参数，并渲染页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Hey'</span>, <span class="attr">message</span>: <span class="string">'Hello there!'</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>同时使用<code>ejs</code>与<code>pug</code><ul><li><code>pug</code>为主</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> path =<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">"ejs"</span>);</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>, path.resolve(__dirname, <span class="string">"views"</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'pug'</span>);</span><br><span class="line">app.engine(<span class="string">"html"</span>, ejs.renderFile);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/pug'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'pug'</span>, &#123;</span><br><span class="line">    title: <span class="string">'pug'</span>,</span><br><span class="line">    message: <span class="string">'hello pug'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/ejs'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'html.ejs'</span>, &#123;</span><br><span class="line">    title: <span class="string">'ejs'</span>,</span><br><span class="line">    message: <span class="string">'hello ejs'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="与MongoDB连接"><a href="#与MongoDB连接" class="headerlink" title="与MongoDB连接"></a>与MongoDB连接</h3><ul><li>安装<code>mongodb</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose --save</span><br></pre></td></tr></table></figure><ul><li>连接数据库</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line">mongoose.Promise = global.Promise;</span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost:27017/userdb'</span>, &#123;<span class="attr">useMongoClient</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li>建模</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    username: <span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>关联已经建好的模型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userModel = mongoose.model(<span class="string">'user'</span>, userSchema);</span><br></pre></td></tr></table></figure><ul><li>基本操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/list'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  userModel.find(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(<span class="string">'UserList'</span>,&#123;</span><br><span class="line">      user: data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="express与MongoDB操作"><a href="#express与MongoDB操作" class="headerlink" title="express与MongoDB操作"></a>express与MongoDB操作</h3><ul><li>add - 增</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserAdd.ejs--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户编辑页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/users/add"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是页面渲染</span></span><br><span class="line">router.get(<span class="string">'/add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'UserAdd.ejs'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是数据库操作 post</span></span><br><span class="line">router.post(<span class="string">'/add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newUser = <span class="keyword">new</span> userModel(&#123;</span><br><span class="line">    username: req.body.username,</span><br><span class="line">    email: req.body.email</span><br><span class="line">  &#125;);</span><br><span class="line">  newUser.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(err) &#125;</span><br><span class="line">    res.redirect(<span class="string">'/users/list'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>delete - 删</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户提交要删除的 ID</span></span><br><span class="line">$(<span class="string">'.del'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = $(<span class="keyword">this</span>).data(<span class="string">'id'</span>);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/users/del?id='</span>+id,</span><br><span class="line">        type: <span class="string">'delete'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="built_in">console</span>.log(res); &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 id 删除对应数据</span></span><br><span class="line">router.delete(<span class="string">'/del'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = req.query.id;</span><br><span class="line">  userModel.remove(&#123;<span class="attr">_id</span>: id&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(err); &#125;</span><br><span class="line">    res.json(&#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">msg</span>: <span class="string">'删除成功'</span>&#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>edit - 改</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserEdit.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户编辑页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/users/update"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"&lt;%= user._id %&gt;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"&lt;%= user.username %&gt;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"&lt;%= user.email %&gt;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.前端页面可以使用动态路由做渲染</span></span><br><span class="line">router.get(<span class="string">'/edit/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = req.params.id;</span><br><span class="line">  userModel.findOne(&#123;<span class="attr">_id</span>: id&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'UserEdit'</span>, &#123;</span><br><span class="line">      user: data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 根据 id 查找到数据，修改后保存回去</span></span><br><span class="line">router.post(<span class="string">'/update'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = req.body.id;</span><br><span class="line">  userModel.findById(id, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(err); &#125;</span><br><span class="line">    data.username = req.body.username;</span><br><span class="line">    data.email = req.body.email;</span><br><span class="line">    data.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">      res.redirect(<span class="string">'/users/list'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Express安全策略"><a href="#Express安全策略" class="headerlink" title="Express安全策略"></a>Express安全策略</h3><ul><li>设置<code>cookie</code>安全<ul><li>secure 确保浏览器仅适用<code>https</code>进行<code>cookie</code>传递</li><li>httpOnly 确保cookie仅适用http（s）发送，而不是客户端javascript，有助于防止跨站点攻击</li><li>domain 表示cookie的域名，使用它来判断请求url的服务器的域名</li><li>path 表示cookie的路径</li><li>expires 设置cookie的过期时间</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'cookie-session'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> expiryDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() + <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// 1 hour</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  name: <span class="string">'session'</span>,</span><br><span class="line">  keys: [<span class="string">'key1'</span>, <span class="string">'key2'</span>],</span><br><span class="line">  cookie: &#123;</span><br><span class="line">    secure: <span class="literal">true</span>,</span><br><span class="line">    httpOnly: <span class="literal">true</span>,</span><br><span class="line">    domain: <span class="string">'example.com'</span>,</span><br><span class="line">    path: <span class="string">'foo/bar'</span>,</span><br><span class="line">    expires: expiryDate</span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><ul><li>节点请求频率限制<ul><li>安装<code>node-rate-limiter-flexible</code>中间件</li><li>依赖注册</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-rate-limiter-flexible --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> rateLimiterRedisMiddleware = <span class="built_in">require</span>(<span class="string">'./middleware/rateLimiterRedis'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(rateLimiterRedisMiddleware);</span><br></pre></td></tr></table></figure><ul><li>http请求头设置<ul><li>安装<code>helmet</code></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install helmet --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> helmet = <span class="built_in">require</span>(<span class="string">'helmet'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(helmet())</span><br></pre></td></tr></table></figure><ul><li>就算你不使用http请求安全模块，也至少禁用<code>X-prowered-by</code>（默认已经开启）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.disable(<span class="string">'x-powered-by'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;express安装&quot;&gt;&lt;a href=&quot;#express安装&quot; class=&quot;headerlink&quot; title=&quot;express安装&quot;&gt;&lt;/a&gt;express安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先你要确定你已经安装的&lt;code&gt;nodeJS&lt;/code&gt;&lt;/li&gt;
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Express" scheme="18600917746.github.io/tags/Express/"/>
    
      <category term="nodeJS" scheme="18600917746.github.io/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>hello-node</title>
    <link href="18600917746.github.io/2019/01/19/hello-node/"/>
    <id>18600917746.github.io/2019/01/19/hello-node/</id>
    <published>2019-01-19T07:40:46.000Z</published>
    <updated>2019-01-19T08:13:22.702Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>nodeJS初始</p></blockquote><h3 id="什么是nodeJS"><a href="#什么是nodeJS" class="headerlink" title="什么是nodeJS"></a>什么是nodeJS</h3><ul><li>他的本质是<code>javascript</code>解析器</li><li>他是<code>javascript</code>的运行环境</li><li>他是运行在服务端的</li><li>他是由<code>google-V8</code>引擎所创建的</li><li>他不会一个<code>WEB</code>服务器</li></ul><h3 id="为什么要使用nodeJS"><a href="#为什么要使用nodeJS" class="headerlink" title="为什么要使用nodeJS"></a>为什么要使用nodeJS</h3><ul><li>处理高效的I/O操作</li><li>提供高性能的web服务器</li><li>事件机制非常完善</li><li>天然处理DOM</li><li>社区比较完善，十分火热</li></ul><h3 id="nodeJS的优势"><a href="#nodeJS的优势" class="headerlink" title="nodeJS的优势"></a>nodeJS的优势</h3><ul><li>处理大流量数据</li><li>适合实时交互的应用<ul><li>在线聊天系统</li></ul></li><li>完美支持对象数据库<ul><li>MongoDB</li></ul></li><li>异步处理大量并发连接</li></ul><h3 id="学习nodeJS的前置知识"><a href="#学习nodeJS的前置知识" class="headerlink" title="学习nodeJS的前置知识"></a>学习nodeJS的前置知识</h3><ul><li>javascript</li><li>ES6</li><li>一些服务器相关的知识<ul><li>Linux</li><li>Http</li><li>Apache</li></ul></li><li>最好在Linux系统下进行开发</li></ul><h3 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li><li><a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></li><li><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></li></ul><blockquote><p>nodeJS入门</p></blockquote><h3 id="nodeJS安装"><a href="#nodeJS安装" class="headerlink" title="nodeJS安装"></a>nodeJS安装</h3><ul><li>学习阶段尽量使用最新版本</li><li>前往官网根据自己的设备进行对应下载</li></ul><h3 id="包管理系统-npm"><a href="#包管理系统-npm" class="headerlink" title="包管理系统 npm"></a>包管理系统 npm</h3><ul><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></li><li><a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></li><li>允许用户从<code>npm</code>服务器下载第三方的资源包到本地使用</li><li>允许用户从<code>npm</code>服务器下载并安装第三方的命令行程序<code>cli</code>到本地执行</li><li>允许用户将自己编写的包或者命令行程序上传到<code>npm</code>服务器供别人使用</li><li>本地配置<code>package.json</code>文件，使用命令自动化执行脚本</li></ul><h3 id="启动一个最简单的Http服务"><a href="#启动一个最简单的Http服务" class="headerlink" title="启动一个最简单的Http服务"></a>启动一个最简单的Http服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 定义返回的 header</span></span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plan'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 返回响应数据</span></span><br><span class="line">  response.end(<span class="string">'Hello world!\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务已经开启'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>nodeJS环境与npm命令深入</p></blockquote><h3 id="nodeJS提供的工具"><a href="#nodeJS提供的工具" class="headerlink" title="nodeJS提供的工具"></a>nodeJS提供的工具</h3><ul><li>nodeJS提供了一套交互环境（REPL），可以在这个环境内做简单的数据交互。<ul><li>进行简单的运算</li><li>ctrl + c 终端</li><li>ctrl + u 清空输入</li><li>ctrl + l 清空本次历史</li><li>table 命令提示</li></ul></li></ul><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><ul><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></li><li>npm更新npm</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure><ul><li>npm全局安装包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g &lt;packageName&gt;</span><br></pre></td></tr></table></figure><ul><li>npm全局卸载包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g &lt;packageName&gt;</span><br></pre></td></tr></table></figure><blockquote><p>nodeJS回调机制</p></blockquote><h3 id="什么是回调"><a href="#什么是回调" class="headerlink" title="什么是回调"></a>什么是回调</h3><ul><li>函数调用的方式<ul><li>同步调用</li><li>回调</li><li>异步调用 - <code>ajax</code>、<code>事件</code>、<code>setTimeout</code>、<code>setInterval</code></li></ul></li></ul><h3 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h3><ul><li>阻塞与非阻塞关注的是程序在等待调用结果（消息、返回值）时的状态</li><li>阻塞就是等待结果出来以后在顺序执行</li><li>非阻塞就是可以先去执行其他的事情，等结果出现再处理结果<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 阻塞代码 - 同步</span></span><br><span class="line"><span class="keyword">let</span> md = fs.readFileSync(<span class="string">'1.md'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(md.toString());</span><br><span class="line"><span class="comment">// 非阻塞代码 - 异步</span></span><br><span class="line">fs.readFile(<span class="string">'1.md'</span>, (error, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'判断是否是异步函数'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="nodeJS的回调"><a href="#nodeJS的回调" class="headerlink" title="nodeJS的回调"></a>nodeJS的回调</h3><blockquote><p>nodeJS的事件驱动机制</p></blockquote><h3 id="事件驱动模型"><a href="#事件驱动模型" class="headerlink" title="事件驱动模型"></a>事件驱动模型</h3><ul><li>单线程程序</li><li>通过<code>事件</code>与<code>回调</code>来模拟多线程</li><li>所有的事件模式都是依据<code>观察者设计模式</code>来实现的</li></ul><p><img src="event.jpg" alt=""></p><h3 id="事件处理代码流程"><a href="#事件处理代码流程" class="headerlink" title="事件处理代码流程"></a>事件处理代码流程</h3><ul><li>引入events对象，创建对象</li><li>绑定事件处理程序</li><li>触发事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入事件处理对象</span></span><br><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">const</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件处理函数</span></span><br><span class="line"><span class="keyword">let</span> connctHander = <span class="function"><span class="keyword">function</span> <span class="title">dad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'事件被触发'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>, connctHander);</span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'事件执行完毕'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>nodeJS模块化</p></blockquote><h3 id="nodeJS模块化"><a href="#nodeJS模块化" class="headerlink" title="nodeJS模块化"></a>nodeJS模块化</h3><ul><li>模块化的概念与意义<ul><li>为了让nodeJS的文件可以相互调用，nodeJS提供了一个简单的模块化机制</li><li>模块是nodeJS应用程序的基本组成部分</li><li>文件与模块是一一对应的。一个nodeJS文件就是一个模块</li><li>文件的内容可以是<code>javascript代码</code>、<code>JSON文件</code>、或者编译过得<code>C/C++扩展</code>。</li></ul></li><li>nodeJS中的模块<ul><li>nodeJS中存在4类模块（原生模块和3种文件模块）。</li></ul></li><li>nodeJS的模块加载流程<ul><li>从文件模块缓存中加载</li><li>从原生模块加载</li><li>从文件加载</li></ul></li><li>nodeJS模块导出与导入方式<ul><li><code>require</code>导入模块<ul><li><code>require</code>方法接受参数的传递：<ul><li><code>http</code>、<code>fs</code>、<code>path</code>、等原生模块。</li><li><code>./mod</code>或者<code>../mod</code>，尽量使用相当路径。</li><li><code>/mod</code>，绝对路径可能以为环境的不同导致路径出现错误。</li><li><code>mod</code>，非原生的文件模块</li></ul></li></ul></li><li><code>module.exports</code>导出模块<ul><li>可以导出函数名</li><li>可以导出对象名</li><li>可以导出变量名</li></ul></li></ul></li></ul><p><img src="./modules.jpg" alt=""></p><blockquote><p>nodeJS函数</p></blockquote><h3 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h3><ul><li>在javascript中，一个函数可以作为另一个函数的参数</li><li>也可以直接把函数体做为参数（匿名函数）。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Fun = <span class="function"><span class="keyword">function</span>(<span class="params">art</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'函数名作为参数'</span> + art);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">someFunction, value</span>) </span>&#123;</span><br><span class="line">  someFunction(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(Fun, <span class="string">'Hello'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数体作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun1</span>(<span class="params">value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">    callback(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fun1(<span class="string">'Hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data + <span class="string">'函数体作为参数'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>nodeJS路由</p></blockquote><ul><li>路由：在<code>nodeJS</code>中就是拿到响应的<code>url</code>路径，返回对应的资源。</li><li>实现一个最简单的<code>nodeJS服务器路由</code>机制</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequst</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> path = url.parse(request.url, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 传递参数给路由函数</span></span><br><span class="line">    route(path, response);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.createServer(onRequst).listen(<span class="number">9000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务已经启动'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">path, response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (path.pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    response.write(<span class="string">'hello world'</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.pathname === <span class="string">'/index/home'</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    response.end(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        query:path.query</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    response.end(<span class="string">'路由错误'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.route = route;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">'./http'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line">server.start(router.route);</span><br></pre></td></tr></table></figure><ul><li>nodeJS处理<code>get</code>请求<ul><li>get请求参数都在链接上，直接进行url地址参数解析就能获取全部参数</li></ul></li><li>nodeJS处理<code>post</code>请求<ul><li>post请求参数都包含在请求体内，需要进行解析才能拿到数据</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (path.pathname == <span class="string">'/post'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">let</span> post = <span class="string">''</span>;</span><br><span class="line">      request.on(<span class="string">'data'</span>, (chunk) =&gt; &#123;</span><br><span class="line">        post += chunk + <span class="string">'1'</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">console</span>.log(post);</span><br><span class="line"></span><br><span class="line">      request.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">        post = querstring.parse(post);</span><br><span class="line">        response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        response.end(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">          data: &#123;</span><br><span class="line">            code: <span class="number">200</span>,</span><br><span class="line">            post: post,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>nodeJS全局对象</p></blockquote><ul><li>全局对象是<code>global</code>，所有的全局变量（除了global本身以外）都是<code>global</code>对象的属性</li><li>__filename 表示当前正在执行脚本的文件名，他将输出文件的绝对路径，且和命令行所指定的文件名不一定相同。如果在模块中，返回的值一定是模块文件的路径。</li><li>__dirname 表示当前正在执行脚本的文件目录。</li><li>setTimeout (同javascript)根据给定的时间，只执行一次指定函数。</li><li>imeout (同javascript)</li><li>setInterval (同javascript)</li><li>clearInterval (同javascript)</li><li>console (同javascript)控制台标准输出<ul><li>log</li><li>info</li><li>error</li><li>waring</li><li>……</li></ul></li><li>process 表示nodeJS进程的状态</li><li>util 提供了一下javascript过于简洁没有封装的功能函数，推荐使用<code>underscore</code>与<code>lodash</code>进行项目开发。<ul><li><a href="https://lodash.com/docs/4.17.11" target="_blank" rel="noopener">lodash</a></li><li><a href="https://underscorejs.org/" target="_blank" rel="noopener">underscorejs</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;nodeJS初始&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是nodeJS&quot;&gt;&lt;a href=&quot;#什么是nodeJS&quot; class=&quot;headerlink&quot; title=&quot;什么是nodeJS&quot;&gt;&lt;/a&gt;什么是nodeJS&lt;/h3&gt;&lt;u
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="nodeJS" scheme="18600917746.github.io/tags/nodeJS/"/>
    
  </entry>
  
</feed>
