<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cheng</title>
  
  <subtitle>腹有诗书气自华</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="18600917746.github.io/"/>
  <updated>2019-01-29T06:58:28.503Z</updated>
  <id>18600917746.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hello-php</title>
    <link href="18600917746.github.io/2019/01/29/hello-php/"/>
    <id>18600917746.github.io/2019/01/29/hello-php/</id>
    <published>2019-01-29T02:55:36.000Z</published>
    <updated>2019-01-29T06:58:28.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>Integer（整型）</p><ul><li>整数必须至少有一个数字 (0-9)</li><li>整数不能包含逗号或空格</li><li>整数是没有小数点的</li><li>整数可以是正数或负数</li><li>整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$integar = <span class="number">12</span>;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>Float（浮点型）</p><ul><li>浮点数是带小数部分的数字，或是指数形式<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$float = <span class="number">12.5</span>;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>String（字符串）</p><ul><li>一个字符串是一串字符的序列</li><li>你可以将任何文本放在单引号和双引号中<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$string = <span class="string">'hello word'</span>;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>Boolean（布尔型）</p><ul><li>布尔型可以是 TRUE 或 FALSE。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$boolan = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>Array（数组）</p><ul><li>数组可以在一个变量中存储多个值。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$array = <span class="keyword">array</span>(<span class="string">"Volvo"</span>, <span class="string">"BMW"</span>, <span class="string">"Toyota"</span>);</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>Object（对象）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$object = <span class="keyword">array</span>(<span class="string">"Peter"</span> =&gt; <span class="string">"35"</span>, <span class="string">"Ben"</span> =&gt; <span class="string">"37"</span>, <span class="string">"Joe"</span> =&gt; <span class="string">"43"</span>);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p> NULL（空值）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$null = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="字符传"><a href="#字符传" class="headerlink" title="字符传"></a>字符传</h3><ul><li>获取字符传的长度<ul><li>strlen() </li></ul></li><li>字符串连接<ul><li><code>.</code><h3 id="PHP-变量作用域"><a href="#PHP-变量作用域" class="headerlink" title="PHP 变量作用域"></a>PHP 变量作用域</h3></li></ul></li><li>local</li><li>global</li><li>static</li><li>parameter</li></ul><blockquote><p>local 局部作用域</p><blockquote><p>在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">?php </span><br><span class="line">$x=<span class="number">5</span>; <span class="comment">// 全局变量 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    $y=<span class="number">10</span>; <span class="comment">// 局部变量 </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;测试函数内变量:&lt;p&gt;"</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"变量 x 为: $x"</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"变量 y 为: $y"</span>; </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">myTest(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;测试函数外变量:&lt;p&gt;"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"变量 x 为: $x"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"变量 y 为: $y"</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><p>global 作用域</p><blockquote><p>global 关键字用于函数内访问全局变量。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="number">5</span>;</span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $x,$y;</span><br><span class="line">    $y=$x+$y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><p>Static 作用域 </p><blockquote><p>当一个函数完成时，它的所有变量通常都会被删除。当你声明了 <code>Static</code> 关键字就不会被销毁<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> $x;</span><br><span class="line">    $x++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myTest(); <span class="comment">// 0</span></span><br><span class="line">myTest(); <span class="comment">// 1</span></span><br><span class="line">myTest(); <span class="comment">// 2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><p>parameter 参数作用域</p><blockquote><p>参数是通过调用代码将值传递给函数的局部变量。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">($x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $x;</span><br><span class="line">&#125;</span><br><span class="line">myTest(<span class="number">5</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><h3 id="PHP-echo-和-print-语句"><a href="#PHP-echo-和-print-语句" class="headerlink" title="PHP echo 和 print 语句"></a>PHP echo 和 print 语句</h3><blockquote><p>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p></blockquote><ul><li>echo <ul><li>可以输出一个或多个字符串</li><li>echo 是一个语言结构，使用的时候可以不用加括号，也可以加上括号： echo 或 echo()。</li></ul></li><li>print<ul><li>只允许输出一个字符串，返回值总为 1</li><li>print 同样是一个语言结构，可以使用括号，也可以不使用括号： print 或 print()。</li></ul></li></ul><h3 id="php-超级全局变量"><a href="#php-超级全局变量" class="headerlink" title="php 超级全局变量"></a>php 超级全局变量</h3><ul><li>$GLOBALS</li><li>$_SERVER </li><li>$_REQUEST 接收 <code>form</code> <code>get</code> 或者 <code>post</code> 请求</li><li>$_POST 接收 <code>form</code> <code>post</code> 请求</li><li>$_GET 接收 <code>form</code> <code>get</code> 请求</li><li>$_FILES </li><li>$_ENV 获取进程 参数</li><li>$_COOKIE 定义 <code>cookie</code> </li><li>$_SESSION 定义 <code>session</code></li></ul><blockquote><ol><li>$GLOBALS 是PHP的一个超级全局变量组，在一个PHP脚本的全部作用域中都可以访问。</li><li>$GLOBALS 是一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$x = <span class="number">75</span>; </span><br><span class="line">$y = <span class="number">25</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addition</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    $GLOBALS[<span class="string">'z'</span>] = $GLOBALS[<span class="string">'x'</span>] + $GLOBALS[<span class="string">'y'</span>]; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">addition(); </span><br><span class="line"><span class="keyword">echo</span> $z; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'PHP_SELF'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'SERVER_NAME'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_HOST'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'SCRIPT_NAME'</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>元素/代码</th><th>描述</th></tr></thead><tbody><tr><td>$_SERVER[‘PHP_SELF’]</td><td>当前执行脚本的文件名，与 document root 有关。例如，在地址为 <code>http://example.com/test.php/foo.bar</code> 的脚本中使用 $_SERVER[‘PHP_SELF’] 将得到 /test.php/foo.bar。<strong>FILE</strong> 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。</td></tr><tr><td>$_SERVER[‘GATEWAY_INTERFACE’]</td><td>服务器使用的 CGI 规范的版本；例如，”CGI/1.1”。</td></tr><tr><td>$_SERVER[‘SERVER_ADDR’]</td><td>当前运行脚本所在的服务器的 IP 地址。</td></tr><tr><td>$_SERVER[‘SERVER_NAME’]</td><td>当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。(如: <code>www.baidu.com</code>)</td></tr><tr><td>$_SERVER[‘SERVER_SOFTWARE’]</td><td>服务器标识字符串，在响应请求时的头信息中给出。 (如：Apache/2.2.24)</td></tr><tr><td>$_SERVER[‘SERVER_PROTOCOL’]</td><td>请求页面时通信协议的名称和版本。例如，”HTTP/1.0”。</td></tr><tr><td>$_SERVER[‘REQUEST_METHOD’]</td><td>访问页面使用的请求方法；例如，”GET”, “HEAD”，”POST”，”PUT”。</td></tr><tr><td>$_SERVER[‘REQUEST_TIME’]</td><td>请求开始时的时间戳。从 PHP 5.1.0 起可用。 (如：1377687496)</td></tr><tr><td>$_SERVER[‘QUERY_STRING’]</td><td>query string（查询字符串），如果有的话，通过它进行页面访问。</td></tr><tr><td>$_SERVER[‘HTTP_ACCEPT’]</td><td>当前请求头中 Accept: 项的内容，如果存在的话。</td></tr><tr><td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td><td>当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：”iso-8859-1,*,utf-8”。</td></tr><tr><td>$_SERVER[‘HTTP_HOST’]</td><td>当前请求头中 Host: 项的内容，如果存在的话。</td></tr><tr><td>$_SERVER[‘HTTP_REFERER’]</td><td>引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。)</td></tr><tr><td>$_SERVER[‘HTTPS’]</td><td>如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。</td></tr><tr><td>$_SERVER[‘REMOTE_ADDR’]</td><td>浏览当前页面的用户的 IP 地址。</td></tr><tr><td>$_SERVER[‘REMOTE_HOST’]</td><td>浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。</td></tr><tr><td>$_SERVER[‘REMOTE_PORT’]</td><td>用户机器上连接到 Web 服务器所使用的端口号。</td></tr><tr><td>$_SERVER[‘SCRIPT_FILENAME’]</td><td>当前执行脚本的绝对路径。</td></tr><tr><td>$_SERVER[‘SERVER_ADMIN’]</td><td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。(如：<a href="mailto:someone@runoob.com" target="_blank" rel="noopener">someone@runoob.com</a>)</td></tr><tr><td>$_SERVER[‘SERVER_PORT’]</td><td>Web 服务器使用的端口。默认值为 “80”。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。</td></tr><tr><td>$_SERVER[‘SERVER_SIGNATURE’]</td><td>包含了服务器版本和虚拟主机名的字符串。</td></tr><tr><td>$_SERVER[‘PATH_TRANSLATED’]</td><td>当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。</td></tr><tr><td>$_SERVER[‘SCRIPT_NAME’]</td><td>包含当前脚本的路径。这在页面需要指向自己时非常有用。<strong>FILE</strong> 常量包含当前脚本(例如包含文件)的完整路径和文件名。</td></tr><tr><td>$_SERVER[‘SCRIPT_URI’]</td><td>URI 用来指定要访问的页面。例如 “/index.html”。</td></tr></tbody></table><blockquote><p>$_REQUEST 用于收集HTML表单提交的数据</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"</span>&gt;</span><br><span class="line">Name: &lt;input type=<span class="string">"text"</span> name=<span class="string">"fname"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$name = $_REQUEST[<span class="string">'fname'</span>]; </span><br><span class="line"><span class="keyword">echo</span> $name; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>$_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”post”。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"</span>&gt;</span><br><span class="line">Name: &lt;input type=<span class="string">"text"</span> name=<span class="string">"fname"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$name = $_POST[<span class="string">'fname'</span>]; </span><br><span class="line"><span class="keyword">echo</span> $name; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>1.$_GET 同样被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”get”。<br>2.$_GET 也可以收集URL中发送的数据。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"</span>&gt;</span><br><span class="line">Name: &lt;input type=<span class="string">"text"</span> name=<span class="string">"fname"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">"test_get.php?subject=PHP&amp;web=runoob.com"</span>&gt;Test $GET&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$name = $_POST[<span class="string">'fname'</span>]; </span><br><span class="line">$subject = $_POST[<span class="string">'subject'</span>]; </span><br><span class="line">$web = $_POST[<span class="string">'web'</span>]; </span><br><span class="line"><span class="keyword">echo</span> $name; </span><br><span class="line"><span class="keyword">echo</span> $subject; </span><br><span class="line"><span class="keyword">echo</span> $web; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h3><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>addcslashes()</td><td>返回在指定的字符前添加反斜杠的字符串。</td></tr><tr><td>addslashes()</td><td>返回在预定义的字符前添加反斜杠的字符串。</td></tr><tr><td>bin2hex()</td><td>把 ASCII 字符的字符串转换为十六进制值。</td></tr><tr><td>chop()</td><td>移除字符串右侧的空白字符或其他字符。</td></tr><tr><td>chr()</td><td>从指定 ASCII 值返回字符。</td></tr><tr><td>chunk_split()</td><td>把字符串分割为一连串更小的部分。</td></tr><tr><td>convert_cyr_string()</td><td>把字符串由一种 Cyrillic 字符集转换成另一种。</td></tr><tr><td>convert_uudecode()</td><td>对 uuencode 编码的字符串进行解码。</td></tr><tr><td>convert_uuencode()</td><td>使用 uuencode 算法对字符串进行编码。</td></tr><tr><td>count_chars()</td><td>返回字符串所用字符的信息。</td></tr><tr><td>crc32()</td><td>计算一个字符串的 32 位 CRC（循环冗余校验）。</td></tr><tr><td>crypt()</td><td>单向的字符串加密法（hashing）。</td></tr><tr><td>echo()</td><td>输出一个或多个字符串。</td></tr><tr><td>explode()</td><td>把字符串打散为数组。</td></tr><tr><td>fprintf()</td><td>把格式化的字符串写入到指定的输出流。</td></tr><tr><td>get_html_translation_table()</td><td>返回 htmlspecialchars() 和 htmlentities() 使用的翻译表。</td></tr><tr><td>hebrev()</td><td>把希伯来（Hebrew）文本转换为可见文本。</td></tr><tr><td>hebrevc()</td><td>把希伯来（Hebrew）文本转换为可见文本，并把新行（\n）转换为 <br>。</td></tr><tr><td>hex2bin()</td><td>把十六进制值的字符串转换为 ASCII 字符。</td></tr><tr><td>html_entity_decode()</td><td>把 HTML 实体转换为字符。</td></tr><tr><td>htmlentities()</td><td>把字符转换为 HTML 实体。</td></tr><tr><td>htmlspecialchars_decode()</td><td>把一些预定义的 HTML 实体转换为字符。</td></tr><tr><td>htmlspecialchars()</td><td>把一些预定义的字符转换为 HTML 实体。</td></tr><tr><td>implode()</td><td>返回一个由数组元素组合成的字符串。</td></tr><tr><td>join()</td><td>implode() 的别名。</td></tr><tr><td>lcfirst()</td><td>把字符串中的首字符转换为小写。</td></tr><tr><td>levenshtein()</td><td>返回两个字符串之间的 Levenshtein 距离。</td></tr><tr><td>localeconv()</td><td>返回本地数字及货币格式信息。</td></tr><tr><td>ltrim()</td><td>移除字符串左侧的空白字符或其他字符。</td></tr><tr><td>md5()</td><td>计算字符串的 MD5 散列。</td></tr><tr><td>md5_file()</td><td>计算文件的 MD5 散列。</td></tr><tr><td>metaphone()</td><td>计算字符串的 metaphone 键。</td></tr><tr><td>money_format()</td><td>返回格式化为货币字符串的字符串。</td></tr><tr><td>nl_langinfo()</td><td>返回指定的本地信息。</td></tr><tr><td>nl2br()</td><td>在字符串中的每个新行之前插入 HTML 换行符。</td></tr><tr><td>number_format()</td><td>通过千位分组来格式化数字。</td></tr><tr><td>ord()</td><td>返回字符串中第一个字符的 ASCII 值。</td></tr><tr><td>parse_str()</td><td>把查询字符串解析到变量中。</td></tr><tr><td>print()</td><td>输出一个或多个字符串。</td></tr><tr><td>printf()</td><td>输出格式化的字符串。</td></tr><tr><td>quoted_printable_decode()</td><td>把 quoted-printable 字符串转换为 8 位字符串。</td></tr><tr><td>quoted_printable_encode()</td><td>把 8 位字符串转换为 quoted-printable 字符串。</td></tr><tr><td>quotemeta()</td><td>引用元字符。</td></tr><tr><td>rtrim()</td><td>移除字符串右侧的空白字符或其他字符。</td></tr><tr><td>setlocale()</td><td>设置地区信息（地域信息）。</td></tr><tr><td>sha1()</td><td>计算字符串的 SHA-1 散列。</td></tr><tr><td>sha1_file()</td><td>计算文件的 SHA-1 散列。</td></tr><tr><td>similar_text()</td><td>计算两个字符串的相似度。</td></tr><tr><td>soundex()</td><td>计算字符串的 soundex 键。</td></tr><tr><td>sprintf()</td><td>把格式化的字符串写入一个变量中。</td></tr><tr><td>sscanf()</td><td>根据指定的格式解析来自一个字符串的输入。</td></tr><tr><td>str_getcsv()</td><td>把 CSV 字符串解析到数组中。</td></tr><tr><td>str_ireplace()</td><td>替换字符串中的一些字符（大小写不敏感）。</td></tr><tr><td>str_pad()</td><td>把字符串填充为新的长度。</td></tr><tr><td>str_repeat()</td><td>把字符串重复指定的次数。</td></tr><tr><td>str_replace()</td><td>替换字符串中的一些字符（大小写敏感）。</td></tr><tr><td>str_rot13()</td><td>对字符串执行 ROT13 编码。</td></tr><tr><td>str_shuffle()</td><td>随机地打乱字符串中的所有字符。</td></tr><tr><td>str_split()</td><td>把字符串分割到数组中。</td></tr><tr><td>str_word_count()</td><td>计算字符串中的单词数。</td></tr><tr><td>strcasecmp()</td><td>比较两个字符串（大小写不敏感）。</td></tr><tr><td>strchr()</td><td>查找字符串在另一字符串中的第一次出现。（strstr() 的别名。）</td></tr><tr><td>strcmp()</td><td>比较两个字符串（大小写敏感）。</td></tr><tr><td>strcoll()</td><td>比较两个字符串（根据本地设置）。</td></tr><tr><td>strcspn()</td><td>返回在找到任何指定的字符之前，在字符串查找的字符数。</td></tr><tr><td>strip_tags()</td><td>剥去字符串中的 HTML 和 PHP 标签。</td></tr><tr><td>stripcslashes()</td><td>删除由 addcslashes() 函数添加的反斜杠。</td></tr><tr><td>stripslashes()</td><td>删除由 addslashes() 函数添加的反斜杠。</td></tr><tr><td>stripos()</td><td>返回字符串在另一字符串中第一次出现的位置（大小写不敏感）。</td></tr><tr><td>stristr()</td><td>查找字符串在另一字符串中第一次出现的位置（大小写不敏感）。</td></tr><tr><td>strlen()</td><td>返回字符串的长度。</td></tr><tr><td>strnatcasecmp()</td><td>使用一种”自然排序”算法来比较两个字符串（大小写不敏感）。</td></tr><tr><td>strnatcmp()</td><td>使用一种”自然排序”算法来比较两个字符串（大小写敏感）。</td></tr><tr><td>strncasecmp()</td><td>前 n 个字符的字符串比较（大小写不敏感）。</td></tr><tr><td>strncmp()</td><td>前 n 个字符的字符串比较（大小写敏感）。</td></tr><tr><td>strpbrk()</td><td>在字符串中搜索指定字符中的任意一个。</td></tr><tr><td>strpos()</td><td>返回字符串在另一字符串中第一次出现的位置（大小写敏感）。</td></tr><tr><td>strrchr()</td><td>查找字符串在另一个字符串中最后一次出现。</td></tr><tr><td>strrev()</td><td>反转字符串。</td></tr><tr><td>strripos()</td><td>查找字符串在另一字符串中最后一次出现的位置(大小写不敏感)。</td></tr><tr><td>strrpos()</td><td>查找字符串在另一字符串中最后一次出现的位置(大小写敏感)。</td></tr><tr><td>strspn()</td><td>返回在字符串中包含的特定字符的数目。</td></tr><tr><td>strstr()</td><td>查找字符串在另一字符串中的第一次出现（大小写敏感）。</td></tr><tr><td>strtok()</td><td>把字符串分割为更小的字符串。</td></tr><tr><td>strtolower()</td><td>把字符串转换为小写字母。</td></tr><tr><td>strtoupper()</td><td>把字符串转换为大写字母。</td></tr><tr><td>strtr()</td><td>转换字符串中特定的字符。</td></tr><tr><td>substr()</td><td>返回字符串的一部分。</td></tr><tr><td>substr_compare()</td><td>从指定的开始位置（二进制安全和选择性区分大小写）比较两个字符串。</td></tr><tr><td>substr_count()</td><td>计算子串在字符串中出现的次数。</td></tr><tr><td>substr_replace()</td><td>把字符串的一部分替换为另一个字符串。</td></tr><tr><td>trim()</td><td>移除字符串两侧的空白字符和其他字符。</td></tr><tr><td>ucfirst()</td><td>把字符串中的首字符转换为大写。</td></tr><tr><td>ucwords()</td><td>把字符串中每个单词的首字符转换为大写。</td></tr><tr><td>vfprintf()</td><td>把格式化的字符串写到指定的输出流。</td></tr><tr><td>vprintf()</td><td>输出格式化的字符串。</td></tr><tr><td>vsprintf()</td><td>把格式化字符串写入变量中。</td></tr><tr><td>wordwrap()</td><td>按照指定长度对字符串进行折行处理。</td></tr></tbody></table><h3 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array(数组)"></a>Array(数组)</h3><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>array()</td><td>创建数组。</td></tr><tr><td>array_change_key_case()</td><td>返回其键均为大写或小写的数组。</td></tr><tr><td>array_chunk()</td><td>把一个数组分割为新的数组块。</td></tr><tr><td>array_column()</td><td>返回输入数组中某个单一列的值。</td></tr><tr><td>array_combine()</td><td>通过合并两个数组（一个为键名数组，一个为键值数组）来创建一个新数组。</td></tr><tr><td>array_count_values()</td><td>用于统计数组中所有值出现的次数。</td></tr><tr><td>array_diff()</td><td>比较数组，返回两个数组的差集（只比较键值）。</td></tr><tr><td>array_diff_assoc()</td><td>比较数组，返回两个数组的差集（比较键名和键值）。</td></tr><tr><td>array_diff_key()</td><td>比较数组，返回两个数组的差集（只比较键名）。</td></tr><tr><td>array_diff_uassoc()</td><td>比较数组，返回两个数组的差集（比较键名和键值，使用用户自定义的键名比较函数）。</td></tr><tr><td>array_diff_ukey()</td><td>比较数组，返回两个数组的差集（只比较键名，使用用户自定义的键名比较函数）。</td></tr><tr><td>array_fill()</td><td>用给定的键值填充数组。</td></tr><tr><td>array_fill_keys()</td><td>用给定的指定键名的键值填充数组。</td></tr><tr><td>array_filter()</td><td>用回调函数过滤数组中的元素。</td></tr><tr><td>array_flip()</td><td>反转/交换数组中的键名和对应关联的键值。</td></tr><tr><td>array_intersect()</td><td>比较数组，返回两个数组的交集（只比较键值）。</td></tr><tr><td>array_intersect_assoc()</td><td>比较数组，返回两个数组的交集（比较键名和键值）。</td></tr><tr><td>array_intersect_key()</td><td>比较数组，返回两个数组的交集（只比较键名）。</td></tr><tr><td>array_intersect_uassoc()</td><td>比较数组，返回两个数组的交集（比较键名和键值，使用用户自定义的键名比较函数）。</td></tr><tr><td>array_intersect_ukey()</td><td>比较数组，返回两个数组的交集（只比较键名，使用用户自定义的键名比较函数）。</td></tr><tr><td>array_key_exists()</td><td>检查指定的键名是否存在于数组中。</td></tr><tr><td>array_keys()</td><td>返回数组中所有的键名。</td></tr><tr><td>array_map()</td><td>将用户自定义函数作用到给定数组的每个值上，返回新的值。</td></tr><tr><td>array_merge()</td><td>把一个或多个数组合并为一个数组。</td></tr><tr><td>array_merge_recursive()</td><td>递归地把一个或多个数组合并为一个数组。</td></tr><tr><td>array_multisort()</td><td>对多个数组或多维数组进行排序。</td></tr><tr><td>array_pad()</td><td>将指定数量的带有指定值的元素插入到数组中。</td></tr><tr><td>array_pop()</td><td>删除数组中的最后一个元素（出栈）。</td></tr><tr><td>array_product()</td><td>计算数组中所有值的乘积。</td></tr><tr><td>array_push()</td><td>将一个或多个元素插入数组的末尾（入栈）。</td></tr><tr><td>array_rand()</td><td>从数组中随机选出一个或多个元素，返回键名。</td></tr><tr><td>array_reduce()</td><td>通过使用用户自定义函数，迭代地将数组简化为一个字符串，并返回。</td></tr><tr><td>array_replace()</td><td>使用后面数组的值替换第一个数组的值。</td></tr><tr><td>array_replace_recursive()</td><td>递归地使用后面数组的值替换第一个数组的值。</td></tr><tr><td>array_reverse()</td><td>将原数组中的元素顺序翻转，创建新的数组并返回。</td></tr><tr><td>array_search()</td><td>在数组中搜索给定的值，如果成功则返回相应的键名。</td></tr><tr><td>array_shift()</td><td>删除数组中的第一个元素，并返回被删除元素的值。</td></tr><tr><td>array_slice()</td><td>返回数组中的选定部分。</td></tr><tr><td>array_splice()</td><td>把数组中的指定元素去掉并用其它值取代。</td></tr><tr><td>array_sum()</td><td>返回数组中所有值的和。</td></tr><tr><td>array_udiff()</td><td>比较数组，返回两个数组的差集（只比较键值，使用一个用户自定义的键名比较函数）。</td></tr><tr><td>array_udiff_assoc()</td><td>比较数组，返回两个数组的差集（比较键名和键值，使用内建函数比较键名，使用用户自定义函数比较键值）。</td></tr><tr><td>array_udiff_uassoc()</td><td>比较数组，返回两个数组的差集（比较键名和键值，使用两个用户自定义的键名比较函数）。</td></tr><tr><td>array_uintersect()</td><td>比较数组，返回两个数组的交集（只比较键值，使用一个用户自定义的键名比较函数）。</td></tr><tr><td>array_uintersect_assoc()</td><td>比较数组，返回两个数组的交集（比较键名和键值，使用内建函数比较键名，使用用户自定义函数比较键值）。</td></tr><tr><td>array_uintersect_uassoc()</td><td>比较数组，返回两个数组的交集（比较键名和键值，使用两个用户自定义的键名比较函数）。</td></tr><tr><td>array_unique()</td><td>删除数组中重复的值。</td></tr><tr><td>array_unshift()</td><td>在数组开头插入一个或多个元素。</td></tr><tr><td>array_values()</td><td>返回数组中所有的值。</td></tr><tr><td>array_walk()</td><td>对数组中的每个成员应用用户函数。</td></tr><tr><td>array_walk_recursive()</td><td>对数组中的每个成员递归地应用用户函数。</td></tr><tr><td>arsort()</td><td>对关联数组按照键值进行降序排序。</td></tr><tr><td>asort()</td><td>对关联数组按照键值进行升序排序。</td></tr><tr><td>compact()</td><td>创建一个包含变量名和它们的值的数组。</td></tr><tr><td>count()</td><td>返回数组中元素的数目。</td></tr><tr><td>current()</td><td>返回数组中的当前元素。</td></tr><tr><td>each()</td><td>返回数组中当前的键／值对。</td></tr><tr><td>end()</td><td>将数组的内部指针指向最后一个元素。</td></tr><tr><td>extract()</td><td>从数组中将变量导入到当前的符号表。</td></tr><tr><td>in_array()</td><td>检查数组中是否存在指定的值。</td></tr><tr><td>key()</td><td>从关联数组中取得键名。</td></tr><tr><td>krsort()</td><td>对关联数组按照键名降序排序。</td></tr><tr><td>ksort()</td><td>对关联数组按照键名升序排序。</td></tr><tr><td>list()</td><td>把数组中的值赋给一些数组变量。</td></tr><tr><td>natcasesort()</td><td>用”自然排序”算法对数组进行不区分大小写字母的排序。</td></tr><tr><td>natsort()</td><td>用”自然排序”算法对数组排序。</td></tr><tr><td>next()</td><td>将数组中的内部指针向后移动一位。</td></tr><tr><td>pos()</td><td>current() 的别名。</td></tr><tr><td>prev()</td><td>将数组的内部指针倒回一位。</td></tr><tr><td>range()</td><td>创建一个包含指定范围的元素的数组。</td></tr><tr><td>reset()</td><td>将数组的内部指针指向第一个元素。</td></tr><tr><td>rsort()</td><td>对数值数组进行降序排序。</td></tr><tr><td>shuffle()</td><td>把数组中的元素按随机顺序重新排列。</td></tr><tr><td>sizeof()</td><td>count() 的别名。</td></tr><tr><td>sort()</td><td>对数值数组进行升序排序。</td></tr><tr><td>uasort()</td><td>使用用户自定义的比较函数对数组中的键值进行排序。</td></tr><tr><td>uksort()</td><td>使用用户自定义的比较函数对数组中的键名进行排序。</td></tr><tr><td>usort()</td><td>使用用户自定义的比较函数对数组进行排序。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Integer（整型）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数必须至少有一个数字 (0-9)&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="后端" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/hello/"/>
    
    
      <category term="php" scheme="18600917746.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>进程、线程与协程</title>
    <link href="18600917746.github.io/2019/01/28/%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B/"/>
    <id>18600917746.github.io/2019/01/28/进程、线程与协程/</id>
    <published>2019-01-28T08:17:49.000Z</published>
    <updated>2019-01-29T02:53:46.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><blockquote><p>一个程序可以由多个进程组成【一个QQ应用可以登录多个qq账号同时执行】</p><ul><li>可被 <code>CPU</code> 执行性的 <code>可执行文件</code></li><li>是一个静态的文件，如果被执行了就是变成了动态的 <code>进程</code></li></ul></blockquote><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><blockquote><p>一个进程可以由多个线程组成</p><ul><li>什么是进程<ul><li>系统进行资源分配和调度的基本单位，是操作系统结构的基础。</li><li>在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；</li><li>在当代面向线程设计的计算机结构中，进程是线程的容器。</li><li>狭义定义：进程是正在运行的程序的实例</li></ul></li></ul></blockquote><blockquote><p>进程的概念主要有两点：第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行之），它才能成为一个活动的实体，我们称其为进程。</p></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><blockquote><p>一个线程可以包含多个协程</p><ul><li>什么是线程</li></ul></blockquote><blockquote><p>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。</p></blockquote><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><blockquote><p>协程是最小的执行单元</p></blockquote><ul><li>什么是协程<ul><li>协程，又称微线程</li><li>因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</li></ul></li></ul><blockquote><p>与子例程一样，协程也是一种程序组件。 相对子例程而言，协程更为一般和灵活，但在实践中使用没有子例程那样广泛。 协程源自Simula和Modula-2语言，但也有其他语言支持。 协程更适合于用来实现彼此熟悉的程序组件，如合作式多任务，迭代器，无限列表和管道。</p></blockquote><h3 id="程序的分类"><a href="#程序的分类" class="headerlink" title="程序的分类"></a>程序的分类</h3><ul><li>IO 密集型【input/output 输出/输出行】<ul><li>CPU 操作硬盘</li><li>接口发送接收数据</li><li>不在 <code>cpu</code> 与 <code>内存</code> 之间操作的</li><li>多数与网络有关</li></ul></li><li>CPU 密集型<ul><li>cpu 进行数学计算</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;程序&quot;&gt;&lt;a href=&quot;#程序&quot; class=&quot;headerlink&quot; title=&quot;程序&quot;&gt;&lt;/a&gt;程序&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一个程序可以由多个进程组成【一个QQ应用可以登录多个qq账号同时执行】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可被 &lt;code
      
    
    </summary>
    
      <category term="茶余饭后" scheme="18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>hello-mongoDB</title>
    <link href="18600917746.github.io/2019/01/28/hello-mongoDB/"/>
    <id>18600917746.github.io/2019/01/28/hello-mongoDB/</id>
    <published>2019-01-28T04:03:49.000Z</published>
    <updated>2019-01-28T04:04:55.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB的启动方式"><a href="#MongoDB的启动方式" class="headerlink" title="MongoDB的启动方式"></a>MongoDB的启动方式</h2><blockquote><p>1.通过命令启动mongo服务<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath = D:\mongodb\data\db --logpath = D:\mongodb\data\log\mongod.log</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.通过配置文件来启动mongo服务，配置文件需要自己创建，只需要在-f 后制定你自己的配置文件路径即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f D:\mongodb\conf\mongo.conf</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="mongo-conf"><a href="#mongo-conf" class="headerlink" title="mongo.conf"></a>mongo.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">path: C:\Users\Administrator\Desktop\nnn\dataBase\data\log\mongod.log</span><br><span class="line">storage:</span><br><span class="line">   dbPath: C:\Users\Administrator\Desktop\nnn\dataBase\data\db</span><br><span class="line">net:</span><br><span class="line">bindIp: 127.0.0.1</span><br><span class="line">  port: 27018</span><br></pre></td></tr></table></figure><h2 id="MongoDB-Shell"><a href="#MongoDB-Shell" class="headerlink" title="MongoDB Shell"></a>MongoDB Shell</h2><blockquote><p>连接已开启的 mongoDB 服务器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port=<span class="number">27018</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>创建数据库 of 切换数据库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use one</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>显示已有数据库（不包括 无表 数据库）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看当前所在的数据库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看当前所在的表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>show collections</span><br><span class="line"><span class="number">2.</span>show tables</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看数据库版本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.version()</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看当前用户信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show users</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在当前数据库下创建表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table.inset(&#123;&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>退出当前 shell<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>exit</span><br><span class="line"><span class="number">2.</span>Ctrl + c</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="数据库-基本操作"><a href="#数据库-基本操作" class="headerlink" title="数据库 基本操作"></a>数据库 基本操作</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="1-inset-data-单条插入数据库，并创建-id"><a href="#1-inset-data-单条插入数据库，并创建-id" class="headerlink" title="1.inset(data) 单条插入数据库，并创建 _id"></a>1.inset(data) 单条插入数据库，并创建 _id</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'lishi'</span>,</span><br><span class="line"><span class="string">"age"</span>:<span class="number">24</span></span><br><span class="line"> &#125;</span><br><span class="line">db.table.insert(data);</span><br></pre></td></tr></table></figure><h4 id="2-batchInset-data-多条插入数据库，并创建-id-适用于多条数据插入到一个表中"><a href="#2-batchInset-data-多条插入数据库，并创建-id-适用于多条数据插入到一个表中" class="headerlink" title="2.batchInset(data) 多条插入数据库，并创建 _id [适用于多条数据插入到一个表中]"></a>2.batchInset(data) 多条插入数据库，并创建 _id [适用于多条数据插入到一个表中]</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=[&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'lishi'</span>,</span><br><span class="line"><span class="string">"age"</span>:<span class="number">24</span></span><br><span class="line"> &#125;,&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'zhaoliu'</span>,</span><br><span class="line"><span class="string">"age"</span>:<span class="number">22</span></span><br><span class="line"> &#125;]</span><br><span class="line">db.table.batchInset(data);</span><br></pre></td></tr></table></figure><h4 id="第三方数据库导入"><a href="#第三方数据库导入" class="headerlink" title="第三方数据库导入"></a>第三方数据库导入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 mongoimport  最大消息长度是 <span class="number">48</span>M ，插入错误立即停止</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有 文档 都要在 <span class="number">16</span>M 以下</span><br></pre></td></tr></table></figure><h3 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h3><h4 id="1-find-option"><a href="#1-find-option" class="headerlink" title="1.find(option);"></a>1.find(option);</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table.find(&#123;&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-findOne-option"><a href="#2-findOne-option" class="headerlink" title="2.findOne(option);"></a>2.findOne(option);</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne();</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><h4 id="1-update-option-data-upsert-More"><a href="#1-update-option-data-upsert-More" class="headerlink" title="1.update(option,data,upsert,More);"></a>1.update(option,data,upsert,More);</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'lishi -&gt; zhangsan'</span>,</span><br><span class="line"><span class="string">"age"</span>:<span class="number">25</span></span><br><span class="line"> &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"name"</span>:<span class="string">'lishi'</span>&#125;,data);</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>option</td><td>object</td><td>{}</td><td>y</td><td>查询条件</td></tr><tr><td>data</td><td>object</td><td>{}</td><td>y</td><td>插入的数据</td></tr><tr><td>upsert</td><td>boolean</td><td>false</td><td>n{建议默认填写}</td><td>是否使用upsert</td></tr><tr><td>More</td><td>boolean</td><td>false</td><td>n{建议默认填写}</td><td>是否更新多个文档</td></tr></tbody></table><h3 id="【永久删除】数据"><a href="#【永久删除】数据" class="headerlink" title="【永久删除】数据"></a>【永久删除】数据</h3><h4 id="1-remove-option"><a href="#1-remove-option" class="headerlink" title="1.remove(option);"></a>1.remove(option);</h4><blockquote><p>option 为空时删除所有的数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'lishi -&gt; zhangsan'</span></span><br><span class="line"> &#125;</span><br><span class="line">db.table.remove(data);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="【永久删除】清空表"><a href="#【永久删除】清空表" class="headerlink" title="【永久删除】清空表"></a>【永久删除】清空表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table.drop()</span><br></pre></td></tr></table></figure><h2 id="创建-mongorc-js-文件-mongo-同级目录自动执行文件-常用于移除危险操作"><a href="#创建-mongorc-js-文件-mongo-同级目录自动执行文件-常用于移除危险操作" class="headerlink" title="创建 .mongorc.js 文件    [mongo 同级目录自动执行文件]{常用于移除危险操作}"></a>创建 .mongorc.js 文件    [mongo 同级目录自动执行文件]{常用于移除危险操作}</h2><blockquote><p>启动时 –norc 可以禁止启动 .mongorc.js 文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .mongorc.js</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">3</span>);</span><br><span class="line">print(<span class="string">'Hell，'</span>+list[index]+<span class="string">'haha'</span>);</span><br><span class="line"><span class="comment">// 常用于移除危险操作</span></span><br><span class="line"><span class="keyword">var</span> no=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">print(<span class="string">'Not on my watch.'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 禁止删除数据库</span></span><br><span class="line">db.dropDatabase = DB.prototype.dropDatabase = no;</span><br><span class="line"><span class="comment">// 禁止删除集合</span></span><br><span class="line">DBCollection.prototype.drop = no;</span><br><span class="line"><span class="comment">// 禁止删除索引</span></span><br><span class="line">DBCollection.prototype.dropIndex = no；</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="update-使用修改器"><a href="#update-使用修改器" class="headerlink" title="update 使用修改器"></a>update 使用修改器</h2><h3 id="set-修改单条数据"><a href="#set-修改单条数据" class="headerlink" title="$set 修改单条数据"></a>$set 修改单条数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>), <span class="string">"name"</span> : <span class="string">"cheng"</span> &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$set"</span>:&#123;<span class="string">"name"</span>:<span class="string">'lishi'</span>&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>), <span class="string">"name"</span> : <span class="string">"lishi"</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="unset-删除单条数据"><a href="#unset-删除单条数据" class="headerlink" title="$unset 删除单条数据"></a>$unset 删除单条数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>), <span class="string">"name"</span> : <span class="string">"lishi"</span> &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$unset"</span>:&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="inc-数字类-值增加或减少"><a href="#inc-数字类-值增加或减少" class="headerlink" title="$inc 数字类 值增加或减少"></a>$inc 数字类 值增加或减少</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>), <span class="string">"name"</span> : <span class="string">"lishi"</span> &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$inc"</span>:&#123;<span class="string">"score"</span>:<span class="number">10</span>&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>),&#123;<span class="string">"score"</span>:<span class="number">10</span>&#125;&#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$inc"</span>:&#123;<span class="string">"score"</span>:<span class="number">-2</span>&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>),&#123;<span class="string">"score"</span>:<span class="number">8</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="push-数组修改器"><a href="#push-数组修改器" class="headerlink" title="$push [数组修改器]"></a>$push [数组修改器]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>),&#123;<span class="string">"score"</span>:<span class="number">8</span>&#125;&#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$push"</span>:&#123;<span class="string">"comments"</span>:&#123;<span class="string">"name"</span>:<span class="string">"joe"</span>,<span class="string">"age"</span>:<span class="number">24</span>,<span class="string">"content"</span>:<span class="string">"Hello..."</span>&#125;&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd55e45e299a187e4ed729f"</span>), <span class="string">"age"</span> : <span class="number">190</span>, <span class="string">"comments"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"joe"</span>, <span class="string">"age"</span> : <span class="number">24</span>, <span class="string">"content"</span> : <span class="string">"Hello..."</span> &#125; ] &#125;</span><br><span class="line"><span class="comment">// 一次 $push 添加多次数值</span></span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;<span class="string">"$push"</span>:&#123;<span class="string">"comments"</span>:&#123;<span class="string">"$each"</span>:[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]&#125;&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd55e45e299a187e4ed729f"</span>), <span class="string">"age"</span> : <span class="number">190</span>, <span class="string">"comments"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"joe"</span>, <span class="string">"age"</span> : <span class="number">24</span>, <span class="string">"content"</span> : <span class="string">"Hello..."</span> &#125;,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="slice-限制数组的长度-参数只能是负数"><a href="#slice-限制数组的长度-参数只能是负数" class="headerlink" title="$slice 限制数组的长度 [参数只能是负数]"></a>$slice 限制数组的长度 [参数只能是负数]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保留最后添加的 10 个</span></span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;</span><br><span class="line"><span class="string">"$push"</span>:&#123;<span class="string">"comments"</span>:&#123;</span><br><span class="line"><span class="string">"$each"</span>:[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>],</span><br><span class="line"><span class="string">"$slice"</span>:<span class="number">-10</span></span><br><span class="line">&#125;&#125;&#125;);</span><br><span class="line"><span class="comment">// 保留前 10 个 根据 name 进行排序 保留</span></span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5bd52f7700530261250525b6"</span>)&#125;,&#123;</span><br><span class="line"><span class="string">"$push"</span>:&#123;<span class="string">"comments"</span>:&#123;</span><br><span class="line"><span class="string">"$each"</span>:[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>],</span><br><span class="line"><span class="string">"$slice"</span>:<span class="number">-10</span>,</span><br><span class="line"><span class="string">"$sort"</span>:&#123;<span class="string">"name"</span>:<span class="number">-1</span>&#125;</span><br><span class="line">&#125;&#125;&#125;);</span><br></pre></td></tr></table></figure><h3 id="addToSet-数组去重复添加"><a href="#addToSet-数组去重复添加" class="headerlink" title="$addToSet 数组去重复添加"></a>$addToSet 数组去重复添加</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne()；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span> ] &#125;</span><br><span class="line">da.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$addToSet"</span>:&#123;<span class="string">"list"</span>:<span class="string">"王五"</span>&#125;&#125;)；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>,<span class="string">"王五"</span> ] &#125;</span><br><span class="line">da.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$addToSet"</span>:&#123;<span class="string">"list"</span>:<span class="string">"王五"</span>&#125;&#125;)；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>,<span class="string">"王五"</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="each-循环添加-去重"><a href="#each-循环添加-去重" class="headerlink" title="$each 循环添加 + 去重"></a>$each 循环添加 + 去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne()；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>,<span class="string">"王五"</span> ] &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$addToSet"</span>:&#123;<span class="string">"list"</span>:&#123;<span class="string">"$each"</span>:[<span class="string">"钱七"</span>,<span class="string">"李八"</span>,<span class="string">"王五"</span>]&#125;&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"钱七"</span>, <span class="string">"李八"</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="pop-数组删除元素-1-删除最后一个-1-删除第一个"><a href="#pop-数组删除元素-1-删除最后一个-1-删除第一个" class="headerlink" title="$pop 数组删除元素 [ 1 删除最后一个 -1 删除第一个]"></a>$pop 数组删除元素 [ 1 删除最后一个 -1 删除第一个]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne()；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"钱七"</span>, <span class="string">"李八"</span> ] &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$pop"</span>:&#123;<span class="string">"list"</span>:<span class="number">1</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ <span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"钱七"</span>] &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$pop"</span>:&#123;<span class="string">"list"</span>:<span class="number">-1</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [<span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"钱七"</span>] &#125;</span><br></pre></td></tr></table></figure><h3 id="pull-数组指定删除元素-会删除数组中所有的匹配值"><a href="#pull-数组指定删除元素-会删除数组中所有的匹配值" class="headerlink" title="$pull 数组指定删除元素 [会删除数组中所有的匹配值]"></a>$pull 数组指定删除元素 [会删除数组中所有的匹配值]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne()；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [<span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"钱七"</span>] &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>)&#125;,&#123;<span class="string">"$pull"</span>:&#123;<span class="string">"list"</span>:<span class="string">"钱七"</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [<span class="string">"李四"</span>, <span class="string">"王五"</span>] &#125;</span><br></pre></td></tr></table></figure><h3 id="定位符修改数据"><a href="#定位符修改数据" class="headerlink" title="$ 定位符修改数据"></a>$ 定位符修改数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.table.findOne()；</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"cheng"</span>, <span class="string">"age"</span> : <span class="number">12</span> &#125;, &#123; <span class="string">"name"</span> : <span class="string">"li"</span>, <span class="string">"age"</span> : <span class="number">24</span> &#125;] &#125;</span><br><span class="line">db.table.update(&#123;<span class="string">"list.name"</span>:<span class="string">"cheng"</span>&#125;,&#123;<span class="string">"$set"</span>:&#123;<span class="string">"list.$.name"</span>:<span class="string">"钱七"</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd56a7ae299a187e4ed72a0"</span>), <span class="string">"list"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"钱七"</span>, <span class="string">"age"</span> : <span class="number">12</span> &#125;, &#123; <span class="string">"name"</span> : <span class="string">"li"</span>, <span class="string">"age"</span> : <span class="number">24</span> &#125;] &#125;</span><br></pre></td></tr></table></figure><h3 id="setOnInsert-创建同时进行赋值，并后期不会通过-setOnInsert-更新"><a href="#setOnInsert-创建同时进行赋值，并后期不会通过-setOnInsert-更新" class="headerlink" title="\ $setOnInsert 创建同时进行赋值，并后期不会通过 $setOnInsert 更新"></a>\ $setOnInsert 创建同时进行赋值，并后期不会通过 $setOnInsert 更新</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.one.update(&#123;&#125;,&#123;<span class="string">"$setOneInsert"</span>:&#123;<span class="string">"createdAt"</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;&#125;,<span class="literal">true</span>)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>), <span class="string">"createAt"</span> : ISODate(<span class="string">"2018-10-29T14:20:02.287Z"</span>) &#125;</span><br><span class="line">db.one.update(&#123;&#125;,&#123;<span class="string">"$setOneInsert"</span>:&#123;<span class="string">"createdAt"</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;&#125;,<span class="literal">true</span>)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>), <span class="string">"createAt"</span> : ISODate(<span class="string">"2018-10-29T14:20:02.287Z"</span>) &#125;</span><br></pre></td></tr></table></figure><h2 id="save-shell-帮助函数-实现快速的修改"><a href="#save-shell-帮助函数-实现快速的修改" class="headerlink" title="save() shell 帮助函数 实现快速的修改"></a>save() shell 帮助函数 实现快速的修改</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x =db.one.findOne();</span><br><span class="line">x.num =<span class="number">24</span>;</span><br><span class="line">db.one.save(x);</span><br></pre></td></tr></table></figure><h2 id="db-runCommand-getLastError-n-返回最后-n-次的相关信息"><a href="#db-runCommand-getLastError-n-返回最后-n-次的相关信息" class="headerlink" title="db.runCommand({getLastError: n }) 返回最后 n 次的相关信息"></a>db.runCommand({getLastError: n }) 返回最后 n 次的相关信息</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"connectionId"</span> : <span class="number">5</span>,</span><br><span class="line">       <span class="string">"updatedExisting"</span> : <span class="literal">true</span>,</span><br><span class="line">       <span class="string">"n"</span> : <span class="number">1</span>,</span><br><span class="line">       <span class="string">"syncMillis"</span> : <span class="number">0</span>,</span><br><span class="line">       <span class="string">"writtenTo"</span> : <span class="literal">null</span>,</span><br><span class="line">       <span class="string">"err"</span> : <span class="literal">null</span>,</span><br><span class="line">       <span class="string">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回参数描述</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>connectionId</td><td>匹配并修改</td></tr><tr><td>updatedExisting</td><td>是否更新成功</td></tr><tr><td>n</td><td>更新的文档个数</td></tr><tr><td>syncMillis</td><td>修改并插入</td></tr><tr><td>writtenTo</td><td>修改并插入</td></tr><tr><td>err</td><td>修改并插入</td></tr><tr><td>ok</td><td>成功的个数</td></tr><tr><td>codeName</td><td>代码名称</td></tr><tr><td>errmsg</td><td>错误描述</td></tr></tbody></table><h2 id="db-runCommand-“findAndModify”-”process”-返回被更新的文档"><a href="#db-runCommand-“findAndModify”-”process”-返回被更新的文档" class="headerlink" title="db.runCommand({“findAndModify”:”process”})返回被更新的文档"></a>db.runCommand({“findAndModify”:”process”})返回被更新的文档</h2><h1 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h1><h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><h3 id="find-key1-val1-key2-val2-多条件精准查询"><a href="#find-key1-val1-key2-val2-多条件精准查询" class="headerlink" title="find({key1:val1,key2:val2}) 多条件精准查询"></a>find({key1:val1,key2:val2}) 多条件精准查询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有 name 是 lisi 并且 age 是 24 的数据</span></span><br><span class="line">db.one.find(&#123;<span class="string">"name"</span>:<span class="string">"lisi"</span>,<span class="string">"age"</span>:<span class="number">24</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="find-option-返回-指定-键值对"><a href="#find-option-返回-指定-键值对" class="headerlink" title="find({},option) 返回 指定 键值对"></a>find({},option) 返回 指定 键值对</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回所有数据，并显示指定的 键/值  1 是显示 ， 0 是剔除</span></span><br><span class="line">find(&#123;&#125;,&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;)</span><br><span class="line">&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>),<span class="string">"name"</span> : <span class="string">"cheng"</span> &#125;</span><br><span class="line">find(&#123;&#125;,&#123;<span class="string">"name"</span>:<span class="number">1</span>,<span class="string">"_id"</span>:<span class="number">0</span>&#125;)</span><br><span class="line">&#123;<span class="string">"name"</span> : <span class="string">"cheng"</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="find-使用查询条件"><a href="#find-使用查询条件" class="headerlink" title="find 使用查询条件"></a>find 使用查询条件</h2><h3 id="lt-lte-gt-gte-ne-对应-lt-lt-gt-gt"><a href="#lt-lte-gt-gte-ne-对应-lt-lt-gt-gt" class="headerlink" title="\$lt  \$lte  \$gt  \$gte  \$ne 对应 &lt;=  &lt;  &gt;  &gt;=  !="></a>\$lt  \$lte  \$gt  \$gte  \$ne 对应 &lt;=  &lt;  &gt;  &gt;=  !=</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询 age 小于 24 的</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$lt"</span>:<span class="number">24</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>), <span class="string">"age"</span> : <span class="number">12</span>, <span class="string">"name"</span> : <span class="string">"cheng"</span>&#125;</span><br><span class="line"><span class="comment">//查询 age 大于等于 10 的</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$gte"</span>:<span class="number">10</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>), <span class="string">"age"</span> : <span class="number">12</span>, <span class="string">"name"</span> : <span class="string">"cheng"</span>&#125;</span><br><span class="line"><span class="comment">//查询 age 不等于 10 的</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$ne"</span>:<span class="number">10</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bd716bbbae1b855f37013b2"</span>), <span class="string">"age"</span> : <span class="number">12</span>, <span class="string">"name"</span> : <span class="string">"cheng"</span>&#125;</span><br><span class="line"><span class="comment">//查询 age 大于 12 并小于 24 的数据</span></span><br><span class="line">db.one.fond(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$gt"</span>:<span class="number">12</span>,<span class="string">"$lt"</span>:<span class="number">24</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="OR-查询-in-or-not"><a href="#OR-查询-in-or-not" class="headerlink" title="OR 查询 $in $or $not"></a>OR 查询 $in $or $not</h3><blockquote><p>$in 一个键匹配多个值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询 所有 age 等于 24 或 30 或 190 的数据</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$in"</span>:[<span class="number">24</span>,<span class="number">30</span>,<span class="number">190</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>$nin 一个键匹配多个值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询 所有 age 不等于 24 或 30 或 190 的数据</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$nin"</span>:[<span class="number">24</span>,<span class="number">30</span>,<span class="number">190</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>$or 多 键值对 查询<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询 name 等于 李四 或者 age 等于 12 的数据</span></span><br><span class="line">db.one.find(&#123;<span class="string">"$or"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"李四"</span>&#125;,&#123;<span class="string">"age"</span>:<span class="number">12</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>$not 取反<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询 age 不等于 5 或者 "190.0 的所有数据</span></span><br><span class="line">db.one.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$not"</span>:&#123;<span class="string">"$in"</span>:[<span class="number">5</span>,<span class="string">"190.0"</span>]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="查询-null"><a href="#查询-null" class="headerlink" title="查询 null"></a>查询 null</h3><blockquote><p>$exists -&gt; 检查 此值是否为 null<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.one.find(&#123;<span class="string">"z"</span>:&#123;<span class="string">"$in"</span>:[<span class="literal">null</span>],<span class="string">"$exists"</span>:<span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="数组查询"><a href="#数组查询" class="headerlink" title="数组查询"></a>数组查询</h2><h3 id="all"><a href="#all" class="headerlink" title="$all"></a>$all</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.two.insert(&#123;<span class="string">"list"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]&#125;)</span><br><span class="line">db.two.insert(&#123;<span class="string">"list"</span>:[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]&#125;)</span><br><span class="line">db.two.insert(&#123;<span class="string">"list"</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]&#125;)</span><br><span class="line"><span class="comment">// 查询 list 数包含 2 3 4 </span></span><br><span class="line">db.two.find(&#123;<span class="string">"list"</span>:&#123;<span class="string">"$all"</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>), <span class="string">"list"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a880cd06e4da48a928a"</span>), <span class="string">"list"</span> : [ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="size-查询特定长度的-数组"><a href="#size-查询特定长度的-数组" class="headerlink" title="$size 查询特定长度的 数组"></a>$size 查询特定长度的 数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将 "_id" : ObjectId("5bde9a7e0cd06e4da48a9289") 的 list 添加一条</span></span><br><span class="line">db.two.update(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>)&#125;,&#123;<span class="string">"$push"</span>:&#123;<span class="string">"list"</span>:<span class="string">"100"</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>), <span class="string">"list"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"100"</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a880cd06e4da48a928a"</span>), <span class="string">"list"</span> : [ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a8f0cd06e4da48a928b"</span>), <span class="string">"list"</span> : [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ] &#125;</span><br><span class="line">db.two.find(&#123;<span class="string">"list"</span>:&#123;<span class="string">"$size"</span>:<span class="number">5</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>), <span class="string">"list"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"100"</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="slice-指定截取-数据"><a href="#slice-指定截取-数据" class="headerlink" title="$slice 指定截取 数据"></a>$slice 指定截取 数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回 数组前 10 条数据</span></span><br><span class="line">db.two.find(&#123;&#125;,&#123;<span class="string">"list"</span>:&#123;<span class="string">"$slice"</span>:<span class="number">10</span>&#125;&#125;)</span><br><span class="line"><span class="comment">//返回 数组后 10 条数据</span></span><br><span class="line">db.two.find(&#123;&#125;,&#123;<span class="string">"list"</span>:&#123;<span class="string">"$slice"</span>:<span class="number">-10</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// 返回 文档下所有符合匹配条件的数据 的指定条数</span></span><br><span class="line"><span class="comment">// 返回 </span></span><br><span class="line">db.two.find(&#123;<span class="string">"list.age"</span>:&#123;<span class="string">"$lt"</span>:<span class="number">12</span>&#125;&#125;,&#123;<span class="string">"$slice.$"</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><h3 id="limit-限制上限"><a href="#limit-限制上限" class="headerlink" title="limit() 限制上限"></a>limit() 限制上限</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.two.find(&#123;&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>), <span class="string">"list"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"100"</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a880cd06e4da48a928a"</span>), <span class="string">"list"</span> : [ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a8f0cd06e4da48a928b"</span>), <span class="string">"list"</span> : [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ] &#125;</span><br><span class="line">db.two.find(&#123;&#125;).limit(<span class="number">2</span>)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a7e0cd06e4da48a9289"</span>), <span class="string">"list"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"100"</span> ] &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a880cd06e4da48a928a"</span>), <span class="string">"list"</span> : [ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="skip-n-跳过-n-个"><a href="#skip-n-跳过-n-个" class="headerlink" title="skip(n) 跳过 n 个"></a>skip(n) 跳过 n 个</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.two.find(&#123;&#125;).skip(<span class="number">2</span>)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5bde9a8f0cd06e4da48a928b"</span>), <span class="string">"list"</span> : [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ] &#125;</span><br></pre></td></tr></table></figure><h3 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort() 排序"></a>sort() 排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 name 升序 age 降序</span></span><br><span class="line">db.two.find().sort(&#123;<span class="string">"name"</span>:<span class="number">1</span>,<span class="string">"age"</span>:<span class="number">-1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据库命令"><a href="#数据库命令" class="headerlink" title="数据库命令"></a>数据库命令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出所有的 数据库命令</span></span><br><span class="line">db.listCommannds()</span><br></pre></td></tr></table></figure><h2 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据 name 作为 索引值</span></span><br><span class="line">db.two.ensureIndex(&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><blockquote><p>唯一索引</p></blockquote><h3 id="建立唯一索引"><a href="#建立唯一索引" class="headerlink" title="建立唯一索引"></a>建立唯一索引</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保障 同文档内所有的 id 不能重复</span></span><br><span class="line">db.two.ensureIndex(&#123;<span class="string">"id"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"unique"</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="建立-复合唯一索引"><a href="#建立-复合唯一索引" class="headerlink" title="建立 复合唯一索引"></a>建立 复合唯一索引</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 id username 建立复合索引</span></span><br><span class="line">db.two.ensureIndex(&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="attr">username</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"unique"</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">// 仅能包含三种类型</span></span><br><span class="line">db.two.insert(&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"username"</span>:<span class="string">"li"</span>&#125;);</span><br><span class="line">db.two.insert(&#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"username"</span>:<span class="string">"li"</span>&#125;);</span><br><span class="line">db.two.insert(&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"username"</span>:<span class="string">"zhang"</span>&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>稀疏索引</p></blockquote><h3 id="建立稀疏索引"><a href="#建立稀疏索引" class="headerlink" title="建立稀疏索引"></a>建立稀疏索引</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文档索引嵌套"><a href="#文档索引嵌套" class="headerlink" title="文档索引嵌套"></a>文档索引嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'李四'</span>,</span><br><span class="line"><span class="string">"loc"</span>:&#123;</span><br><span class="line"><span class="string">"ip"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"state"</span>:<span class="string">"NY"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据文档的 state 建立 索引</span></span><br><span class="line">db.two.ensureIndex(&#123;<span class="string">"loc.state"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="数组文档嵌套索引"><a href="#数组文档嵌套索引" class="headerlink" title="数组文档嵌套索引"></a>数组文档嵌套索引</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'李四'</span>,</span><br><span class="line"><span class="string">"loc"</span>:&#123;</span><br><span class="line"><span class="string">"ip"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"state"</span>:<span class="string">"NY"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">'李四'</span>,</span><br><span class="line"><span class="string">"loc"</span>:&#123;</span><br><span class="line"><span class="string">"ip"</span>:<span class="string">"127.0.0.2"</span>,</span><br><span class="line"><span class="string">"state"</span>:<span class="string">"NY"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line"><span class="comment">// 根据数组中的文档建立索引</span></span><br><span class="line">db.two.ensureIndex(&#123;<span class="string">"loc.state"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="getIndexes-查询已建立的索引"><a href="#getIndexes-查询已建立的索引" class="headerlink" title="getIndexes() 查询已建立的索引"></a>getIndexes() 查询已建立的索引</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">db.two.getIndexes()</span><br><span class="line">[&#123;</span><br><span class="line">               <span class="string">"v"</span> : <span class="number">2</span>,</span><br><span class="line">               <span class="string">"key"</span> : &#123;</span><br><span class="line">                       <span class="string">"_id"</span> : <span class="number">1</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="string">"name"</span> : <span class="string">"_id_"</span>,</span><br><span class="line">               <span class="string">"ns"</span> : <span class="string">"test.two"</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">               <span class="string">"v"</span> : <span class="number">2</span>,</span><br><span class="line">               <span class="string">"key"</span> : &#123;</span><br><span class="line">                       <span class="string">"name"</span> : <span class="number">1</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="string">"name"</span> : <span class="string">"name_1"</span>,</span><br><span class="line">               <span class="string">"ns"</span> : <span class="string">"test.two"</span></span><br><span class="line">       &#125;]</span><br></pre></td></tr></table></figure><h2 id="dropIndex-删除索引"><a href="#dropIndex-删除索引" class="headerlink" title="dropIndex() 删除索引"></a>dropIndex() 删除索引</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.two.dropIndex(&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>v</td><td>内部使用，表示索引版本</td></tr><tr><td>key</td><td>建立的索引</td></tr></tbody></table><h1 id="explain-查询结果文件描述-必须放在-最后面"><a href="#explain-查询结果文件描述-必须放在-最后面" class="headerlink" title="explain() 查询结果文件描述[必须放在 最后面]"></a>explain() 查询结果文件描述[必须放在 最后面]</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.two.find().explain()</span><br></pre></td></tr></table></figure><h1 id="hint-“-natural”-1-强制全表查询"><a href="#hint-“-natural”-1-强制全表查询" class="headerlink" title=".hint({“$natural”:1}) 强制全表查询"></a>.hint({“$natural”:1}) 强制全表查询</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.two.find().hint(&#123;<span class="string">"$natural"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>nMatched</td><td>匹配并修改</td></tr><tr><td>nUpserted</td><td>更新并插入</td></tr><tr><td>nModified</td><td>修改并插入</td></tr></tbody></table><h1 id="shell-参数说明"><a href="#shell-参数说明" class="headerlink" title="shell 参数说明"></a>shell 参数说明</h1><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>nMatched</td><td>匹配并修改</td></tr><tr><td>nUpserted</td><td>更新并插入</td></tr><tr><td>nModified</td><td>修改并插入</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MongoDB的启动方式&quot;&gt;&lt;a href=&quot;#MongoDB的启动方式&quot; class=&quot;headerlink&quot; title=&quot;MongoDB的启动方式&quot;&gt;&lt;/a&gt;MongoDB的启动方式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1.通过命令启动mongo服务&lt;b
      
    
    </summary>
    
      <category term="后端" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/hello/"/>
    
    
      <category term="mongoDB" scheme="18600917746.github.io/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>super-git</title>
    <link href="18600917746.github.io/2019/01/28/super-git/"/>
    <id>18600917746.github.io/2019/01/28/super-git/</id>
    <published>2019-01-28T03:51:43.000Z</published>
    <updated>2019-01-28T03:59:06.628Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本地关联到远程</p></blockquote><ol><li><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>添加到暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li><p>提交的缓存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos; &apos;</span><br></pre></td></tr></table></figure></li><li><p>连接到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [gitAddress]</span><br></pre></td></tr></table></figure></li><li><p>推送代码到远程端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol><ul><li>如果出现下列情况, 是因为远程含有文件未进行合并，例如 README.md</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">To https://gitee.com/maYun18600917746/MuiH5Plus.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to &apos;https://gitee.com/maYun18600917746/MuiH5Plus.git&apos;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &apos;git pull ...&apos;) before pushing again.</span><br><span class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure><ul><li>执行下列操作合并代码，然后执行第 5 步</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><blockquote><p>创建 git 忽略文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore</span><br></pre></td></tr></table></figure><h3 id="添加忽略文件"><a href="#添加忽略文件" class="headerlink" title="添加忽略文件"></a>添加忽略文件</h3><ul><li>忽略文件夹</li></ul><p><code>node_modules/</code></p><ul><li>忽略文件</li></ul><p><code>makefile</code></p><ul><li>忽略 后缀名相文件</li></ul><p><code>*.js</code></p><blockquote><p>向 github 开源项目贡献代码</p></blockquote><ul><li>首先你具有 <code>github</code> 账号</li><li>登录自己的 <code>github</code> 或者 其他第三方 git</li></ul><ul><li><a href="https://github.com" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://gitee.com/login" target="_blank" rel="noopener">码云</a></li></ul><ul><li>拉取项目到自己的 仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 在 `github` 上搜索你要 贡献项目的地址</span><br><span class="line">2. 在项目分支上点击 fork 按钮</span><br><span class="line">3. 代码就会存在你的仓库中</span><br></pre></td></tr></table></figure><ul><li>拉取仓库中的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;url&gt;</span><br></pre></td></tr></table></figure><ul><li>修改代码，完善功能。</li><li>提交代码到 <code>github</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li>进入自己的 github 点击项目</li><li>然后点击 <code>new pull request</code> 按钮，进入 <code>pull request</code> 界面</li><li>点击 <code>create pull request</code> 创建一个新的 <code>markDown</code> 修改说明</li><li>后续等待 作者是否 <code>merge</code> 你的提交-</li></ul><blockquote><p>本地合并 两个 git 远程源地址文件</p></blockquote><ul><li>先将两个 源地址文件 拉取到本地</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;a&gt;</span><br><span class="line">git clone &lt;b&gt;</span><br></pre></td></tr></table></figure><ul><li>将 <code>a</code> 作为要保留 代码库</li></ul><ol><li>进入 <code>a</code> 代码库</li><li><p>添加本地 <code>b</code> 作为 <code>a</code> 的远程仓库，并设置别名 <code>remoteB</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote add remoteB ../b/</span><br><span class="line">``` </span><br><span class="line">3. 合并连个仓库的代码</span><br><span class="line">```git</span><br><span class="line">git fetch remoteB</span><br></pre></td></tr></table></figure></li><li><p>将 <code>remoteB</code> 下的 想要的分支 合并到 <code>a</code>  的新分支上 <code>branchB</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branchB remoteB/&lt;branchName&gt;</span><br></pre></td></tr></table></figure></li><li><p>切换到要合并到的分支上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branchName&gt;</span><br></pre></td></tr></table></figure></li><li><p>合并代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase  branchB</span><br></pre></td></tr></table></figure></li><li><p>解决冲突，添加 <code>commitID</code> 提交可以了</p></li><li>提交的 远程仓库就可以了</li></ol><blockquote><p>强行提交文件</p></blockquote><h2 id="不建议此操作-除非你很明白你的代码就是最全，最新的"><a href="#不建议此操作-除非你很明白你的代码就是最全，最新的" class="headerlink" title="不建议此操作 除非你很明白你的代码就是最全，最新的"></a>不建议此操作 除非你很明白你的代码就是最全，最新的</h2><ul><li>有如下几种解决方法：</li></ul><p>1.使用强制 <code>push</code> 的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure></p><p>2.push前先将远程 <code>repository</code> 修改 <code>pull</code> 下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><p>3.若不想 <code>merge</code> 远程和本地修改，可以先创建新的分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch [name]</span><br><span class="line">git push -u origin [name]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本地关联到远程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化项目&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="super" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/super/"/>
    
    
      <category term="git" scheme="18600917746.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hello-git</title>
    <link href="18600917746.github.io/2019/01/28/hello-git/"/>
    <id>18600917746.github.io/2019/01/28/hello-git/</id>
    <published>2019-01-28T03:48:41.000Z</published>
    <updated>2019-01-28T03:53:41.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git"><a href="#git" class="headerlink" title="git"></a><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">git</a></h2><h3 id="git-config-配置信息"><a href="#git-config-配置信息" class="headerlink" title="git config - 配置信息"></a>git config - 配置信息</h3><ul><li><p>配置用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;John Doe&quot;</span><br><span class="line">git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure></li><li><p>配置文本编辑器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor emacs</span><br></pre></td></tr></table></figure></li><li><p>检查配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li><li><p>检查单个配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config &lt;key&gt;</span><br><span class="line"></span><br><span class="line">git config user.name</span><br></pre></td></tr></table></figure></li><li><p>设置别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line">// 查看最近一次提交</span><br><span class="line">git config --global alias.last &apos;log -1 HEAD&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-help-获取帮助"><a href="#git-help-获取帮助" class="headerlink" title="git help - 获取帮助"></a>git help - 获取帮助</h3><ul><li>获取帮助<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;verb&gt;</span><br><span class="line">git &lt;verb&gt; --help</span><br><span class="line">man git-&lt;verb&gt;</span><br><span class="line"></span><br><span class="line">git help config</span><br></pre></td></tr></table></figure></li></ul><h2 id="本地仓库管理"><a href="#本地仓库管理" class="headerlink" title="本地仓库管理"></a>本地仓库管理</h2><h3 id="git-init-本地初始化"><a href="#git-init-本地初始化" class="headerlink" title="git init - 本地初始化"></a>git init - 本地初始化</h3><ul><li>在现有目录中初始化仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-status-查看状态"><a href="#git-status-查看状态" class="headerlink" title="git status - 查看状态"></a>git status - 查看状态</h3><ul><li><p>检查当前文件状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>检查当前文件状态，简要格式输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status -s</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-add-添加文件"><a href="#git-add-添加文件" class="headerlink" title="git add - 添加文件"></a>git add - 添加文件</h3><ul><li>跟踪新文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [fileName/dirName]</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-diff-对比更改"><a href="#git-diff-对比更改" class="headerlink" title="git diff - 对比更改"></a>git diff - 对比更改</h3><ul><li><p>对比尚未暂存的文件更新了哪些部分</p><ul><li>此命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对比已暂存的将要添加到下次提交里的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br><span class="line">git diff --staged</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-commit-提交文件"><a href="#git-commit-提交文件" class="headerlink" title="git commit - 提交文件"></a>git commit - 提交文件</h3><ul><li><p>提交更新，并打开 git 编辑器输入本次提交备注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure></li><li><p>单行输入本次提交备注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;add files&apos;</span><br></pre></td></tr></table></figure></li><li><p>跳过使用暂存区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &apos;added new benchmarks&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-reset-版本切换"><a href="#git-reset-版本切换" class="headerlink" title="git reset 版本切换"></a>git reset 版本切换</h3><ul><li><p>commitID 命令历史查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure></li><li><p>commitID 提交历史查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></li><li><p>回退上一个版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --head HEAD^</span><br></pre></td></tr></table></figure></li><li><p>回退两个版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --head HEAD^^</span><br></pre></td></tr></table></figure></li><li><p>回退指定 n 次数的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --head HEAD~n</span><br></pre></td></tr></table></figure></li><li><p>git reset –head 根据 commitID 切换版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --head &lt;commitID&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-rm-移除文件"><a href="#git-rm-移除文件" class="headerlink" title="git rm - 移除文件"></a>git rm - 移除文件</h3><ul><li><p>工作区域移除，取消 git 关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm [fileName/dirName]</span><br></pre></td></tr></table></figure></li><li><p>暂存区移除，取消 git 关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -f [fileName/dirName]</span><br></pre></td></tr></table></figure></li><li><p>取消 git 关联但不移除文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached [fileName/dirName]</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-mv-重命名或移动文件"><a href="#git-mv-重命名或移动文件" class="headerlink" title="git mv - 重命名或移动文件"></a>git mv - 重命名或移动文件</h3><ul><li>移动文件或重命名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv [oldFlieName] [newFlieName]</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-log-查看历史记录"><a href="#git-log-查看历史记录" class="headerlink" title="git log - 查看历史记录"></a>git log - 查看历史记录</h3><ul><li>查看提交历史<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></li></ul><h4 id="git-log-的常用选项"><a href="#git-log-的常用选项" class="headerlink" title="git log 的常用选项"></a>git log 的常用选项</h4><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>按补丁格式显示每个更新之间的差异</td></tr><tr><td>–stat</td><td>显示每次更新的文件修改统计信息</td></tr><tr><td>–shortstat</td><td>只显示 –stat 中最后的行数修改添加移除统计</td></tr><tr><td>–name-only</td><td>仅在提交信息后显示已修改的文件清单</td></tr><tr><td>–name-status</td><td>显示新增、修改、删除的文件清单</td></tr><tr><td>–abbrev-commit</td><td>仅显示 SHA-1 的前几个字符，而非所有的 40 个字符</td></tr><tr><td>–relative-date</td><td>使用较短的相对时间显示（比如，“2 weeks ago”）</td></tr><tr><td>–graph</td><td>显示 ASCII 图形表示的分支合并历史</td></tr><tr><td>–pretty</td><td>使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）</td></tr></tbody></table><ul><li><p>按补丁格式显示每个更新之间的差异</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -p</span><br></pre></td></tr></table></figure></li><li><p>显示最近 n 次提交的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -[n]</span><br></pre></td></tr></table></figure></li><li><p>显示每次更新的文件修改统计信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --stat</span><br></pre></td></tr></table></figure></li><li><p>时间限制输出提交信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git log --since</span><br><span class="line"></span><br><span class="line">// 最近两周的提交信息</span><br><span class="line">git log --since=2.weeks</span><br></pre></td></tr></table></figure></li><li><p>仅输出 commitID 与 提交备注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure></li><li><p>显示 ASCII 图形表示的分支合并历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph</span><br></pre></td></tr></table></figure></li><li><p>查看指定作者提交的历史信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --author=[gitUserName]</span><br></pre></td></tr></table></figure></li><li><p>按提交的信息中的关键词 输出信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --grep=[Key word]</span><br></pre></td></tr></table></figure></li></ul><h4 id="限制-git-log-输出的选项"><a href="#限制-git-log-输出的选项" class="headerlink" title="限制 git log 输出的选项"></a>限制 git log 输出的选项</h4><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-(n)</td><td>仅显示最近的 n 条提交</td></tr><tr><td>–since, –after</td><td>仅显示指定时间之后的提交</td></tr><tr><td>–until, –before</td><td>仅显示指定时间之前的提交</td></tr><tr><td>–author</td><td>仅显示指定作者相关的提交</td></tr><tr><td>–committer</td><td>仅显示指定提交者相关的提交</td></tr><tr><td>–grep</td><td>仅显示含指定关键字的提交</td></tr><tr><td>-S</td><td>仅显示添加或移除了某个关键字的提交</td></tr></tbody></table><h4 id="格式化输出-提交历史"><a href="#格式化输出-提交历史" class="headerlink" title="格式化输出 提交历史"></a>格式化输出 提交历史</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=format:&quot;%h - %an, %ar : %s&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>%H</td><td>提交对象（commit）的完整哈希字串</td></tr><tr><td>%h</td><td>提交对象的简短哈希字串</td></tr><tr><td>%T</td><td>树对象（tree）的完整哈希字串</td></tr><tr><td>%t</td><td>树对象的简短哈希字串</td></tr><tr><td>%P</td><td>父对象（parent）的完整哈希字串</td></tr><tr><td>%p</td><td>父对象的简短哈希字串</td></tr><tr><td>%an</td><td>作者（author）的名字</td></tr><tr><td>%ae</td><td>作者的电子邮件地址</td></tr><tr><td>%ad</td><td>作者修订日期（可以用 –date= 选项定制格式）</td></tr><tr><td>%ar</td><td>作者修订日期，按多久以前的方式显示</td></tr><tr><td>%cn</td><td>提交者（committer）的名字</td></tr><tr><td>%ce</td><td>提交者的电子邮件地址</td></tr><tr><td>%cd</td><td>提交日期</td></tr><tr><td>%cr</td><td>提交日期，按多久以前的方式显示</td></tr><tr><td>%s</td><td>提交说明</td></tr></tbody></table><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><h3 id="git-commit-–amend-撤回本次备注"><a href="#git-commit-–amend-撤回本次备注" class="headerlink" title="git commit –amend - 撤回本次备注"></a>git commit –amend - 撤回本次备注</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h3 id="撤回本次-commit-提交"><a href="#撤回本次-commit-提交" class="headerlink" title="撤回本次 commit  提交"></a>撤回本次 commit  提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure><h3 id="git-reset-HEAD-取消暂存的文件"><a href="#git-reset-HEAD-取消暂存的文件" class="headerlink" title="git reset HEAD - 取消暂存的文件"></a>git reset HEAD - 取消暂存的文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD [fileName]</span><br></pre></td></tr></table></figure><h3 id="git-checkout-放弃对文件的更改"><a href="#git-checkout-放弃对文件的更改" class="headerlink" title="git checkout  - 放弃对文件的更改"></a>git checkout  - 放弃对文件的更改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;fileName/dirName&gt;</span><br></pre></td></tr></table></figure><h2 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h2><h3 id="git-clone-克隆远程"><a href="#git-clone-克隆远程" class="headerlink" title="git clone - 克隆远程"></a>git clone - 克隆远程</h3><ul><li><p>克隆现有的仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure></li><li><p>克隆现有的仓库并设置别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url] [name]</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-remote-远程仓库源"><a href="#git-remote-远程仓库源" class="headerlink" title="git remote  - 远程仓库源"></a>git remote  - 远程仓库源</h3><ul><li><p>查看远程仓库源地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li><p>添加远程仓库源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看远程仓库源信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure></li><li><p>远程仓库源重命名或移动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rename [oldFileName] [newFileName]</span><br></pre></td></tr></table></figure></li><li><p>远程仓库源移除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm [fileName]</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-fetch-从远程仓库中抓取与拉取"><a href="#git-fetch-从远程仓库中抓取与拉取" class="headerlink" title="git fetch - 从远程仓库中抓取与拉取"></a>git fetch - 从远程仓库中抓取与拉取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [remote-name]</span><br></pre></td></tr></table></figure><h3 id="git-push-推送代码到远程"><a href="#git-push-推送代码到远程" class="headerlink" title="git push - 推送代码到远程"></a>git push - 推送代码到远程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><h3 id="git-tag-列出本地已有标签"><a href="#git-tag-列出本地已有标签" class="headerlink" title="git tag - 列出本地已有标签"></a>git tag - 列出本地已有标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><ul><li>特定的模式查找标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 列出所有 1.8.5 开头的标签</span><br><span class="line">git tag -l &apos;v1.8.5*&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="带注释的标签"><a href="#带注释的标签" class="headerlink" title="带注释的标签"></a>带注释的标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a [tagname] -m &apos;my version 1.4&apos;</span><br></pre></td></tr></table></figure><h3 id="轻量标签"><a href="#轻量标签" class="headerlink" title="轻量标签"></a>轻量标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.4</span><br></pre></td></tr></table></figure><h3 id="追加标签"><a href="#追加标签" class="headerlink" title="追加标签"></a>追加标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.2 [commitID]</span><br></pre></td></tr></table></figure><h3 id="共享标签"><a href="#共享标签" class="headerlink" title="共享标签"></a>共享标签</h3><ul><li><p>单次推送标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.5</span><br></pre></td></tr></table></figure></li><li><p>推送所所有的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure></li><li><p>检索标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branchname] [tagname]</span><br></pre></td></tr></table></figure></li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="git-branch-分支管理"><a href="#git-branch-分支管理" class="headerlink" title="git branch -分支管理"></a>git branch -分支管理</h3><ul><li><p>分支创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [branchname]</span><br></pre></td></tr></table></figure></li><li><p>添加到远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin [branchName]:[branchName]</span><br></pre></td></tr></table></figure></li><li><p>分支切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branchname]</span><br></pre></td></tr></table></figure></li><li><p>展示所以的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li><p>查看所有分支的最后一次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure></li><li><p>查看已经合并到当前的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged</span><br></pre></td></tr></table></figure></li><li><p>查看所有未合并工作的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --no-merged</span><br></pre></td></tr></table></figure></li><li><p>删除分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [branchname]</span><br></pre></td></tr></table></figure></li><li><p>删除远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete [branchname]</span><br></pre></td></tr></table></figure></li><li><p>创建分支并切换到分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branchName]</span><br></pre></td></tr></table></figure></li><li><p>创建本地分支并关联到远程指定分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b serverfix origin/serverfix</span><br></pre></td></tr></table></figure></li><li><p>设置当前分支的上游分支（将本地分支关联到远程分支）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. git push --set-upstream origin [branchName]</span><br><span class="line">2. git branch -u origin [branchName]</span><br></pre></td></tr></table></figure></li><li><p>撤销本地分支与远程分支的映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --unset-upstream</span><br></pre></td></tr></table></figure></li><li><p>查看设置的所有跟踪分支的映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure></li><li><p>分支拉取 [自动拉取并合并]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull </span><br><span class="line"></span><br><span class="line">git fetch </span><br><span class="line">git merge</span><br></pre></td></tr></table></figure></li><li><p>分支拉取 [自动拉取 + 变基]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch </span><br><span class="line">git rebase</span><br></pre></td></tr></table></figure></li><li><p>修改 pull 的默认流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global pull.rebase true</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-merge-本地分支合并"><a href="#git-merge-本地分支合并" class="headerlink" title="git merge - 本地分支合并"></a>git merge - 本地分支合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [branch]</span><br></pre></td></tr></table></figure><h3 id="git-mergetool-图形化解决分支冲突"><a href="#git-mergetool-图形化解决分支冲突" class="headerlink" title="git mergetool 图形化解决分支冲突"></a>git mergetool 图形化解决分支冲突</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; class=&quot;headerlink&quot; title=&quot;git&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="git" scheme="18600917746.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hello-vue</title>
    <link href="18600917746.github.io/2019/01/24/hello-vue/"/>
    <id>18600917746.github.io/2019/01/24/hello-vue/</id>
    <published>2019-01-24T01:57:27.000Z</published>
    <updated>2019-01-28T04:01:00.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-架构预览"><a href="#vue-架构预览" class="headerlink" title="vue 架构预览"></a>vue 架构预览</h3><h3 id="双向绑定与-setState-原理"><a href="#双向绑定与-setState-原理" class="headerlink" title="双向绑定与 setState 原理"></a>双向绑定与 setState 原理</h3><ul><li>Object.defineProperty es5对象属性拦截器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'a'</span>, &#123;</span><br><span class="line">  get() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get val'</span>);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;,</span><br><span class="line">  set(newVal) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set val'</span>);</span><br><span class="line"></span><br><span class="line">    a = newVal;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">obj.a;</span><br><span class="line">obj.a = <span class="string">'set val'</span>;</span><br></pre></td></tr></table></figure><ul><li>Observer</li><li>Watcher</li><li>Dep</li><li>Directive 指令</li></ul><h3 id="vue2-Virtual-dom"><a href="#vue2-Virtual-dom" class="headerlink" title="vue2 Virtual-dom"></a>vue2 Virtual-dom</h3><h3 id="vue2-DOM-DIff-算法解析"><a href="#vue2-DOM-DIff-算法解析" class="headerlink" title="vue2 DOM DIff 算法解析"></a>vue2 DOM DIff 算法解析</h3><h3 id="vue2-整体解析流程"><a href="#vue2-整体解析流程" class="headerlink" title="vue2 整体解析流程"></a>vue2 整体解析流程</h3><h3 id="vue-运行时优化"><a href="#vue-运行时优化" class="headerlink" title="vue 运行时优化"></a>vue 运行时优化</h3><h3 id="再见-vue-前端技术框架选型"><a href="#再见-vue-前端技术框架选型" class="headerlink" title="再见 vue 前端技术框架选型"></a>再见 vue 前端技术框架选型</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue-架构预览&quot;&gt;&lt;a href=&quot;#vue-架构预览&quot; class=&quot;headerlink&quot; title=&quot;vue 架构预览&quot;&gt;&lt;/a&gt;vue 架构预览&lt;/h3&gt;&lt;h3 id=&quot;双向绑定与-setState-原理&quot;&gt;&lt;a href=&quot;#双向绑定与-setSta
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="vue" scheme="18600917746.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>super-css</title>
    <link href="18600917746.github.io/2019/01/23/super-css/"/>
    <id>18600917746.github.io/2019/01/23/super-css/</id>
    <published>2019-01-23T09:30:05.000Z</published>
    <updated>2019-01-28T04:01:14.244Z</updated>
    
    <content type="html"><![CDATA[<h3 id="双飞翼布局【圣杯布局】"><a href="#双飞翼布局【圣杯布局】" class="headerlink" title="双飞翼布局【圣杯布局】"></a>双飞翼布局【圣杯布局】</h3><ul><li>使用场景<ul><li>不能使用 <code>html5</code> 的文档格式，应该使用 <code>html:xt</code> 过渡版本文档类型</li><li>早期多数用于 IE 浏览器</li></ul></li><li>作用<ul><li>将主体 <code>DOM</code> 前置，优先渲染主体内容，提高用户体验</li></ul></li><li>相关技能<ul><li>position</li><li>margin</li><li>负边距</li><li>登高</li><li>盒子模型</li><li>清除浮动</li></ul></li></ul><h3 id="低版本单独实现等高-【高版本推荐使用-flex】"><a href="#低版本单独实现等高-【高版本推荐使用-flex】" class="headerlink" title="低版本单独实现等高 【高版本推荐使用 flex】"></a>低版本单独实现等高 【高版本推荐使用 flex】</h3><ul><li>使用 padding 撑开元素</li><li>使用 margin 负边距回收高度</li><li>父类使用 overflow:hidden </li></ul><h3 id="BFC-IFC-GFC-FFC"><a href="#BFC-IFC-GFC-FFC" class="headerlink" title="BFC IFC GFC FFC"></a>BFC IFC GFC FFC</h3><ul><li>BFC【block formatting context】块格式化上下文   <ul><li>根元素</li><li><code>float</code> 属性不为 <code>none</code></li><li><code>position</code> 为 <code>absolute</code> 或者 <code>fixed</code></li><li><code>display</code> 为 <code>inline-block</code> <code>table-cell</code> <code>table-caption</code> <code>flex</code> <code>inline-flex</code></li><li><code>overflow</code> 不为 <code>visible</code></li></ul></li><li>IFC【inline formatting context】 内联格式化上下文<ul><li>线框高度由行内元素中最高的实际高度计算二得来（不受到竖直方向的 <code>padding/margin</code> 影响）</li></ul></li><li>FFC【flex formatting context】自适应格式化上下文<ul><li><code>display</code> 为 <code>flex</code> 或 <code>inline-flex</code></li></ul></li><li>GFC 【gridLayout formatting context】网格布局格式化上下文<ul><li><code>display</code> 为 <code>grid</code> 此元素将会获得一个独立的渲染区域，可以通过 <code>grid container</code> 上定义网格定义行 <code>grid defintion rows</code> 和 定义网格定义列 <code>grid defintion columns</code> 属性在各自网格项目中 <code>grid item</code> 上定义 <code>grid row</code> 和网格列 <code>grid columns</code> 为每一个网格项目 <code>grid item</code> 定义位置与空间</li></ul></li></ul><h3 id="CSS-hint"><a href="#CSS-hint" class="headerlink" title="CSS hint"></a>CSS hint</h3><ul><li>不要使用对个 <code>css</code> 选择元素，如 <code>.a.b.c</code>  这是解析最慢的，<code>ie6</code> 以下更不能解析</li><li>移除空的 <code>css</code> 规则 如 <code>a{}</code> 因为浏览器解析先去节点查询，后做样式复制</li><li>正确的使用显示属性，如 <code>display:inline;</code> 不要和 <code>width</code> <code>height</code> <code>float</code> <code>margin</code> <code>padding</code> 同时使用，<code>display:inline-block;</code> 不要和 <code>float</code> 同时使用</li><li>避免使用太多的浮动元素，当浮动超过了 <code>10</code> 个，就会显示警告</li><li>避免使用太多的字号，当字号超过了 <code>10</code> 种以上，就会显示警告</li><li>避免使用太多的 <code>web</code> 字体，当字体超过了 <code>5</code> 种 就会发出警告</li><li>避免使用 <code>id</code> 作为选择器，因为权重太高</li><li>标题元素最好一个页面只定义一次，便于 <code>SEO</code> 正确识别</li><li>使用 <code>winth:100%</code> 要当心你选择的盒模型</li><li>属性为 <code>0</code> 的不要写单位，无论值为多少有单位就会进行换算</li><li>各个浏览器的专属属性要有规范</li><li>避免使用看起来相似正则表达式一样的 <code>css3</code> 属性选择器</li><li>遵守盒模型规则</li></ul><h3 id="css-分层理论"><a href="#css-分层理论" class="headerlink" title="css 分层理论"></a>css 分层理论</h3><ul><li>为什么要分层</li><li>SMACSS<ul><li>【Scalable and Modular Architecture for CSS】可扩展的模块化架构的 CSS 像 <code>OOCSS</code> 一样减少重复样式为基础</li></ul></li><li>BEM<br>— SUIT</li><li>ACSS</li><li>ITCSS</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SMACSS --&gt;</span></span><br><span class="line">div.container</span><br><span class="line">    div.container-header</span><br><span class="line">        div.container-header__title</span><br><span class="line">            div.container-header__title--home</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;双飞翼布局【圣杯布局】&quot;&gt;&lt;a href=&quot;#双飞翼布局【圣杯布局】&quot; class=&quot;headerlink&quot; title=&quot;双飞翼布局【圣杯布局】&quot;&gt;&lt;/a&gt;双飞翼布局【圣杯布局】&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用场景&lt;ul&gt;
&lt;li&gt;不能使用 &lt;code&gt;html
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="super" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/super/"/>
    
    
      <category term="css" scheme="18600917746.github.io/tags/css/"/>
    
      <category term="布局" scheme="18600917746.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="html" scheme="18600917746.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>同源策略与跨域</title>
    <link href="18600917746.github.io/2019/01/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F/"/>
    <id>18600917746.github.io/2019/01/23/同源策略与跨域/</id>
    <published>2019-01-23T02:58:42.000Z</published>
    <updated>2019-01-23T03:08:46.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><ul><li>‘’</li></ul><h3 id="同源策略限制的对象"><a href="#同源策略限制的对象" class="headerlink" title="同源策略限制的对象"></a>同源策略限制的对象</h3><ul><li><code>cookie</code>、<code>localStrong</code>、<code>sessionStrong</code>、<code>indexDB</code> 无法进行读取。</li><li><code>DOM</code> 无法获取</li><li><code>AJAX</code> 不能发送</li></ul><h3 id="如何设置同源策略"><a href="#如何设置同源策略" class="headerlink" title="如何设置同源策略"></a>如何设置同源策略</h3><ul><li><code>javascript</code> 进行 <code>domain</code> </li><li>后台进行设置 <code>domain</code> 设置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domain = <span class="string">'.xxx.com'</span></span><br></pre></td></tr></table></figure><h3 id="前端不受同源策略影响的标签"><a href="#前端不受同源策略影响的标签" class="headerlink" title="前端不受同源策略影响的标签"></a>前端不受同源策略影响的标签</h3><ul><li>img</li><li>link</li><li>background-image</li><li>iframe </li><li>script</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;‘’&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;同源策略限制的对象&quot;&gt;&lt;a href=&quot;#同源策略限制的对象&quot; cl
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="跨域" scheme="18600917746.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>hello-indexDB</title>
    <link href="18600917746.github.io/2019/01/22/hello-indexDB/"/>
    <id>18600917746.github.io/2019/01/22/hello-indexDB/</id>
    <published>2019-01-22T10:51:07.000Z</published>
    <updated>2019-01-28T03:53:52.537Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="indexDB" scheme="18600917746.github.io/tags/indexDB/"/>
    
  </entry>
  
  <entry>
    <title>super-html</title>
    <link href="18600917746.github.io/2019/01/22/super-html/"/>
    <id>18600917746.github.io/2019/01/22/super-html/</id>
    <published>2019-01-22T09:23:24.000Z</published>
    <updated>2019-01-28T04:01:29.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在-webapp-中使用-img-来实现用户手机网速的测试"><a href="#在-webapp-中使用-img-来实现用户手机网速的测试" class="headerlink" title="在 webapp 中使用 img 来实现用户手机网速的测试"></a>在 webapp 中使用 img 来实现用户手机网速的测试</h3><ul><li>请求一个指定大小的 img 文件</li><li>定义一个当前时间</li><li>在 img onload 触犯函数内定义 img 加载完毕的时间</li><li>二者相减等到 加载事件/文件大小 就能得到用户的网速</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="string">"getSpeed()"</span>, <span class="number">1000</span>);</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">   <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">   img.src = <span class="string">"http://www.haosailbio.com/content/images/thumbs/default-image_600.png?timeStamp="</span> + startTime;</span><br><span class="line">   img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// 图片大小</span></span><br><span class="line">     <span class="keyword">var</span> size = <span class="number">600</span> * <span class="number">1000</span>;</span><br><span class="line">     <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">     <span class="keyword">var</span> speed = <span class="built_in">parseInt</span>(size / (endTime - startTime));</span><br><span class="line">     <span class="keyword">var</span> unit = <span class="string">"KB/S"</span>;</span><br><span class="line">     <span class="keyword">if</span>(speed &gt;= <span class="number">1024</span>)&#123;</span><br><span class="line">       speed = (speed / <span class="number">1024</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">       unit = <span class="string">"MB/S"</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>).innerHTML = <span class="string">"当前带宽："</span>+ speed + unit + <span class="string">"&lt;br/&gt;请求用时："</span> + (endTime - startTime) / <span class="number">1000</span> + <span class="string">"s"</span>;</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在-webapp-中使用-img-来实现用户手机网速的测试&quot;&gt;&lt;a href=&quot;#在-webapp-中使用-img-来实现用户手机网速的测试&quot; class=&quot;headerlink&quot; title=&quot;在 webapp 中使用 img 来实现用户手机网速的测试&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="super" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/super/"/>
    
    
      <category term="html" scheme="18600917746.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>hello-linux</title>
    <link href="18600917746.github.io/2019/01/22/hello-linux/"/>
    <id>18600917746.github.io/2019/01/22/hello-linux/</id>
    <published>2019-01-22T07:34:01.000Z</published>
    <updated>2019-01-28T08:14:46.679Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><ul><li>vi 实现文件内容定位</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 vi 只读模式下输入 `/` 输入检索字段，回车确认</span><br></pre></td></tr></table></figure><h3 id="服务器管理命令"><a href="#服务器管理命令" class="headerlink" title="服务器管理命令"></a>服务器管理命令</h3><ul><li>systemctl  【.service后缀可以省略】<ul><li>systemctl status &lt;name> 查看某服务的状态</li><li>systemctl start &lt;name> 启动某服务</li><li>systemctl stop &lt;name> 停止某服务</li><li>systemctl restart &lt;name> 重启某服务</li><li>systemctl list-units –type=service 查看所有已经启动的服务</li><li>systemctl enable &lt;name> 自动启动某服务</li><li>systemctl disable &lt;name> 某服务不会自动启动</li></ul></li></ul><h3 id="网络管理命令"><a href="#网络管理命令" class="headerlink" title="网络管理命令"></a>网络管理命令</h3><h3 id="URL下载文件"><a href="#URL下载文件" class="headerlink" title="URL下载文件"></a>URL下载文件</h3><ul><li>wget命令用来从指定的<code>URL下载文件</code>。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget(选项)(参数)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-a&lt;日志文件&gt;</td><td>在指定的日志文件中记录资料的执行过程</td></tr><tr><td>-A&lt;后缀名&gt;</td><td>指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔</td></tr><tr><td>-b</td><td>进行后台的方式运行wget</td></tr><tr><td>-B&lt;连接地址&gt;</td><td>设置参考的连接地址的基地地址</td></tr><tr><td>-c</td><td>继续执行上次终端的任务</td></tr><tr><td>-C&lt;标志&gt;</td><td>设置服务器数据块功能标志on为激活，off为关闭，默认值为on</td></tr><tr><td>-d</td><td>调试模式运行指令</td></tr><tr><td>-D&lt;域名列表&gt;</td><td>设置顺着的域名列表，域名之间用“，”分隔</td></tr><tr><td>-e&lt;指令&gt;</td><td>作为文件“.wgetrc”中的一部分执行指定的指令</td></tr><tr><td>-h</td><td>显示指令帮助信息</td></tr><tr><td>-i&lt;文件&gt;</td><td>从指定文件获取要下载的URL地址</td></tr><tr><td>-l&lt;目录列表&gt;</td><td>设置顺着的目录列表，多个目录用“，”分隔</td></tr><tr><td>-L</td><td>仅顺着关联的连接</td></tr><tr><td>-r</td><td>递归下载方式</td></tr><tr><td>-nc</td><td>文件存在时，下载文件不覆盖原有文件</td></tr><tr><td>-nv</td><td>下载时只显示更新和出错信息，不显示指令的详细执行过程</td></tr><tr><td>-q</td><td>不显示指令执行过程</td></tr><tr><td>-nh</td><td>不查询主机名称</td></tr><tr><td>-v</td><td>显示详细执行过程</td></tr><tr><td>-V</td><td>显示版本信息</td></tr><tr><td>–passive-ftp</td><td>使用被动模式PASV连接FTP服务器</td></tr><tr><td>–follow-ftp</td><td>从HTML文件中下载FTP连接文件。</td></tr></tbody></table><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>ctrl + c</td><td>进程中止</td></tr><tr><td>ctrl + d</td><td>结束输入或退出shell</td></tr><tr><td>ctrl + s</td><td>暂停屏幕输出</td></tr><tr><td>ctrl + q</td><td>恢复屏幕输出</td></tr><tr><td>ctrl + l</td><td>清空屏幕</td></tr><tr><td>ctrl + u</td><td>清空当前输入行</td></tr><tr><td>ctrl + a/e</td><td>光标跳转到首/尾</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vi&quot;&gt;&lt;a href=&quot;#vi&quot; class=&quot;headerlink&quot; title=&quot;vi&quot;&gt;&lt;/a&gt;vi&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;vi 实现文件内容定位&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="后端" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/hello/"/>
    
    
      <category term="linux" scheme="18600917746.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>node.js与io.js</title>
    <link href="18600917746.github.io/2019/01/21/node-js%E4%B8%8Eio-js/"/>
    <id>18600917746.github.io/2019/01/21/node-js与io-js/</id>
    <published>2019-01-21T06:23:08.000Z</published>
    <updated>2019-01-21T06:32:57.811Z</updated>
    
    <content type="html"><![CDATA[<ul><li>虽然现在node的版本已经到了<code>10+</code>，但是小伙伴们知道node发展时的一些趣事吗；</li></ul><h3 id="iojs和node-js到底有啥恩怨情仇？"><a href="#iojs和node-js到底有啥恩怨情仇？" class="headerlink" title="iojs和node.js到底有啥恩怨情仇？"></a>iojs和node.js到底有啥恩怨情仇？</h3><p>因为<code>node</code>半道分家了。 最初刚火由<code>Joyent</code>资助并推动的，创始人<code>Ryan Dahl</code>加入<code>Joyent</code>全职负责<code>Node.js</code>的发展，基本上是公司把<code>node</code>买下来了。<br>开始一切很好，公司出钱出力，推动<code>node</code>发展，基本不干涉社区发展，社区辅助作者提交核心代码，尽心尽力完善<code>npm</code>模块。</p><p>时间长了就有矛盾了，经过一段时间后<code>node</code>的核心代码更新渐渐慢了，同时渐渐变得保守，发展以稳定可靠为主。而社区的人们更希望能引入新特性，紧随前沿趋势变化。</p><p>最后闹得越来越僵，期间还有什么 “人称代词事件” 的发生让更多人选择放弃了，许多<code>node</code>社区大神都撤了，一部分选择<code>go</code>之类的其他语言了。</p><p>还有一部分则选择做他们自己想法中的<code>node</code>，最后因为商标问题最终他们将名字定为<code>io.js</code>。</p><p>然后就开始了各自的版本，<code>node.js</code>依旧比较慢，在 <code>0.1X.x</code> 奋斗，<code>io.js</code>则基本保持周更，<code>1.0</code>很快就出来了。</p><p>后来<code>Joyent</code>决定与<code>o.js</code>和解。成立<code>node.js</code>基金会，将<code>node.js</code>迁移到基金会管理，然后就和<code>io.js</code>商讨合并，然而<code>io.js</code>更新飞快，谈合并期间 <code>2.0</code> 版本也出来了。<br>最后和解达成，<code>io.js</code> 发布声明 <code>3.0</code> 将是 <code>io.js</code> 的最后一个大版本。</p><p>所以合并后就是<code>4.0</code>作为新一代<code>node</code>的版本号，大概情况如下。</p><p>0.x ————-1.x ————– 2.x ———— 3.x ————– 4.x<br>node.js ——-io.js ————- io.js ———–io.js ———–node.js+io.js</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;虽然现在node的版本已经到了&lt;code&gt;10+&lt;/code&gt;，但是小伙伴们知道node发展时的一些趣事吗；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;iojs和node-js到底有啥恩怨情仇？&quot;&gt;&lt;a href=&quot;#iojs和node-js到底有啥恩怨情仇？&quot; c
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="node.js" scheme="18600917746.github.io/tags/node-js/"/>
    
      <category term="io.js" scheme="18600917746.github.io/tags/io-js/"/>
    
      <category term="茶余饭后" scheme="18600917746.github.io/tags/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>hello-koa2</title>
    <link href="18600917746.github.io/2019/01/21/hello-koa2/"/>
    <id>18600917746.github.io/2019/01/21/hello-koa2/</id>
    <published>2019-01-21T04:02:05.000Z</published>
    <updated>2019-01-28T03:54:01.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="koa入手先知"><a href="#koa入手先知" class="headerlink" title="koa入手先知"></a>koa入手先知</h2><p><code>Koa</code> 是一个新的 <code>web</code> 框架，由 <code>Express</code> 幕后的原班人马打造， 致力于成为 <code>web</code> 应用和 <code>API</code> 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 <code>async</code> 函数，<code>Koa</code> 帮你丢弃回调函数，并有力地增强错误处理。 <code>Koa</code> 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p><ul><li><code>koa</code>的<code>路由中间件</code>需要安装<code>koa-router</code>模块来实现</li></ul><h3 id="koa安装"><a href="#koa安装" class="headerlink" title="koa安装"></a>koa安装</h3><ul><li>首先你要确定你已经安装的nodeJS</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><ul><li>创建空文件夹并初始化package.json包管理配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir mykoa</span><br><span class="line">cd myapp</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><ul><li>安装<code>koa2</code>包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install koa --save</span><br><span class="line">npm install koa-router --save</span><br></pre></td></tr></table></figure><h3 id="通过koa启动一个简单的server服务"><a href="#通过koa启动一个简单的server服务" class="headerlink" title="通过koa启动一个简单的server服务"></a>通过<code>koa</code>启动一个简单的<code>server</code>服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'Hello koa2'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(router.routes()).use(router.allowedMethods());</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务已开启'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa应用生成器"><a href="#koa应用生成器" class="headerlink" title="koa应用生成器"></a>koa应用生成器</h3><ul><li>使用koa社区比较活跃的方式生成与<code>express-generator</code>类似的框架</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g koa-generator</span><br></pre></td></tr></table></figure><ul><li>koa-generator支持<code>1.x</code>与<code>2.x</code>的生成【建议与时俱进】</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">koa2 myapp</span><br></pre></td></tr></table></figure><ul><li>安装依赖包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myapp</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h3 id="koa实例方法"><a href="#koa实例方法" class="headerlink" title="koa实例方法"></a>koa实例方法</h3><ul><li>app.use 注册中间件</li><li>app.callback 返回适用于 http.createServer() 方法的回调函数来处理请求</li><li>app.keys 设置签名的 Cookie 密钥</li><li>app.context app.context 是从其创建 ctx 的原型。您可以通过编辑 app.context 为 ctx 添加其他属性。</li><li>app.listen 绑定端口</li></ul><h3 id="koa核心成员-ctx"><a href="#koa核心成员-ctx" class="headerlink" title="koa核心成员 ctx"></a>koa核心成员 <code>ctx</code></h3><ul><li>Request<ul><li>ctx.req <code>node</code> 的 <code>request</code> 对象</li><li>ctx.request <code>koa</code> 的 <code>Request</code> 对象【推荐使用】</li><li>ctx.request.header 请求标头对象</li><li>ctx.request.header= 设置请求标头对象</li><li>ctx.request.headers 请求标头对象【别名 ctx.header 】</li><li>ctx.request.headers= 设置标头对象【别名 ctx.header= 】</li><li>ctx.request.method 请求方法</li><li>ctx.request.method= 设置请求方法，对于实现诸如 <code>methodOverride()</code> 的中间件是有用的。</li><li>ctx.request.url 获取请求 <code>URL</code></li><li>ctx.request.url= 设置请求 <code>URL</code>, 对 <code>url</code> 重写有用。</li><li>ctx.request.originalUrl 获取请求原始URL。</li><li>ctx.request.origin 获取 <code>URL</code> 的来源，包括 <code>protocol</code> 和 <code>host</code>。</li><li>ctx.request.href 获取完整的链接地址</li><li>ctx.request.length 返回以数字返回请求的 <code>Content-Length</code>，或 <code>undefined</code>。</li><li>ctx.request.path 获取请求路径名。</li><li>ctx.request.path= 设置请求路径名，并在存在时保留查询字符串。</li><li>ctx.request.query 获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。</li><li>ctx.request.query= 将查询字符串设置为给定对象。</li><li>ctx.request.querystring 根据 ? 获取原始查询字符串.</li><li>ctx.request.querystring= 设置原始查询字符串。</li><li>ctx.request.host 获取当前主机<code>（hostname:port）</code>。当 <code>app.proxy</code> 是 <code>true</code> 时支持 <code>X-Forwarded-Host</code>，否则使用 <code>Host</code>。</li><li>ctx.request.charset 在存在时获取请求字符集，或者 undefined</li><li>ctx.request.hostname 存在时获取主机名。当 <code>app.proxy</code> 是 <code>true</code> 时支持 <code>X-Forwarded-Host</code>，否则使用 <code>Host</code>。</li><li>ctx.request.fresh 检查请求缓存是否<code>“新鲜”</code>，也就是内容没有改变。此方法用于 <code>If-None-Match / ETag</code>, 和 <code>If-Modified-Since</code> 和 <code>Last-Modified</code> 之间的缓存协商。 在设置一个或多个这些响应头后应该引用它。</li><li>ctx.request.stale 与 <code>request.fresh</code> 相反</li><li>ctx.request.search 根据 <code>?</code> 获取原始查询字符串【不包括 <code>？</code> 】</li><li>ctx.request.socket 返回请求套接字。</li><li>ctx.request.protocol 返回请求协议，<code>“https”</code> 或 <code>“http”</code>。当 <code>app.proxy</code> 是 <code>true</code> 时支持 <code>X-Forwarded-Proto</code>。</li><li>ctx.request.secure 通过 ctx.protocol == “https” 来检查请求是否通过 TLS 发出。</li><li>ctx.request.ip 请求远程地址。 当 app.proxy 是 true 时支持 X-Forwarded-Proto。</li><li>ctx.request.ips 当 <code>X-Forwarded-For</code> 存在并且 <code>app.proxy</code> 被启用时，这些 <code>ips</code> 的数组被返回，从上游 - &gt;下游排序。 禁用时返回一个空数组。</li><li>ctx.request.subdomains 将子域返回为数组。</li><li>ctx.request.is()</li><li>ctx.request.type= 设置返回的数据类型</li><li>ctx.request.type  获取请求 <code>Content-Type</code> 不含参数 <code>&quot;charset&quot;</code>。</li><li>ctx.request.accepts()</li><li>ctx.request.acceptsEncodings() </li><li>ctx.request.acceptsCharsets()</li><li>ctx.request.acceptsLanguages()</li><li>ctx.request.get()</li></ul></li><li>Response<ul><li>ctx.res <code>node</code> 的 <code>request</code> 对象</li><li>ctx.response <code>koa</code> 的 <code>Response</code> 对象【推荐使用】</li><li>ctx.body </li><li>ctx.body=</li><li>ctx.status</li><li>ctx.status=</li><li>ctx.message</li><li>ctx.message= </li><li>ctx.length= 返回以数字返回请求的 Content-Length，或 undefined。</li><li>ctx.length 返回以数字返回请求的 Content-Length，或 undefined。</li><li>ctx.type= 设置返回的数据类型</li><li>ctx.type  获取请求的数据类型</li><li>ctx.headerSent</li><li>ctx.redirect()</li><li>ctx.attachment()</li><li>ctx.set()  设置响应标头 field 到 value:</li><li>ctx.append()</li><li>ctx.remove()</li><li>ctx.lastModified=</li><li>ctx.etag=</li></ul></li><li>state<ul><li>ctx.state 推荐使用的命名空间，可以挂载一些公用的数据</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.state.user = <span class="keyword">await</span> User.find(id);</span><br></pre></td></tr></table></figure><ul><li><p>cookies</p><ul><li>ctx.cookies.get 获取 <code>cookie</code> 的 <code>name</code></li><li>ctx.cookies.set 设置 <code>cookie</code> 的相关信息<ul><li>axAge 一个数字表示从 <code>Date.now()</code> 得到的毫秒数</li><li>signed cookie 签名值</li><li>expires cookie 过期的 Date</li><li>path cookie 路径, 默认是<code>&#39;/&#39;</code></li><li>domain <code>cookie</code> 域名</li><li>secure 安全 <code>cookie</code></li><li>httpOnly 服务器可访问 <code>cookie</code>, 默认是 <code>true</code></li><li>overwrite 一个布尔值，表示是否覆盖以前设置的同名的 <code>cookie</code> (默认是 <code>false</code>). 如果是 <code>true</code>, 在同一个请求中设置相同名称的所有 <code>Cookie</code>（不管路径或域）是否在设置此 <code>Cookie</code> 时从 <code>Set-Cookie</code> 标头中过滤掉。</li></ul></li></ul></li><li><p>throw</p><ul><li>ctx.throw 创建错误 - <a href="https://github.com/jshttp/http-errors" target="_blank" rel="noopener">http-errors</a></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.throw(<span class="number">400</span>);</span><br><span class="line">ctx.throw(<span class="number">400</span>, <span class="string">'name required'</span>);</span><br><span class="line">ctx.throw(<span class="number">400</span>, <span class="string">'name required'</span>, &#123; <span class="attr">user</span>: user &#125;);</span><br></pre></td></tr></table></figure><ul><li>assert <ul><li>ctx.assert 断言模块 -  <a href="https://github.com/jshttp/http-assert" target="_blank" rel="noopener">http-assert</a></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.assert(ctx.state.user, <span class="number">401</span>, <span class="string">'User not found. Please login!'</span>);</span><br></pre></td></tr></table></figure><h3 id="同一个应用程序同时作为-HTTP-和-HTTPS-或多个地址"><a href="#同一个应用程序同时作为-HTTP-和-HTTPS-或多个地址" class="headerlink" title="同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址"></a>同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">http.createServer(app.callback()).listen(<span class="number">3000</span>);</span><br><span class="line">https.createServer(app.callback()).listen(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><h3 id="koa-最经典的-洋葱模型"><a href="#koa-最经典的-洋葱模型" class="headerlink" title="koa 最经典的 洋葱模型"></a>koa 最经典的 洋葱模型</h3><ul><li>使用 <code>next()</code> 向下传递的时候一定要使用 <code>await</code> 去修饰</li></ul><p><img src="./koa.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><h3 id="koa-处理-get-请求"><a href="#koa-处理-get-请求" class="headerlink" title="koa 处理 get 请求"></a>koa 处理 get 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/get'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    req: ctx.request.query,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-动态路由-请求"><a href="#koa-处理-动态路由-请求" class="headerlink" title="koa 处理 动态路由 请求"></a>koa 处理 动态路由 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/get/:id'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    req: ctx.params.id,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-post-请求"><a href="#koa-处理-post-请求" class="headerlink" title="koa 处理 post 请求"></a>koa 处理 post 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line">router.post(<span class="string">'/post'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    req: ctx.request.body,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-图片-请求"><a href="#koa-处理-图片-请求" class="headerlink" title="koa 处理 图片 请求"></a>koa 处理 图片 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs= <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">router.get(<span class="string">'/koa'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'触发'</span>);</span><br><span class="line">  <span class="keyword">let</span> data = fs.createReadStream(<span class="string">'./public/koa.png'</span>);</span><br><span class="line">  ctx.type = <span class="string">'.png'</span>;</span><br><span class="line">  ctx.body = data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-文件上传-请求"><a href="#koa-处理-文件上传-请求" class="headerlink" title="koa 处理 文件上传 请求"></a>koa 处理 文件上传 请求</h3><ul><li>使用 <code>form</code> 表单上传文件，一定要开启 <code>enctype=&quot;multipart/form-data&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description 判断文件夹是否存在 如果不存在则创建文件夹</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">exports.checkDirExist = <span class="function"><span class="keyword">function</span> <span class="title">checkDirExist</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(p)) &#123;</span><br><span class="line">        fs.mkdirSync(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.getUploadFileExt = <span class="function"><span class="keyword">function</span> <span class="title">getUploadFileExt</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ext = name.split(<span class="string">'.'</span>).pop();</span><br><span class="line">    <span class="keyword">return</span> ext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exports.getUploadFileName = <span class="function"><span class="keyword">function</span> <span class="title">getUploadFileName</span>(<span class="params">ext</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span><span class="subst">$&#123;<span class="built_in">Number</span>.<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">100</span>)&#125;</span>.<span class="subst">$&#123;ext&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.getUploadDirName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> month = <span class="built_in">Number</span>.parseInt(date.getMonth()) + <span class="number">1</span>;</span><br><span class="line">    month = month.toString().length &gt; <span class="number">1</span> ? month : <span class="string">`0<span class="subst">$&#123;month&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">let</span> dir = <span class="string">`<span class="subst">$&#123;date.getFullYear()&#125;</span><span class="subst">$&#123;month&#125;</span><span class="subst">$&#123;date.getDate()&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> dir;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">'koa-body'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;getUploadFileName, getUploadDirName, getUploadFileExt, checkDirExist&#125; = <span class="built_in">require</span>(<span class="string">'./utils/index'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局启用 post请求</span></span><br><span class="line">app.use(koaBody(&#123;</span><br><span class="line">  multipart: <span class="literal">true</span>, <span class="comment">// 默认是[json,form]</span></span><br><span class="line">  formidable: &#123;</span><br><span class="line">    maxFieldsSize: <span class="number">200</span> * <span class="number">1024</span> * <span class="number">1024</span>,<span class="comment">// 设置上传文件大小最大限制，默认2M</span></span><br><span class="line">    keepExtensions: <span class="literal">true</span>,</span><br><span class="line">    multiples: <span class="literal">false</span>,</span><br><span class="line">    onFileBegin: <span class="function">(<span class="params">name, file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 获取文件后缀</span></span><br><span class="line">      <span class="keyword">const</span> ext = getUploadFileExt(file.name);</span><br><span class="line">      <span class="built_in">console</span>.log(ext);</span><br><span class="line">      <span class="comment">// 自动创建文件目录</span></span><br><span class="line">      checkDirExist(<span class="string">'upload/'</span>);</span><br><span class="line">      <span class="comment">// 最终要保存到的文件夹目录</span></span><br><span class="line">      <span class="keyword">const</span> dir = path.join(__dirname, <span class="string">`upload/<span class="subst">$&#123;getUploadDirName()&#125;</span>`</span>);</span><br><span class="line">      <span class="comment">// 检查文件夹是否存在如果不存在则新建文件夹</span></span><br><span class="line">      checkDirExist(dir);</span><br><span class="line">      <span class="comment">// 重新覆盖 file.path 属性</span></span><br><span class="line">      file.path = <span class="string">`<span class="subst">$&#123;dir&#125;</span>/<span class="subst">$&#123;getUploadFileName(ext)&#125;</span>`</span>;</span><br><span class="line">      <span class="comment">// 保留原有名称</span></span><br><span class="line">      <span class="comment">// file.path = `$&#123;dir&#125;/$&#123;file.name&#125;`;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onError: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">router.post(<span class="string">'/upload'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    files: ctx.request.files.file,</span><br><span class="line">    filesPop: getUploadFileExt(ctx.request.files.file.name),</span><br><span class="line">    name: ctx.request.body.name,</span><br><span class="line">    message: <span class="string">'上传成功'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-文件下载-请求"><a href="#koa-处理-文件下载-请求" class="headerlink" title="koa 处理 文件下载 请求"></a>koa 处理 文件下载 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs= <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">router.get(<span class="string">'/koa'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'触发'</span>);</span><br><span class="line">  <span class="keyword">let</span> data = fs.createReadStream(<span class="string">'./static/koa.txt'</span>);</span><br><span class="line">  ctx.type = <span class="string">'application/octet-stream'</span>;</span><br><span class="line">  ctx.body = data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-处理-cookie"><a href="#koa-处理-cookie" class="headerlink" title="koa 处理 cookie"></a>koa 处理 cookie</h3><ul><li>koa提供了从上下文直接读取、写入cookie的方法<ul><li>ctx.cookies.get(name, [options]) 读取上下文请求中的cookie</li><li>ctx.cookies.set(name, value, [options]) 在上下文中写入cookie</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 cookie</span></span><br><span class="line"><span class="keyword">let</span> cid = ctx.cookies.get(<span class="string">'cid'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 cookie </span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.url === <span class="string">'/index'</span>) &#123;</span><br><span class="line">    ctx.cookies.set(</span><br><span class="line">        <span class="string">'cid'</span>,</span><br><span class="line">        <span class="string">'hello world'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          domain: <span class="string">'localhost'</span>,  <span class="comment">// 写cookie所在的域名</span></span><br><span class="line">          path: <span class="string">'/index'</span>,       <span class="comment">// 写cookie所在的路径</span></span><br><span class="line">          maxAge: <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// cookie有效时长</span></span><br><span class="line">          expires: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017-02-15'</span>),  <span class="comment">// cookie失效时间</span></span><br><span class="line">          httpOnly: <span class="literal">false</span>,  <span class="comment">// 是否只用于http请求中获取</span></span><br><span class="line">          overwrite: <span class="literal">false</span>,  <span class="comment">// 是否允许重写</span></span><br><span class="line">        &#125;,</span><br><span class="line">    );</span><br><span class="line">    ctx.body = <span class="string">'cookie is ok'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-实现session"><a href="#koa-实现session" class="headerlink" title="koa 实现session"></a>koa 实现session</h3><ul><li>koa2 只提供了 <code>cookie</code> 没有原生的提供 <code>session</code> 所以需要自己编写或者使用第三方插件<ul><li>如果session数据量很小，可以直接存在内存中</li><li>如果session数据量很大，则需要存储介质存放session数据</li></ul></li><li>数据库存储方案<ul><li>将session存放在MySQL数据库中</li><li>需要用到中间件<ul><li>koa-session-minimal 适用于koa2 的session中间件，提供存储介质的读写接口 。</li><li>koa-mysql-session 为koa-session-minimal中间件提供MySQL数据库的session数据读写操作。</li><li>将sessionId和对于的数据存到数据库</li></ul></li><li>将数据库的存储的sessionId存到页面的cookie中 【不建议】</li><li>根据cookie的sessionId去获取对于的session信息</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session-minimal'</span>);</span><br><span class="line"><span class="keyword">const</span> MysqlSession = <span class="built_in">require</span>(<span class="string">'koa-mysql-session'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置存储session信息的mysql</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> MysqlSession(&#123;</span><br><span class="line">  user: <span class="string">'root'</span>,</span><br><span class="line">  password: <span class="string">'abc123'</span>,</span><br><span class="line">  database: <span class="string">'koa_demo'</span>,</span><br><span class="line">  host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存放sessionId的cookie配置</span></span><br><span class="line"><span class="keyword">let</span> cookie = &#123;</span><br><span class="line">  maxAge: <span class="string">''</span>, <span class="comment">// cookie有效时长</span></span><br><span class="line">  expires: <span class="string">''</span>,  <span class="comment">// cookie失效时间</span></span><br><span class="line">  path: <span class="string">''</span>, <span class="comment">// 写cookie所在的路径</span></span><br><span class="line">  domain: <span class="string">''</span>, <span class="comment">// 写cookie所在的域名</span></span><br><span class="line">  httpOnly: <span class="string">''</span>, <span class="comment">// 是否只用于http请求中获取</span></span><br><span class="line">  overwrite: <span class="string">''</span>,  <span class="comment">// 是否允许重写</span></span><br><span class="line">  secure: <span class="string">''</span>,</span><br><span class="line">  sameSite: <span class="string">''</span>,</span><br><span class="line">  signed: <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用session中间件</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  key: <span class="string">'SESSION_ID'</span>,</span><br><span class="line">  store: store,</span><br><span class="line">  cookie: cookie</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置session</span></span><br><span class="line">  <span class="keyword">if</span> ( ctx.url === <span class="string">'/set'</span> ) &#123;</span><br><span class="line">    ctx.session = &#123;</span><br><span class="line">      user_id: <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>),</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    ctx.body = ctx.session</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( ctx.url === <span class="string">'/'</span> ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取session信息</span></span><br><span class="line">    ctx.session.count = ctx.session.count + <span class="number">1</span>;</span><br><span class="line">    ctx.body = ctx.session</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[demo] session is starting at port 3000'</span>)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">### koa 处理 跨域</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### koa 处理 jsonp</span></span><br><span class="line"><span class="string">- 使用第三方控件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>npm</span><br><span class="line">npm install koa-jsonp --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonp = <span class="built_in">require</span>(<span class="string">'koa-jsonp'</span>);</span><br><span class="line">app.use(jsonp());</span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> returnData = &#123;</span><br><span class="line">    success: <span class="literal">true</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      text: <span class="string">'this is a jsonp api'</span>,</span><br><span class="line">      time: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 直接输出JSON</span></span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    success: <span class="literal">true</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      text: <span class="string">'this is a jsonp api'</span>,</span><br><span class="line">      time: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="koa-模板引擎-【需要-views-中间件支持】"><a href="#koa-模板引擎-【需要-views-中间件支持】" class="headerlink" title="koa 模板引擎 【需要 views 中间件支持】"></a>koa 模板引擎 【需要 views 中间件支持】</h3><ul><li>安装 views 中间件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save koa-views</span><br></pre></td></tr></table></figure><ul><li>ejs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs --save</span><br></pre></td></tr></table></figure><ul><li>设置渲染引擎</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(views(path.join(__dirname, <span class="string">'./views'</span>), &#123;</span><br><span class="line">  extension: <span class="string">'ejs'</span>,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><ul><li>创建一个简单的index.ejs骨架</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">message</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>根据路由传递参数，并渲染页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/ejs'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> ctx.render(<span class="string">'ejs'</span>, &#123;</span><br><span class="line">    title: <span class="string">'ejs'</span>,</span><br><span class="line">    message: <span class="string">'Hello koa - ejs'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa-进行测试"><a href="#koa-进行测试" class="headerlink" title="koa 进行测试"></a>koa 进行测试</h3><ul><li>第三方相关库<ul><li>mocha 模块是测试框架</li><li>chai 模块是用来进行测试结果断言库，比如一个判断 1 + 1 是否等于 2</li><li>supertest 模块是http请求测试库，用来请求API接口</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mocha chai supertest --save-dev</span><br></pre></td></tr></table></figure><ul><li>编写测试用例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test/index.test.js</span></span><br><span class="line"><span class="keyword">const</span> supertest = <span class="built_in">require</span>(<span class="string">'supertest'</span>);</span><br><span class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'./../index'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> expect = chai.expect;</span><br><span class="line"><span class="keyword">const</span> request = supertest( app.listen() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试套件/组</span></span><br><span class="line">describe( <span class="string">'开始测试demo的GET请求'</span>, ( ) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 测试用例</span></span><br><span class="line">  it(<span class="string">'测试/getString.json请求'</span>, ( done ) =&gt; &#123;</span><br><span class="line">      request</span><br><span class="line">        .get(<span class="string">'/getString.json'</span>)</span><br><span class="line">        .expect(<span class="number">200</span>)</span><br><span class="line">        .end(<span class="function">(<span class="params"> err, res </span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 断言判断结果是否为object类型</span></span><br><span class="line">            expect(res.body).to.be.an(<span class="string">'object'</span>);</span><br><span class="line">            expect(res.body.success).to.be.an(<span class="string">'boolean'</span>);</span><br><span class="line">            expect(res.body.data).to.be.an(<span class="string">'string'</span>);</span><br><span class="line">            done()</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>执行测试用例<ul><li>如果使用的是 <code>webstrom</code> 可以配置执行脚本</li><li>如果全局安装的 <code>mocha</code> 可在当前文件夹直接执行 <code>mocha</code></li><li>如果是临时安装 需要执行 <code>./node_modules/.bin/mocha</code>   </li></ul></li></ul><h3 id="经典目录架构"><a href="#经典目录架构" class="headerlink" title="经典目录架构"></a>经典目录架构</h3><p><img src="./koaDir.jpg" alt=""></p><h3 id="通过-session-来进行用户登录权限判断"><a href="#通过-session-来进行用户登录权限判断" class="headerlink" title="通过 session 来进行用户登录权限判断"></a>通过 session 来进行用户登录权限判断</h3><ul><li>使用 <code>session</code> 中间件</li><li>登录以后存储 <code>session</code> 并设置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> session = ctx.session;</span><br><span class="line">session.isLogin = <span class="literal">true</span>;</span><br><span class="line">session.userName = userResult.name;</span><br><span class="line">session.userId = userResult.id;</span><br></pre></td></tr></table></figure><ul><li>做路由判断</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否有session</span></span><br><span class="line"><span class="keyword">if</span> ( ctx.session &amp;&amp; ctx.session.isLogin &amp;&amp; ctx.session.userName ) &#123;</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">'work页面'</span>;</span><br><span class="line">   ctx.render(<span class="string">'work'</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 没有登录态则跳转到错误页面</span></span><br><span class="line">  ctx.redirect(<span class="string">'/error'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;koa入手先知&quot;&gt;&lt;a href=&quot;#koa入手先知&quot; class=&quot;headerlink&quot; title=&quot;koa入手先知&quot;&gt;&lt;/a&gt;koa入手先知&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Koa&lt;/code&gt; 是一个新的 &lt;code&gt;web&lt;/code&gt; 框架，由 &lt;code
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="nodeJS" scheme="18600917746.github.io/tags/nodeJS/"/>
    
      <category term="koa2" scheme="18600917746.github.io/tags/koa2/"/>
    
  </entry>
  
  <entry>
    <title>hello-express</title>
    <link href="18600917746.github.io/2019/01/19/hello-express/"/>
    <id>18600917746.github.io/2019/01/19/hello-express/</id>
    <published>2019-01-19T08:26:54.000Z</published>
    <updated>2019-01-28T03:53:30.446Z</updated>
    
    <content type="html"><![CDATA[<h3 id="express安装"><a href="#express安装" class="headerlink" title="express安装"></a>express安装</h3><ul><li>首先你要确定你已经安装的<code>nodeJS</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><ul><li>创建空文件夹并初始化package.json包管理配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir myapp</span><br><span class="line">cd myapp</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><ul><li>安装express包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><h3 id="通过express启动一个简单的server服务"><a href="#通过express启动一个简单的server服务" class="headerlink" title="通过express启动一个简单的server服务"></a>通过express启动一个简单的server服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; res.send(<span class="string">'Hello Express!'</span>));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Express-应用程序生成器"><a href="#Express-应用程序生成器" class="headerlink" title="Express 应用程序生成器"></a>Express 应用程序生成器</h3><ul><li>使用<code>Express</code>官方提供的脚手架进行快捷搭建项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-generator -g</span><br></pre></td></tr></table></figure><ul><li>生成项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express --view=pug myapp</span><br></pre></td></tr></table></figure><ul><li>安装依赖包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myapp</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h3 id="Express实例方法"><a href="#Express实例方法" class="headerlink" title="Express实例方法"></a>Express实例方法</h3><ul><li>app.use</li><li>app.get</li><li>app.post</li><li>app.put</li><li>app.delete</li><li>app.listen</li></ul><h3 id="app路由的两个对象"><a href="#app路由的两个对象" class="headerlink" title="app路由的两个对象"></a>app路由的两个对象</h3><ul><li>req：表示HTTP请求，包含了请求头、参数、内容、HTTP头部属性<ul><li>req.query  用来接收<code>get</code>请求参数，并以对象的方式输出</li><li>req.hostname 获取主机名与IP地址</li><li>req.params 获取动态路由参数</li><li>req.baseUrl 获取路由当前安装的<code>url</code>路径</li><li>req.body 获取请求主体</li><li>req.cookies 获取请求<code>Cookies</code></li><li>req.fresh/req.stale 判断请求是否还新鲜</li><li>req.originUrl 获取原始请求<code>url</code></li><li>req.path 获取请求路径</li><li>req.protocol 获取协议类型</li><li>req.route 获取当前匹配的路由</li><li>req.subdomains 获取子域名</li><li>req.accepts 检查请求的<code>Accept</code>头的请求类型</li><li>req.get 获取指定的<code>HTTP</code>请求头</li><li>req.is 判断请求头<code>Content-Type</code>的<code>MMIE</code>类型</li></ul></li><li>res：表示服务器的响应，包含响应头、响应数据等<ul><li>res.append 追加请求头信息</li><li>res.set 在<code>res.append</code>之前将重置请求头</li><li>res.download 提示下载文件。</li><li>res.cookie 设置<code>cookie</code></li><li>res.clearCookie 清除<code>cookie</code></li><li>res.download 传输指定路径的文件</li><li>res.get 返回指定的请求头</li><li>res.end 结束响应过程。</li><li>res.json 发送<code>JSON</code>响应。</li><li>res.jsonp 使用<code>JSONP</code>支持发送<code>JSON</code>响应。</li><li>res.redirect 重定向请求。</li><li>res.render 渲染视图模板。</li><li>res.send 发送各种类型的回复。</li><li>res.sendFile 将文件作为八位字节流发送。</li><li>res.sendStatus 设置响应状态代码并将其字符串表示形式作为响应主体发送。</li><li>res.type 设置<code>Content-Type</code>的<code>MMIE</code>类型</li><li>res.format 根据<code>Content-Type</code>类型进行对应返回</li></ul></li></ul><h3 id="Express托管静态文件"><a href="#Express托管静态文件" class="headerlink" title="Express托管静态文件"></a>Express托管静态文件</h3><ul><li>为了提供诸如图像、CSS 文件和 JavaScript 文件之类的静态文件，请使用 <code>Express</code> 中的 express.static 内置中间件函数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express.static(root, [options])</span><br></pre></td></tr></table></figure><ul><li>通过如下代码就可以将 public 目录下的图片、CSS 文件、JavaScript 文件对外开放访问</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&apos;public&apos;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/images/kitten.jpg</span><br><span class="line">http://localhost:3000/css/style.css</span><br><span class="line">http://localhost:3000/js/app.js</span><br><span class="line">http://localhost:3000/images/bg.png</span><br><span class="line">http://localhost:3000/hello.html</span><br></pre></td></tr></table></figure><ul><li>如果要使用多个静态资源目录，请多次调用 express.static 中间件函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&apos;public&apos;))</span><br><span class="line">app.use(express.static(&apos;files&apos;))</span><br></pre></td></tr></table></figure><ul><li>也可以指定文件路径下访问资源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(&apos;/static&apos;, express.static(&apos;public&apos;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/static/images/kitten.jpg</span><br><span class="line">http://localhost:3000/static/css/style.css</span><br><span class="line">http://localhost:3000/static/js/app.js</span><br><span class="line">http://localhost:3000/static/images/bg.png</span><br><span class="line">http://localhost:3000/static/hello.html</span><br></pre></td></tr></table></figure><ul><li>关于启动的路径问题，建议使用路径拼接的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(&apos;/static&apos;, express.static(path.join(__dirname, &apos;public&apos;)))</span><br></pre></td></tr></table></figure><h3 id="Express动态路由"><a href="#Express动态路由" class="headerlink" title="Express动态路由"></a>Express动态路由</h3><ul><li>使用app.params来获取Express的动态路由参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/index/:id'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    data: req.params.id,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Express与前端交互"><a href="#Express与前端交互" class="headerlink" title="Express与前端交互"></a>Express与前端交互</h3><ul><li>获取<code>get</code>传递的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">'/index'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    data: req.query,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>获取<code>post</code>传递的数据 - 需要第三方模块的支持</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);<span class="comment">//解析,用req.body获取post参数</span></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.post(<span class="string">'/post'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    data: req.body,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="根据Content-Type的类型进行返回"><a href="#根据Content-Type的类型进行返回" class="headerlink" title="根据Content-Type的类型进行返回"></a>根据<code>Content-Type</code>的类型进行返回</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.format(&#123;</span><br><span class="line">  <span class="string">'text/plain'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'hey'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">'text/html'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'&lt;p&gt;hey&lt;/p&gt;'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">'application/json'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    res.send(&#123; <span class="attr">message</span>: <span class="string">'hey'</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">'default'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// log the request and respond with 406</span></span><br><span class="line">    res.status(<span class="number">406</span>).send(<span class="string">'Not Acceptable'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h3><ul><li>应用级中间件<ul><li>每次请求都会执行的公用中间件</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Time:'</span>, <span class="built_in">Date</span>.now());</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>路由级别中间件</li><li>错误处理中间件</li><li>内置中间件<ul><li>express.static 提供静态资产，如HTML文件，图像等。</li><li>express.json 使用JSON有效负载解析传入的请求。</li><li>express.urlencoded 用URL编码的有效负载解析传入的请求。</li></ul></li><li>第三方中间件<ul><li>cookie-parser 操作<code>cookie</code></li><li>cookie-session 操作<code>session</code></li><li>server-favicon 操作<code>favicon</code></li></ul></li></ul><h3 id="设置网站-favicon-图标"><a href="#设置网站-favicon-图标" class="headerlink" title="设置网站 favicon 图标"></a>设置网站 favicon 图标</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(favicon(__dirname + <span class="string">'/public/favicon.ico'</span>));</span><br></pre></td></tr></table></figure><h3 id="router路由"><a href="#router路由" class="headerlink" title="router路由"></a>router路由</h3><ul><li>路由处理函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req);</span><br><span class="line">  next();</span><br><span class="line">&#125;, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req);</span><br><span class="line">  next();</span><br><span class="line">&#125;, (req, res) =&gt; &#123;</span><br><span class="line">  req.json(&#123;</span><br><span class="line">    code: <span class="number">200</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> next1 = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> next2 = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> next3 = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send();</span><br><span class="line">&#125;;</span><br><span class="line">app.get(<span class="string">'/'</span>, [next1, next2, next3]);</span><br></pre></td></tr></table></figure><ul><li>一般经典处理路由方式<ul><li>第一层<code>next</code>处理逻辑</li><li>第二层<code>next</code>处理逻辑</li><li>……</li><li>处理完数据返回给用户</li></ul></li></ul><h3 id="错误处理路由-【尽量不要使用内置的错误处理句柄】"><a href="#错误处理路由-【尽量不要使用内置的错误处理句柄】" class="headerlink" title="错误处理路由 【尽量不要使用内置的错误处理句柄】"></a>错误处理路由 【尽量不要使用内置的错误处理句柄】</h3><ul><li>一般使用<code>标准输出</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(logError);</span><br></pre></td></tr></table></figure><ul><li>检测是否是<code>ajax</code>错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clientErrorHandler</span> (<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (req.xhr) &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(&#123; <span class="attr">error</span>: <span class="string">'Something failed!'</span> &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(clientErrorHandler);</span><br></pre></td></tr></table></figure><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorHandler</span> (<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  res.status(<span class="number">500</span>);</span><br><span class="line">  res.render(<span class="string">'error'</span>, &#123; <span class="attr">error</span>: err &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(errorHandler)</span><br></pre></td></tr></table></figure></li><li><p>使用第三方中间件</p></li></ul><h3 id="Express服务器日志中间件"><a href="#Express服务器日志中间件" class="headerlink" title="Express服务器日志中间件"></a>Express服务器日志中间件</h3><ul><li>morgan</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install morgan --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个读写的文件流</span></span><br><span class="line"><span class="keyword">const</span> accessLogStream = fs.createWriteStream(path.join(__dirname, <span class="string">'/log/access.log'</span>), &#123;<span class="attr">flag</span>: <span class="string">'a'</span>&#125;);</span><br><span class="line">app.use(morgan(<span class="function"><span class="keyword">function</span>(<span class="params">tokens, req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    tokens.method(req, res),</span><br><span class="line">    tokens.url(req, res),</span><br><span class="line">    tokens.status(req, res),</span><br><span class="line">    tokens.res(req, res, <span class="string">'content-length'</span>),</span><br><span class="line">    tokens[<span class="string">'response-time'</span>](req, res) + <span class="string">'ms'</span>,</span><br><span class="line">  ].join(<span class="string">' - '</span>);</span><br><span class="line">&#125;, &#123;<span class="attr">stream</span>: accessLogStream&#125;));</span><br></pre></td></tr></table></figure><ul><li>winston</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install winston --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">'winston'</span>);</span><br><span class="line"><span class="keyword">const</span> logger = winston.createLogger(&#123;</span><br><span class="line">  level: <span class="string">'info'</span>,</span><br><span class="line">  format: winston.format.json(),</span><br><span class="line">  transports: [</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// - Write to all logs with level `info` and below to `combined.log`</span></span><br><span class="line">    <span class="comment">// - Write all logs error (and below) to `error.log`.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">new</span> winston.transports.Console(),</span><br><span class="line">    <span class="keyword">new</span> winston.transports.File(&#123;<span class="attr">filename</span>: <span class="string">'error.log'</span>, <span class="attr">level</span>: <span class="string">'error'</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> winston.transports.File(&#123;<span class="attr">filename</span>: <span class="string">'combined.log'</span>&#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>可选触发方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger.log(<span class="string">'info'</span>, <span class="string">'这是info'</span>);</span><br><span class="line">logger.log(<span class="string">'error'</span>, <span class="string">'error+'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Express跨域"><a href="#Express跨域" class="headerlink" title="Express跨域"></a>Express跨域</h3><ul><li>修改<code>Access-Control-Allow-Origin</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置跨域访问</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>);</span><br><span class="line">    res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用第三方中间件<ul><li><a href="https://www.npmjs.com/package/cors" target="_blank" rel="noopener">cors</a></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.use(cors());</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/products/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">msg</span>: <span class="string">'This is CORS-enabled for all origins!'</span>&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'CORS-enabled web server listening on port 80'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.npmjs.com/package/http-proxy-middleware" target="_blank" rel="noopener">http-proxy-middleware</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.use(<span class="string">'/api'</span>, proxy(&#123; <span class="attr">target</span>: <span class="string">'*'</span>, <span class="attr">changeOrigin</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h3 id="使用模板引擎渲染页面"><a href="#使用模板引擎渲染页面" class="headerlink" title="使用模板引擎渲染页面"></a>使用模板引擎渲染页面</h3><ul><li>安装<code>pug</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pug --save</span><br></pre></td></tr></table></figure><ul><li>设置渲染引擎</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'pug'</span>);</span><br><span class="line">app.set(<span class="string">"views"</span>, path.resolve(__dirname, <span class="string">"views"</span>));</span><br></pre></td></tr></table></figure><ul><li>创建一个简单的<code>index.pug</code>骨架</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title= title</span><br><span class="line">  body</span><br><span class="line">    h1= message</span><br></pre></td></tr></table></figure><ul><li>根据路由传递参数，并渲染页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Hey'</span>, <span class="attr">message</span>: <span class="string">'Hello there!'</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>安装<code>EJS</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs --save</span><br></pre></td></tr></table></figure><ul><li>设置渲染引擎</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</span><br><span class="line">app.set(<span class="string">"views"</span>, path.resolve(__dirname, <span class="string">"views"</span>));</span><br></pre></td></tr></table></figure><ul><li>创建一个简单的<code>index.ejs</code>骨架</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">message</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>根据路由传递参数，并渲染页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Hey'</span>, <span class="attr">message</span>: <span class="string">'Hello there!'</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>同时使用<code>ejs</code>与<code>pug</code><ul><li><code>pug</code>为主</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> path =<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">"ejs"</span>);</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line">app.set(<span class="string">"views"</span>, path.resolve(__dirname, <span class="string">"views"</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'pug'</span>);</span><br><span class="line">app.engine(<span class="string">"html"</span>, ejs.renderFile);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/pug'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'pug'</span>, &#123;</span><br><span class="line">    title: <span class="string">'pug'</span>,</span><br><span class="line">    message: <span class="string">'hello pug'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/ejs'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'html.ejs'</span>, &#123;</span><br><span class="line">    title: <span class="string">'ejs'</span>,</span><br><span class="line">    message: <span class="string">'hello ejs'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="与MongoDB连接"><a href="#与MongoDB连接" class="headerlink" title="与MongoDB连接"></a>与MongoDB连接</h3><ul><li>安装<code>mongodb</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose --save</span><br></pre></td></tr></table></figure><ul><li>连接数据库</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line">mongoose.Promise = global.Promise;</span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost:27017/userdb'</span>, &#123;<span class="attr">useMongoClient</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li>建模</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    username: <span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>关联已经建好的模型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userModel = mongoose.model(<span class="string">'user'</span>, userSchema);</span><br></pre></td></tr></table></figure><ul><li>基本操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/list'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  userModel.find(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(<span class="string">'UserList'</span>,&#123;</span><br><span class="line">      user: data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="express与MongoDB操作"><a href="#express与MongoDB操作" class="headerlink" title="express与MongoDB操作"></a>express与MongoDB操作</h3><ul><li>add - 增</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserAdd.ejs--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户编辑页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/users/add"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是页面渲染</span></span><br><span class="line">router.get(<span class="string">'/add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'UserAdd.ejs'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是数据库操作 post</span></span><br><span class="line">router.post(<span class="string">'/add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newUser = <span class="keyword">new</span> userModel(&#123;</span><br><span class="line">    username: req.body.username,</span><br><span class="line">    email: req.body.email</span><br><span class="line">  &#125;);</span><br><span class="line">  newUser.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(err) &#125;</span><br><span class="line">    res.redirect(<span class="string">'/users/list'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>delete - 删</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户提交要删除的 ID</span></span><br><span class="line">$(<span class="string">'.del'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = $(<span class="keyword">this</span>).data(<span class="string">'id'</span>);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/users/del?id='</span>+id,</span><br><span class="line">        type: <span class="string">'delete'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="built_in">console</span>.log(res); &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 id 删除对应数据</span></span><br><span class="line">router.delete(<span class="string">'/del'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = req.query.id;</span><br><span class="line">  userModel.remove(&#123;<span class="attr">_id</span>: id&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(err); &#125;</span><br><span class="line">    res.json(&#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">msg</span>: <span class="string">'删除成功'</span>&#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>edit - 改</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserEdit.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户编辑页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/users/update"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"&lt;%= user._id %&gt;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"&lt;%= user.username %&gt;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"&lt;%= user.email %&gt;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.前端页面可以使用动态路由做渲染</span></span><br><span class="line">router.get(<span class="string">'/edit/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = req.params.id;</span><br><span class="line">  userModel.findOne(&#123;<span class="attr">_id</span>: id&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'UserEdit'</span>, &#123;</span><br><span class="line">      user: data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 根据 id 查找到数据，修改后保存回去</span></span><br><span class="line">router.post(<span class="string">'/update'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = req.body.id;</span><br><span class="line">  userModel.findById(id, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(err); &#125;</span><br><span class="line">    data.username = req.body.username;</span><br><span class="line">    data.email = req.body.email;</span><br><span class="line">    data.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">      res.redirect(<span class="string">'/users/list'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Express安全策略"><a href="#Express安全策略" class="headerlink" title="Express安全策略"></a>Express安全策略</h3><ul><li>设置<code>cookie</code>安全<ul><li>secure 确保浏览器仅适用<code>https</code>进行<code>cookie</code>传递</li><li>httpOnly 确保cookie仅适用http（s）发送，而不是客户端javascript，有助于防止跨站点攻击</li><li>domain 表示cookie的域名，使用它来判断请求url的服务器的域名</li><li>path 表示cookie的路径</li><li>expires 设置cookie的过期时间</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'cookie-session'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> expiryDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() + <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// 1 hour</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  name: <span class="string">'session'</span>,</span><br><span class="line">  keys: [<span class="string">'key1'</span>, <span class="string">'key2'</span>],</span><br><span class="line">  cookie: &#123;</span><br><span class="line">    secure: <span class="literal">true</span>,</span><br><span class="line">    httpOnly: <span class="literal">true</span>,</span><br><span class="line">    domain: <span class="string">'example.com'</span>,</span><br><span class="line">    path: <span class="string">'foo/bar'</span>,</span><br><span class="line">    expires: expiryDate</span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><ul><li>节点请求频率限制<ul><li>安装<code>node-rate-limiter-flexible</code>中间件</li><li>依赖注册</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-rate-limiter-flexible --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> rateLimiterRedisMiddleware = <span class="built_in">require</span>(<span class="string">'./middleware/rateLimiterRedis'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(rateLimiterRedisMiddleware);</span><br></pre></td></tr></table></figure><ul><li>http请求头设置<ul><li>安装<code>helmet</code></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install helmet --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> helmet = <span class="built_in">require</span>(<span class="string">'helmet'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(helmet())</span><br></pre></td></tr></table></figure><ul><li>就算你不使用http请求安全模块，也至少禁用<code>X-prowered-by</code>（默认已经开启）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.disable(<span class="string">'x-powered-by'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;express安装&quot;&gt;&lt;a href=&quot;#express安装&quot; class=&quot;headerlink&quot; title=&quot;express安装&quot;&gt;&lt;/a&gt;express安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先你要确定你已经安装的&lt;code&gt;nodeJS&lt;/code&gt;&lt;/li&gt;
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="Express" scheme="18600917746.github.io/tags/Express/"/>
    
      <category term="nodeJS" scheme="18600917746.github.io/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>hello-node</title>
    <link href="18600917746.github.io/2019/01/19/hello-node/"/>
    <id>18600917746.github.io/2019/01/19/hello-node/</id>
    <published>2019-01-19T07:40:46.000Z</published>
    <updated>2019-01-28T04:00:47.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>nodeJS初始</p></blockquote><h3 id="什么是nodeJS"><a href="#什么是nodeJS" class="headerlink" title="什么是nodeJS"></a>什么是nodeJS</h3><ul><li>他的本质是<code>javascript</code>解析器</li><li>他是<code>javascript</code>的运行环境</li><li>他是运行在服务端的</li><li>他是由<code>google-V8</code>引擎所创建的</li><li>他不会一个<code>WEB</code>服务器</li></ul><h3 id="为什么要使用nodeJS"><a href="#为什么要使用nodeJS" class="headerlink" title="为什么要使用nodeJS"></a>为什么要使用nodeJS</h3><ul><li>处理高效的I/O操作</li><li>提供高性能的web服务器</li><li>事件机制非常完善</li><li>天然处理DOM</li><li>社区比较完善，十分火热</li></ul><h3 id="nodeJS的优势"><a href="#nodeJS的优势" class="headerlink" title="nodeJS的优势"></a>nodeJS的优势</h3><ul><li>处理大流量数据</li><li>适合实时交互的应用<ul><li>在线聊天系统</li></ul></li><li>完美支持对象数据库<ul><li>MongoDB</li></ul></li><li>异步处理大量并发连接</li></ul><h3 id="学习nodeJS的前置知识"><a href="#学习nodeJS的前置知识" class="headerlink" title="学习nodeJS的前置知识"></a>学习nodeJS的前置知识</h3><ul><li>javascript</li><li>ES6</li><li>一些服务器相关的知识<ul><li>Linux</li><li>Http</li><li>Apache</li></ul></li><li>最好在Linux系统下进行开发</li></ul><h3 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li><li><a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></li><li><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></li></ul><blockquote><p>nodeJS入门</p></blockquote><h3 id="nodeJS安装"><a href="#nodeJS安装" class="headerlink" title="nodeJS安装"></a>nodeJS安装</h3><ul><li>学习阶段尽量使用最新版本</li><li>前往官网根据自己的设备进行对应下载</li></ul><h3 id="包管理系统-npm"><a href="#包管理系统-npm" class="headerlink" title="包管理系统 npm"></a>包管理系统 npm</h3><ul><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></li><li><a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></li><li>允许用户从<code>npm</code>服务器下载第三方的资源包到本地使用</li><li>允许用户从<code>npm</code>服务器下载并安装第三方的命令行程序<code>cli</code>到本地执行</li><li>允许用户将自己编写的包或者命令行程序上传到<code>npm</code>服务器供别人使用</li><li>本地配置<code>package.json</code>文件，使用命令自动化执行脚本</li></ul><h3 id="启动一个最简单的Http服务"><a href="#启动一个最简单的Http服务" class="headerlink" title="启动一个最简单的Http服务"></a>启动一个最简单的Http服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 定义返回的 header</span></span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plan'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 返回响应数据</span></span><br><span class="line">  response.end(<span class="string">'Hello world!\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务已经开启'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>nodeJS环境与npm命令深入</p></blockquote><h3 id="nodeJS提供的工具"><a href="#nodeJS提供的工具" class="headerlink" title="nodeJS提供的工具"></a>nodeJS提供的工具</h3><ul><li>nodeJS提供了一套交互环境（REPL），可以在这个环境内做简单的数据交互。<ul><li>进行简单的运算</li><li>ctrl + c 终端</li><li>ctrl + u 清空输入</li><li>ctrl + l 清空本次历史</li><li>table 命令提示</li></ul></li></ul><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><ul><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></li><li>npm更新npm</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure><ul><li>npm全局安装包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g &lt;packageName&gt;</span><br></pre></td></tr></table></figure><ul><li>npm全局卸载包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g &lt;packageName&gt;</span><br></pre></td></tr></table></figure><blockquote><p>nodeJS回调机制</p></blockquote><h3 id="什么是回调"><a href="#什么是回调" class="headerlink" title="什么是回调"></a>什么是回调</h3><ul><li>函数调用的方式<ul><li>同步调用</li><li>回调</li><li>异步调用 - <code>ajax</code>、<code>事件</code>、<code>setTimeout</code>、<code>setInterval</code></li></ul></li></ul><h3 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h3><ul><li>阻塞与非阻塞关注的是程序在等待调用结果（消息、返回值）时的状态</li><li>阻塞就是等待结果出来以后在顺序执行</li><li>非阻塞就是可以先去执行其他的事情，等结果出现再处理结果<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 阻塞代码 - 同步</span></span><br><span class="line"><span class="keyword">let</span> md = fs.readFileSync(<span class="string">'1.md'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(md.toString());</span><br><span class="line"><span class="comment">// 非阻塞代码 - 异步</span></span><br><span class="line">fs.readFile(<span class="string">'1.md'</span>, (error, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'判断是否是异步函数'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="nodeJS的回调"><a href="#nodeJS的回调" class="headerlink" title="nodeJS的回调"></a>nodeJS的回调</h3><blockquote><p>nodeJS的事件驱动机制</p></blockquote><h3 id="事件驱动模型"><a href="#事件驱动模型" class="headerlink" title="事件驱动模型"></a>事件驱动模型</h3><ul><li>单线程程序</li><li>通过<code>事件</code>与<code>回调</code>来模拟多线程</li><li>所有的事件模式都是依据<code>观察者设计模式</code>来实现的</li></ul><p><img src="event.jpg" alt=""></p><h3 id="事件处理代码流程"><a href="#事件处理代码流程" class="headerlink" title="事件处理代码流程"></a>事件处理代码流程</h3><ul><li>引入events对象，创建对象</li><li>绑定事件处理程序</li><li>触发事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入事件处理对象</span></span><br><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">const</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件处理函数</span></span><br><span class="line"><span class="keyword">let</span> connctHander = <span class="function"><span class="keyword">function</span> <span class="title">dad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'事件被触发'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>, connctHander);</span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'事件执行完毕'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>nodeJS模块化</p></blockquote><h3 id="nodeJS模块化"><a href="#nodeJS模块化" class="headerlink" title="nodeJS模块化"></a>nodeJS模块化</h3><ul><li>模块化的概念与意义<ul><li>为了让nodeJS的文件可以相互调用，nodeJS提供了一个简单的模块化机制</li><li>模块是nodeJS应用程序的基本组成部分</li><li>文件与模块是一一对应的。一个nodeJS文件就是一个模块</li><li>文件的内容可以是<code>javascript代码</code>、<code>JSON文件</code>、或者编译过得<code>C/C++扩展</code>。</li></ul></li><li>nodeJS中的模块<ul><li>nodeJS中存在4类模块（原生模块和3种文件模块）。</li></ul></li><li>nodeJS的模块加载流程<ul><li>从文件模块缓存中加载</li><li>从原生模块加载</li><li>从文件加载</li></ul></li><li>nodeJS模块导出与导入方式<ul><li><code>require</code>导入模块<ul><li><code>require</code>方法接受参数的传递：<ul><li><code>http</code>、<code>fs</code>、<code>path</code>、等原生模块。</li><li><code>./mod</code>或者<code>../mod</code>，尽量使用相当路径。</li><li><code>/mod</code>，绝对路径可能以为环境的不同导致路径出现错误。</li><li><code>mod</code>，非原生的文件模块</li></ul></li></ul></li><li><code>module.exports</code>导出模块<ul><li>可以导出函数名</li><li>可以导出对象名</li><li>可以导出变量名</li></ul></li></ul></li></ul><p><img src="./modules.jpg" alt=""></p><blockquote><p>nodeJS函数</p></blockquote><h3 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h3><ul><li>在javascript中，一个函数可以作为另一个函数的参数</li><li>也可以直接把函数体做为参数（匿名函数）。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Fun = <span class="function"><span class="keyword">function</span>(<span class="params">art</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'函数名作为参数'</span> + art);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">someFunction, value</span>) </span>&#123;</span><br><span class="line">  someFunction(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(Fun, <span class="string">'Hello'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数体作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun1</span>(<span class="params">value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">    callback(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fun1(<span class="string">'Hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data + <span class="string">'函数体作为参数'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>nodeJS路由</p></blockquote><ul><li>路由：在<code>nodeJS</code>中就是拿到响应的<code>url</code>路径，返回对应的资源。</li><li>实现一个最简单的<code>nodeJS服务器路由</code>机制</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequst</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> path = url.parse(request.url, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 传递参数给路由函数</span></span><br><span class="line">    route(path, response);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.createServer(onRequst).listen(<span class="number">9000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务已经启动'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">path, response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (path.pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    response.write(<span class="string">'hello world'</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.pathname === <span class="string">'/index/home'</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    response.end(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        code: <span class="number">200</span>,</span><br><span class="line">        query:path.query</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    response.end(<span class="string">'路由错误'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.route = route;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">'./http'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line">server.start(router.route);</span><br></pre></td></tr></table></figure><ul><li>nodeJS处理<code>get</code>请求<ul><li>get请求参数都在链接上，直接进行url地址参数解析就能获取全部参数</li></ul></li><li>nodeJS处理<code>post</code>请求<ul><li>post请求参数都包含在请求体内，需要进行解析才能拿到数据</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (path.pathname == <span class="string">'/post'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">let</span> post = <span class="string">''</span>;</span><br><span class="line">      request.on(<span class="string">'data'</span>, (chunk) =&gt; &#123;</span><br><span class="line">        post += chunk + <span class="string">'1'</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">console</span>.log(post);</span><br><span class="line"></span><br><span class="line">      request.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">        post = querstring.parse(post);</span><br><span class="line">        response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        response.end(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">          data: &#123;</span><br><span class="line">            code: <span class="number">200</span>,</span><br><span class="line">            post: post,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>nodeJS全局对象</p></blockquote><ul><li>全局对象是<code>global</code>，所有的全局变量（除了global本身以外）都是<code>global</code>对象的属性</li><li>__filename 表示当前正在执行脚本的文件名，他将输出文件的绝对路径，且和命令行所指定的文件名不一定相同。如果在模块中，返回的值一定是模块文件的路径。</li><li>__dirname 表示当前正在执行脚本的文件目录。</li><li>setTimeout (同javascript)根据给定的时间，只执行一次指定函数。</li><li>imeout (同javascript)</li><li>setInterval (同javascript)</li><li>clearInterval (同javascript)</li><li>console (同javascript)控制台标准输出<ul><li>log</li><li>info</li><li>error</li><li>waring</li><li>……</li></ul></li><li>process 表示nodeJS进程的状态</li><li>util 提供了一下javascript过于简洁没有封装的功能函数，推荐使用<code>underscore</code>与<code>lodash</code>进行项目开发。<ul><li><a href="https://lodash.com/docs/4.17.11" target="_blank" rel="noopener">lodash</a></li><li><a href="https://underscorejs.org/" target="_blank" rel="noopener">underscorejs</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;nodeJS初始&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是nodeJS&quot;&gt;&lt;a href=&quot;#什么是nodeJS&quot; class=&quot;headerlink&quot; title=&quot;什么是nodeJS&quot;&gt;&lt;/a&gt;什么是nodeJS&lt;/h3&gt;&lt;u
      
    
    </summary>
    
      <category term="前端" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="nodeJS" scheme="18600917746.github.io/tags/nodeJS/"/>
    
  </entry>
  
</feed>
