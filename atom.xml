<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cheng</title>
  
  <subtitle>腹有诗书气自华</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://18600917746.github.io/"/>
  <updated>2019-11-13T10:37:53.248Z</updated>
  <id>https://18600917746.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>史上最全数据库中间件详解</title>
    <link href="https://18600917746.github.io/2019/11/13/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>https://18600917746.github.io/2019/11/13/史上最全数据库中间件详解/</id>
    <published>2019-11-13T09:25:16.000Z</published>
    <updated>2019-11-13T10:37:53.248Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>导读：本文详细介绍了中间件，主要从数据库拆分过程及挑战、主流数据库中间件设计方案、读写分离核心要点、分库分表核心要点展开说明。</p></blockquote><h2 id="1-数据库拆分过程及挑战"><a href="#1-数据库拆分过程及挑战" class="headerlink" title="1. 数据库拆分过程及挑战"></a>1. 数据库拆分过程及挑战</h2><blockquote><p>互联网当下的数据库拆分过程基本遵循的顺序是：垂直拆分、读写分离、分库分表(水平拆分)。每个拆分过程都能解决业务上的一些问题，但同时也面临了一些挑战。</p></blockquote><h3 id="1-1-垂直拆分"><a href="#1-1-垂直拆分" class="headerlink" title="1.1 垂直拆分"></a>1.1 垂直拆分</h3><p>对于一个刚上线的互联网项目来说，由于前期活跃用户数量并不多，并发量也相对较小，所以此时企业一般都会选择将所有数据存放在一个数据库 中进行访问操作。举例来说，对于一个电商系统，其用户模块和产品模块的表刚开始都是位于一个库中。<br><img src="./分表垂直拆分.png" alt=""></p><p>其中：user、useraccount表属于用户模块，productcategory、product表属于产品模块。</p><p>刚开始，可能公司的技术团队规模比较小，所有的数据都位于一个库中。随着公司业务的发展，技术团队人员也得到了扩张，划分为不同的技术小组，不同的小组负责不同的业务模块。例如A小组负责用户模块，B小组负责产品模块。此时数据库也迎来了第一次拆分：垂直拆分。</p><p>这里的垂直拆分，指的是将一个包含了很多表的数据库，根据表的功能的不同，拆分为多个小的数据库，每个库包含部分表。下图演示将上面提到的db_eshop库，拆分为db_user库和db_product库。<br><img src="./垂直拆分.jpeg" alt=""></p><p>通常来说，垂直拆分，都是根据业务来对一个库中的表进行拆分的。关于垂直拆分，还有另一种说法，将一个包含了很多字段的大表拆分为多个小表，每个表包含部分字段，这种情况在实际开发中基本很少遇到。</p><p>垂直拆分的另一个典型应用场景是服务化(SOA)改造。在服务化的背景下，除了业务上需要进行拆分，底层的存储也需要进行隔离。垂直拆分会使得单个用户请求的响应时间变长，原因在于，在单体应用的场景下，所有的业务都可以在一个节点内部完成，而垂直拆分之后，通常会需要进行RPC调用。然后虽然单个请求的响应时间增加了，但是整个服务的吞吐量确会大大的增加。</p><h3 id="1-2-读写分离"><a href="#1-2-读写分离" class="headerlink" title="1.2 读写分离"></a>1.2 读写分离</h3><p>随着业务的不断发展，用户数量和并发量不断上升。这时如果仅靠单个数据库实例来支撑所有访问压力,几乎是在 自寻死路 。以产品库为例，可能库中包含了几万种商品，并且每天新增几十种，而产品库每天的访问了可能有几亿甚至几十亿次。数据库读的压力太大，单台mysql实例扛不住，此时大部分 Mysql DBA 就会将数据库设置成 读写分离状态 。也就是一个 Master 节点(主库)对应多个 Salve 节点(从库)。可以将slave节点的数据理解为master节点数据的全量备份。<br><img src="./读写分离备份.jpeg" alt=""></p><p>master节点接收用户的写请求，并写入到本地二进制文件(binary log)中。slave通过一个I/O线程与Master建立连接，发送binlog dump指令。Master会将binlog数据推送给slave，slave将接收到的binlog保存到本地的中继日志(relay log)中，最后，slave通过另一个线程SQL thread应用本地的relay log，将数据同步到slave库中。</p><p>关于mysql主从复制，内部包含很多细节。例如binlog 格式分为statement、row和mixed，binlog同步方式又可以划分为：异步、半同步和同步。复制可以基于binlogFile+position，也可以基于GTID。通常，这些都是DBA负责维护的，业务RD无感知。</p><p>在DBA将mysql配置成主从复制集群的背景下，开发同学所需要做的工作是：当更新数据时，应用将数据写入master主库，主库将数据同步给多个slave从库。当查询数据时，应用选择某个slave节点读取数据。</p><p><img src="./读写分离.jpeg" alt=""></p><h4 id="1-2-1-读写分离的优点"><a href="#1-2-1-读写分离的优点" class="headerlink" title="1.2.1 读写分离的优点"></a>1.2.1 读写分离的优点</h4><p>这样通过配置多个slave节点，可以有效的避免过大的访问量对单个库造成的压力。</p><h4 id="1-2-2-读写分离的挑战"><a href="#1-2-2-读写分离的挑战" class="headerlink" title="1.2.2 读写分离的挑战"></a>1.2.2 读写分离的挑战</h4><p>对于DBA而言，多了很多集群运维工作<br>例如集群搭建、主从切换、从库扩容、缩容等。例如master配置了多个slave节点，如果其中某个slave节点挂了，那么之后的读请求，我们应用将其转发到正常工作的slave节点上。另外，如果新增了slave节点，应用也应该感知到，可以将读请求转发到新的slave节点上。</p><p>对于开发人员而言<br>基本读写分离功能：对sql类型进行判断，如果是select等读请求，就走从库，如果是insert、update、delete等写请求，就走主库。<br>主从数据同步延迟问题：因为数据是从master节点通过网络同步给多个slave节点，因此必然存在延迟。因此有可能出现我们在master节点中已经插入了数据，但是从slave节点却读取不到的问题。对于一些强一致性的业务场景，要求插入后必须能读取到，因此对于这种情况，我们需要提供一种方式，让读请求也可以走主库，而主库上的数据必然是最新的。<br>事务问题：如果一个事务中同时包含了读请求(如select)和写请求(如insert)，如果读请求走从库，写请求走主库，由于跨了多个库，那么本地事务已经无法控制，属于分布式事务的范畴。而分布式事务非常复杂且效率较低。因此对于读写分离，目前主流的做法是，事务中的所有sql统一都走主库，由于只涉及到一个库，本地事务就可以搞定。<br>感知集群信息变更：如果访问的数据库集群信息变更了，例如主从切换了，写流量就要到新的主库上；又例如增加了从库数量，流量需要可以打到新的从库上；又或者某个从库延迟或者失败率比较高，应该将这个从库进行隔离，读流量尽量打到正常的从库上</p><h3 id="1-3-分库分表"><a href="#1-3-分库分表" class="headerlink" title="1.3 分库分表"></a>1.3 分库分表</h3><blockquote><p>经过垂直分区后的 Master/Salve 模式完全可以承受住难以想象的高并发访问操作，但是否可以永远 高枕无忧 了？答案是否定的，一旦业务表中的数据量大了，从维护和性能角度来看，无论是任何的 CRUD 操作，对于数据库而言都是一件极其耗费资源的事情。即便设置了索引， 仍然无法掩盖因为数据量过大从而导致的数据库性能下降的事实 ，因此这个时候 Mysql DBA 或许就该对数据库进行 水平分区 （sharding，即分库分表 ）。经过水平分区设置后的业务表，必然能够将原本一张表维护的海量数据分配给 N 个子表进行存储和维护。</p></blockquote><blockquote><blockquote><p>水平分表从具体实现上又可以分为3种：只分表、只分库、分库分表，下图展示了这三种情况：<br><img src="./分库、分表、分库分表.jpeg" alt=""></p><ul><li>只分表：</li></ul></blockquote></blockquote><p>将db库中的user表拆分为2个分表，user_0和user_1，这两个表还位于同一个库中。适用场景：如果库中的多个表中只有某张表或者少数表数据量过大，那么只需要针对这些表进行拆分，其他表保持不变。</p><ul><li>只分库：</li></ul><p>将db库拆分为db_0和db_1两个库，同时在db_0和db_1库中各自新建一个user表，db_0.user表和db_1.user表中各自只存原来的db.user表中的部分数据。</p><ul><li>分库分表：</li></ul><p>将db库拆分为db_0和db_1两个库，db_0中包含user_0、user_1两个分表，db_1中包含user_2、user_3两个分表。下图演示了在分库分表的情况下，数据是如何拆分的：假设db库的user表中原来有4000W条数据，现在将db库拆分为2个分库db_0和db_1，user表拆分为user_0、user_1、user_2、user_3四个分表，每个分表存储1000W条数据。</p><p><img src="./分库分表.png" alt=""></p><h4 id="1-3-1-分库分表的好处"><a href="#1-3-1-分库分表的好处" class="headerlink" title="1.3.1 分库分表的好处"></a>1.3.1 分库分表的好处</h4><p>如果说读写分离实现了数据库读能力的水平扩展，那么分库分表就是实现了写能力的水平扩展。</p><p>存储能力的水平扩展<br>在读写分离的情况下，每个集群中的master和slave基本上数据是完全一致的，从存储能力来说，在存在海量数据的情况下，可能由于磁盘空间的限制，无法存储所有的数据。而在分库分表的情况下，我们可以搭建多个mysql主从复制集群，每个集群只存储部分分片的数据，实现存储能力的水平扩展。</p><p>写能力的水平扩展<br>在读写分离的情况下，由于每个集群只有一个master，所有的写操作压力都集中在这一个节点上，在写入并发非常高的情况下，这里会成为整个系统的瓶颈。</p><p>而在分库分表的情况下，每个分片所属的集群都有一个master节点，都可以执行写入操作，实现写能力的水平扩展。此外减小建立索引开销，降低写操作的锁操作耗时等，都会带来很多显然的好处。</p><h4 id="1-3-2-分库分表的挑战"><a href="#1-3-2-分库分表的挑战" class="headerlink" title="1.3.2 分库分表的挑战"></a>1.3.2 分库分表的挑战</h4><p>分库分表的挑战主要体现在4个方面：基本的数据库增删改功能，分布式id，分布式事务，动态扩容，下面逐一进行讲述。</p><h5 id="挑战1：基本的数据库增删改功能"><a href="#挑战1：基本的数据库增删改功能" class="headerlink" title="挑战1：基本的数据库增删改功能"></a>挑战1：基本的数据库增删改功能</h5><p>对于开发人员而言，虽然分库分表的，但是其还是希望能和单库单表那样的去操作数据库。例如我们要批量插入四条用户记录，并且希望根据用户的id字段，确定这条记录插入哪个库的哪张表。例如1号记录插入user1表，2号记录插入user2表，3号记录插入user3表，4号记录插入user0表，以此类推。sql如下所示：</p><p>insertintouser(id,name) values(1,”tianshouzhi”),(2,”huhuamin”), (3,”wanghanao”),(4,”luyang”)</p><p>这样的sql明显是无法执行的，因为我们已经对库和表进行了拆分,这种sql语法只能操作mysql的单个库和单个表。所以必须将sql改成4条如下所示，然后分别到每个库上去执行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">insertintouser0(id,name) values(4,”luyang”)</span><br><span class="line"></span><br><span class="line">insertintouser1(id,name) values(1,”tianshouzhi”)</span><br><span class="line"></span><br><span class="line">insertintouser2(id,name) values(2,”huhuamin”)</span><br><span class="line"></span><br><span class="line">insertintouser3(id,name) values(3,”wanghanao”)</span><br></pre></td></tr></table></figure></p><p>具体流程可以用下图进行描述：</p><p><img src="./分库分表.jpeg" alt=""></p><p>解释如下：</p><p>sql解析：首先对sql进行解析，得到需要插入的四条记录的id字段的值分别为1,2,3,4<br>sql路由：sql路由包括库路由和表路由。库路由用于确定这条记录应该插入哪个库，表路由用于确定这条记录应该插入哪个表。<br>sql改写：因为一条记录只能插入到一个库中，而上述批量插入的语法将会在 每个库中都插入四条记录，明显是不合适的，因此需要对sql进行改写，每个库只插入一条记录。<br>sql执行：一条sql经过改写后变成了多条sql，为了提升效率应该并发的到不同的库上去执行，而不是按照顺序逐一执行<br>结果集合并：每个sql执行之后，都会有一个执行结果，我们需要对分库分表的结果集进行合并，从而得到一个完整的结果。</p><h5 id="挑战2：分布式id"><a href="#挑战2：分布式id" class="headerlink" title="挑战2：分布式id"></a>挑战2：分布式id</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在分库分表后，我们不能再使用mysql的自增主键。因为在插入记录的时候，不同的库生成的记录的自增id可能会出现冲突。因此需要有一个全局的id生成器。目前分布式id有很多中方案，其中一个比较轻量级的方案是twitter的snowflake算法。</span><br></pre></td></tr></table></figure><h5 id="挑战3：分布式事务"><a href="#挑战3：分布式事务" class="headerlink" title="挑战3：分布式事务"></a>挑战3：分布式事务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分布式事务是分库分表绕不过去的一个坎，因为涉及到了同时更新多个分片数据。例如上面的批量插入记录到四个不同的库，如何保证要么同时成功，要么同时失败。关于分布式事务，mysql支持XA事务，但是效率较低。柔性事务是目前比较主流的方案，柔性事务包括：最大努力通知型、可靠消息最终一致性方案以及TCC两阶段提交。但是无论XA事务还是柔性事务，实现起来都是非常复杂的。</span><br></pre></td></tr></table></figure><h5 id="挑战4：动态扩容"><a href="#挑战4：动态扩容" class="headerlink" title="挑战4：动态扩容"></a>挑战4：动态扩容</h5><p>动态扩容指的是增加分库分表的数量。例如原来的user表拆分到2个库的四张表上。现在我们希望将分库的数量变为4个，分表的数量变为8个。这种情况下一般要伴随着数据迁移。例如在4张表的情况下，id为7的记录，7%4=3，因此这条记录位于user3这张表上。但是现在分表的数量变为了8个，而7%8=0，而user0这张表上根本就没有id=7的这条记录，因此如果不进行数据迁移的话，就会出现记录找不到的情况。本教程后面将会介绍一种在动态扩容时不需要进行数据迁移的方案。</p><h3 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h3><p>在上面我们已经看到了，读写分离和分库分表带来的好处，但是也面临了极大的挑战。如果由业务开发人员来完成这些工作，难度比较大。因此就有一些公司专门来做一些数据库中间件，对业务开发人员屏蔽底层的繁琐细节，开发人员使用了这些中间件后，不论是读写分离还是分库分表，都可以像操作单库单表那样去操作。</p><p>下面，我们将介绍 主流的数据库中间件设计方案和实现。</p><h2 id="2-主流数据库中间件设计方案"><a href="#2-主流数据库中间件设计方案" class="headerlink" title="2 主流数据库中间件设计方案"></a>2 主流数据库中间件设计方案</h2><p>数据库中间件的主要作用是向应用程序开发人员屏蔽读写分离和分库分表面临的挑战，并隐藏底层实现细节，使得开发人员可以像操作单库单表那样去操作数据。在介绍分库分表的主流设计方案前，我们首先回顾一下在单个库的情况下，应用的架构，可以用下图进行描述：</p><p><img src="./主流数据库中间件设计方案.png" alt=""></p><p>可以看到在操作单库单表的情况下，我们是直接在应用中通过数据连接池(connection pool)与数据库建立连接，进行读写操作。而对于读写分离和分库分表，应用都要操作多个数据库实例，在这种情况下，我们就需要使用到数据库中间件。</p><h3 id="2-1-设计方案"><a href="#2-1-设计方案" class="headerlink" title="2.1 设计方案"></a>2.1 设计方案</h3><p>典型的数据库中间件设计方案有2种：proxy、smart-client。下图演示了这两种方案的架构：</p><p><img src="./代理设计方案.jpeg" alt=""></p><p>可以看到不论是proxy还是smart-client，底层都操作了多个数据库实例。不论是分库分表，还是读写分离，都是在数据库中间件层面对业务开发同学进行屏蔽。</p><h4 id="2-1-1-proxy模式"><a href="#2-1-1-proxy模式" class="headerlink" title="2.1.1 proxy模式"></a>2.1.1 proxy模式</h4><p>我们独立部署一个代理服务，这个代理服务背后管理多个数据库实例。而在应用中，我们通过一个普通的数据源(c3p0、druid、dbcp等)与代理服务器建立连接，所有的sql操作语句都是发送给这个代理，由这个代理去操作底层数据库，得到结果并返回给应用。在这种方案下，分库分表和读写分离的逻辑对开发人员是完全透明的。</p><p>优点：</p><p>1 多语言支持。也就是说，不论你用的php、java或是其他语言，都可以支持。以mysql数据库为例，如果proxy本身实现了mysql的通信协议，那么你可以就将其看成一个mysql 服务器。mysql官方团队为不同语言提供了不同的客户端却动，如java语言的mysql-connector-java，python语言的mysql-connector-python等等。因此不同语言的开发者都可以使用mysql官方提供的对应的驱动来与这个代理服务器建通信。</p><p>2 对业务开发同学透明。由于可以把proxy当成mysql服务器，理论上业务同学不需要进行太多代码改造，既可以完成接入。</p><p>缺点：</p><p>1 实现复杂。因为proxy需要实现被代理的数据库server端的通信协议，实现难度较大。通常我们看到一些proxy模式的数据库中间件，实际上只能代理某一种数据库，如mysql。几乎没有数据库中间件，可以同时代理多种数据库(sqlserver、PostgreSQL、Oracle)。</p><p>2 proxy本身需要保证高可用。由于应用本来是直接访问数据库，现在改成了访问proxy，意味着proxy必须保证高可用。否则，数据库没有宕机，proxy挂了，导致数据库无法正常访问，就尴尬了。</p><p>3 租户隔离。可能有多个应用访问proxy代理的底层数据库，必然会对proxy自身的内存、网络、cpu等产生资源竞争，proxy需要需要具备隔离的能力。</p><h4 id="2-1-2-smart-client模式"><a href="#2-1-2-smart-client模式" class="headerlink" title="2.1.2 smart-client模式"></a>2.1.2 smart-client模式</h4><p>业务代码需要进行一些改造，引入支持读写分离或者分库分表的功能的sdk，这个就是我们的smart-client。通常smart-client是在连接池或者driver的基础上进行了一层封装，smart-client内部与不同的库建立连接。应用程序产生的sql交给smart-client进行处理，其内部对sql进行必要的操作，例如在读写分离情况下，选择走从库还是主库；在分库分表的情况下，进行sql解析、sql改写等操作，然后路由到不同的分库，将得到的结果进行合并，返回给应用。</p><p>优点：</p><p>1 实现简单。proxy需要实现数据库的服务端协议，但是smart-client不需要实现客户端通信协议。原因在于，大多数据数据库厂商已经针对不同的语言提供了相应的数据库驱动driver，例如mysql针对java语言提供了mysql-connector-java驱动，针对python提供了mysql-connector-python驱动，客户端的通信协议已经在driver层面做过了。因此smart-client模式的中间件，通常只需要在此基础上进行封装即可。</p><p>2 天然去中心化。smart-client的方式，由于本身以sdk的方式，被应用直接引入，随着应用部署到不同的节点上，且直连数据库，中间不需要有代理层。因此相较于proxy而言，除了网络资源之外，基本上不存在任何其他资源的竞争，也不需要考虑高可用的问题。只要应用的节点没有全部宕机，就可以访问数据库。(这里的高可用是相比proxy而言，数据库本身的高可用还是需要保证的)</p><p>缺点：</p><p>1 通常仅支持某一种语言。例如tddl、zebra、sharding-jdbc都是使用java语言开发，因此对于使用其他语言的用户，就无法使用这些中间件。如果其他语言要使用，那么就要开发多语言客户端。</p><p>2 版本升级困难。因为应用使用数据源代理就是引入一个jar包的依赖，在有多个应用都对某个版本的jar包产生依赖时，一旦这个版本有bug，所有的应用都需要升级。而数据库代理升级则相对容易，因为服务是单独部署的，只要升级这个代理服务器，所有连接到这个代理的应用自然也就相当于都升级了。</p><h3 id="2-2-业界产品"><a href="#2-2-业界产品" class="headerlink" title="2.2 业界产品"></a>2.2 业界产品</h3><p>无论是proxy，还是smart-client，二者的作用都是类似的。以下列出了这两种方案目前已有的实现以及各自的优缺点：</p><p><img src="./proxy%20方案.jpeg" alt=""></p><blockquote><blockquote><p>proxy实现</p></blockquote></blockquote><p>目前的已有的实现方案有：</p><ul><li>阿里巴巴开源的cobar</li><li>阿里云上的drds</li><li>mycat团队在cobar基础上开发的mycat</li><li>mysql官方提供的mysql-proxy</li><li>奇虎360在mysql-proxy基础开发的atlas(只支持分表，不支持分库)</li><li>当当网开源的sharing-sphere</li><li>目前除了mycat、sharing-sphere，其他几个开源项目基本已经没有维护，sharing-sphere前一段时间已经进去了Apache 软件基金会孵化器。</li></ul><blockquote><blockquote><p>smart-client实现</p></blockquote></blockquote><p>目前的实现方案有：</p><ul><li>阿里巴巴开源的tddl，已很久没维护</li><li>大众点评开源的zebra，大众点评的zebra开源版本代码已经很久没有更新，不过最近美团上市，重新开源大量内部新的功能特性，并计划长期维持。</li><li>当当网开源的sharding-jdbc，目前算是做的比较好的，文档资料比较全。和sharding-sphere一起进入了Apache孵化器。</li><li>蚂蚁金服的zal</li></ul><h2 id="3-读写分离核心要点"><a href="#3-读写分离核心要点" class="headerlink" title="3 读写分离核心要点"></a>3 读写分离核心要点</h2><h3 id="3-1-基本路由功能"><a href="#3-1-基本路由功能" class="headerlink" title="3.1 基本路由功能"></a>3.1 基本路由功能</h3><p>基本路由路功能主要是解决，在读写分离的情况下，如何实现一些基本的路由功能，这个过程通常可以通过下图进行描述：</p><p><img src="./基本路由功能.jpeg" alt=""></p><h4 id="3-1-1-sql类型判断"><a href="#3-1-1-sql类型判断" class="headerlink" title="3.1.1 sql类型判断"></a>3.1.1 sql类型判断</h4><p>主要是判断出来sql是读还是写sql，将读sql到从库上去执行，写sql去主库上执行</p><ul><li><p>write语句：insert、update、delete、create、alter、truncate…</p></li><li><p>query语句：select、show、desc、explain…</p></li></ul><h4 id="3-1-2-强制走主库"><a href="#3-1-2-强制走主库" class="headerlink" title="3.1.2 强制走主库"></a>3.1.2 强制走主库</h4><p>有的时候，对于一些强一致性的场景，需要写入后，必须能读取到数据。由于主从同步存在延迟，可能会出现主库写入，而从库查不到的情况。这次时候，我们需要使用强制走主库的功能。具体实现上有2种方案：hint 或API</p><p>hint，就是开发人员在sql上做一些特殊的标记，数据库中间件识别到这个标记，就知道这个sql需要走主库，如：</p><p>/<em>master</em>/select* fromtable_xx</p><p>这里的/<em>master</em>/就是一个hint，表示需要走主库。不同的数据库中间件强制走主库的hint可能不同，例如zebra的hint为/<em>zebra:w+</em>/，hint到底是什么样是无所谓的，其作用仅仅就是一个标记而已。之所以将hint写在/<em>…</em>/中，是因为这是标准的sql注释语法。即使数据库中间件未能识别这个hint，也不会导致sql语法错误。</p><p>api：主要是通过代码的方式来添加sql走主库的标识，hint通常只能加在某个sql上。如果我们希望多个sql同时都走主库，也不希望加hint，则可以通过api的方式，其内部主要利用语言的thread local线程上下文特性，如：</p><p>ForceMasterHelper.forceMaster //…执行多条sqlForceMasterHelper.clear</p><p>在api标识范围内执行的sql，都会走主库。具体API到底应该是什么样，如何使用，也是由相应的数据库中间件来决定的。</p><p>特别的，对于一些特殊的sql，例如 select last_insert_id；或者select @@identity等，这类sql总是需要走主库。这些sql是要获得最后一个插入记录的id，插入操作只可能发生在主库上。</p><h3 id="3-2-从库路由策略"><a href="#3-2-从库路由策略" class="headerlink" title="3.2 从库路由策略"></a>3.2 从库路由策略</h3><p>通常在一个集群中，只会有一个master，但是有多个slave。当判断是一个读请求时，如何判断选择哪个slave呢？</p><p>一些简单的选择策略包括：</p><ul><li>随机选择(random)</li><li>按照权重进行选择(weight)</li><li>或者轮训(round-robin)</li></ul><p>特别的，对于一些跨IDC(数据中心)部署的数据库集群，通常需要有就近路由的策略，如下图：</p><p><img src="./从库路由策略.jpeg" alt=""></p><p>图中，在IDC2部署了一个master，在IDC1和IDC2各部署了一个slave，应用app部署在IDC1。显然当app接收到一个查询请求时，应该优先查询与其位于同一个数据中心的slave1，而不是跨数据中心去查询slave2，这就是就近路由的概念。</p><p>当然一个数据中心内，可能会部署多个slave，也需要进行选择，因此就近路由通常和一些基本的路由策略结合使用。另外，对于就近路由，通常也会有一个层级，例如同机房、同中心、同区域、跨区域等。</p><h3 id="3-3-HA、Scalable相关"><a href="#3-3-HA、Scalable相关" class="headerlink" title="3.3 HA、Scalable相关"></a>3.3 HA、Scalable相关</h3><p>数据库中间件除了需要具备上述提到的读写分离功能来访问底层的数据库集群。也需要一套支持高可用、动态扩展的体系：</p><p>从HA的角度来说，例如主库宕机了，那么应该从从库选择一个作为新的主库。开源的MHA可以帮助我们完成这个事；然而，MHA只能在主库宕机的情况下，完成主从切换，对于仅仅是一个从库宕机的情况下，MHA通常是无能为力的。因此，通常都会在MHA进行改造，使其支持更多的HA能力要求。<br>从Scalable角度来说，例如读qps实在太高，需要加一些从库，来分担读流量。<br>事实上，无论是HA，还是Scalable，对于数据库中间件(不论是proxy或者smart-client)来说，只是配置信息发生了变更。</p><p>因此，通常我们会将所有的配置变更信息写到一个配置中心，然后配置心中监听这个配置的变更，例如主从切换，只需要把最新的主从信息设置到配置中心；增加从库，把新从库ip、port等信息放到配置中心。数据库中间件通过对这些配置信息变更进行监听，当配置发生变更时，实时的应用最新的配置信息即可。</p><p>因此，一个简化的数据库中间件的高可用架构通常如下所示：</p><p><img src="./数据库中间件高可用架构.jpeg" alt=""></p><p>监控服务对集群进行监控，当发生变更时，将变更的信息push到配置中心中，数据库中间件(proxy或smart-client)接收到配置变更，应用最新的配置。而整个过程，对于业务代码基本是无感知的。</p><p>对于配置中心的选择，有很多，例如百度的disconf、阿里的diamond、点评开源的lion、携程开源的apollo等，也可以使用etcd、consul。通常如果没有历史包袱的话，建议使用携程开源的apollo。</p><p>特别需要注意的一点是，通常监控服务监控到集群信息变更，推送到配置中心，再到数据库中间件，必然存在一些延迟。对于一些场景，例如主从切换，没有办法做到彻底的业务无感知。当然，对于多个从库中，某个从库宕机的情况下，是可以做到业务无感知的。例如，某个从库失败，数据库中间件，自动从其他正常的从库进行重试。</p><p>另外，上图中的HA方案强依赖于配置中心，如果某个数据库集群上建立了很多库，这个集群发生变更时，将会存在大量的配置信息需要推送。又或者，如果数据库集群是多机房部署的，在某个机房整体宕机的情况下(例如光纤被挖断了，或者机房宕机演练)，也会存在大量的配置信息需要推送。如果配置中心，推送有延迟，业务会有非常明显的感知。</p><p>因此，通常我们会在客户端进行一些轻量级的HA保障。例如，根据数据库返回异常的sqlstate和vendor code，判断异常的严重级别，确定数据库实例能否正常提供服务，如果不能正常提供服务，则自动将其进行隔离，并启动异步线程进行检测数据库实例是否恢复。</p><p>最后，很多数据库中间件，也会提供一些限流和降级的功能，计算sql的唯一标识(有些称之为sql指纹)，对于一些烂sql，导致数据库压力变大的情况，可以实时的进行拦截，直接抛出异常，不让这些sql打到后端数据库上去。</p><h2 id="4-分库分表核心要点"><a href="#4-分库分表核心要点" class="headerlink" title="4 分库分表核心要点"></a>4 分库分表核心要点</h2><p>从业务开发的角度来说，其不关心底层是否是分库分表了，其还是希望想操作单个数据库实例那样编写sql，那么数据库中间件就需要对其屏蔽所有底层的复杂逻辑。</p><p>下图演示了一个数据库表(user表)在分库分表情况下，数据库中间件内部是如何执行一个批量插入sql的：</p><p><img src="./分库分表.jpeg" alt=""></p><p>数据库中间件主要对应用屏蔽了以下过程：</p><p>sql解析：首先对sql进行解析，得到抽象语法树，从语法树中得到一些关键sql信息<br>sql路由：sql路由包括库路由和表路由。库路由用于确定这条记录应该操作哪个分库，表路由用于确定这条记录应该操作哪个分表。<br>sql改写：将sql改写成正确的执行方式。例如，对于一个批量插入sql，同时插入4条记录。但实际上用户希望4个记录分表存储到一个分表中，那么就要对sql进行改写成4条sql，每个sql都只能插入1条记录。<br>sql执行：一条sql经过改写后可能变成了多条sql，为了提升效率应该并发的去执行，而不是按照顺序逐一执行<br>结果集合并：每个sql执行之后，都会有一个执行结果，我们需要对分库分表的结果集进行合并，从而得到一个完整的结果。</p><h3 id="4-1-SQL解析"><a href="#4-1-SQL解析" class="headerlink" title="4.1 SQL解析"></a>4.1 SQL解析</h3><p>用户执行只是一条sql，并传入相关参数。数据库中间件内部需要通过sql解析器，对sql进行解析。可以将sql解析，类比为xml解析，xml解析的最终结果是得到一个document对象，而sql解析最终得到一个抽象语法树(AST)。通过这个语法树，我们可以很简单的获取到sql的一些执行，例如当前执行的sql类型，查询了那些字段，数据库表名，where条件，sql的参数等一系列信息。</p><p>通常来说，对于sql解析，内部需要经过词法(lex)解析和语法(Syntax)解析两个阶段，最终得到一个语法树。</p><p><img src="./sql解析.jpeg" alt=""></p><p>SQL解析器的内部实现原理对业务同学是屏蔽的，业务同学也感知不到。一些数据库中间件采用了第三方开源的sql解析器，也有一些自研sql解析器。例如mycat、zebra采用的都是druid解析器，shard-jdbc一开始也用的是druid解析器，后面自研了解析器。目前较为流行的sql解析器包括：</p><p>FoundationDB SQL Parser<br>Jsqlparser<br>Druid SQL Parser<br>其中，其中Fdbparser和jsqlparser都是基于javacc实现的。</p><p>mycat团队曾经做过一个性能测试，druid解析器的解析性能通常能达到基于javacc生成的sql解析器10~20倍。本人也进行过类似的测试，得出的结论基本一致。</p><p>如何对比不同的sql解析器的好坏呢？主要是考虑以下两点：</p><p>解析性能：druid最好。</p><p>druid采用的是预测分析法，它只需要从字符的第一个到最后一个遍历一遍，就同时完成了词法解析和语法解析，语法树也已经构造完成。</p><p>数据库方言：druid支持的最多。</p><p>SQL-92、SQL-99等都是标准SQL，mysql/oracle/pg/sqlserver/odps等都是方言，sql-parser需要针对不同的方言进行特别处理。Druid的sql parser是目前支持各种数据语法最完备的SQL Parser。</p><p>注：这里说的仅仅是基于Java实现的SQL解析器，druid是比较好的。大部分同学可能知道druid是一个为监控而生的连接池，事实上，druid另一大特性，就是它的SQL解析器。很多开源的数据库中间件，例如zebra、sharding-jdbc等，都使用了druid解析器。(sharding-jdbc后来自研了解析器)。虽然SQL解析是druid的一大亮点，不过github上也因为SQL解析的bug，收到了不少issue。</p><h3 id="4-2-SQL路由"><a href="#4-2-SQL路由" class="headerlink" title="4.2 SQL路由"></a>4.2 SQL路由</h3><p>路由规则是分库分表的基础，其规定了数据应该按照怎样的规则路由到不同的分库分表中。对于一个数据库中间件来说，通常是支持用户自定义任何路由规则的。路由规则本质上是一个脚本表达式，数据库中间件通过内置的脚本引擎对表达式进行计算，确定最终要操作哪些分库、分表。常见的路由规则包括哈希取模，按照日期等。</p><p>下图展示了user表进行分库分表后(2个分库，每个分库2个分表)，并如何根据id进行路由的规则：</p><p><img src="./sql路由.jpeg" alt=""></p><p>路由分则分为：</p><p>库规则：用于确定到哪一个分库<br>表规则：用于确定到哪一个分表<br>在上例中，我们使用id来作为计算分表、分表，因此把id字段就称之为路由字段，或者分区字段。</p><p>需要注意的是，不管执行的是INSERT、UPDATE、DELETE、SELECT语句，SQL中都应该包含这个路由字段。否则，对于插入语句来说，就不知道插入到哪个分库或者分表；对于UPDATE、DELETE、SELECT语句而言，则更为严重，因为不知道操作哪个分库分表，意味着必须要对所有分表都进行操作。SELECT聚合所有分表的内容，极容易内存溢出，UPDATE、DELETE更新、删除所有的记录，非常容易误更新、删除数据。因此，一些数据库中间件，对于SQL可能有一些限制，例如UPDATE、DELETE必须要带上分区字段，或者指定过滤条件。</p><h3 id="4-3-SQL改写"><a href="#4-3-SQL改写" class="headerlink" title="4.3 SQL改写"></a>4.3 SQL改写</h3><p>前面已经介绍过，如一个批量插入语句，如果记录要插入到不同的分库分表中，那么就需要对SQL进行改写。例如，将以下SQL</p><p>insertintouser(id,name) values(1,”tianshouzhi”),(2,”huhuamin”), (3,”wanghanao”),(4,”luyang”)</p><p>改写为：</p><p>insertintouser_1(id,name) values(1,”tianshouzhi”)insertintouser_2(id,name) values(2,”huhuamin”)insertintouser_3(id,name) values(3,”wanghanao”)insertintouser_0(id,name) values(4,”luyang”)</p><p>这里只是一个简单的案例，通常对于INSERT、UPDATE、DELETE等，改写相对简单。比较复杂的是SELECT语句的改写，对于一些复杂的SELECT语句，改写过程中会进行一些优化，例如将子查询改成JOIN，过滤条件下推等。因为SQL改写很复杂，所以很多数据库中间件并不支持复杂的SQL(通常有一个支持的SQL)，只能支持一些简单的OLTP场景。</p><p>当然也有一些数据库中间件，不满足于只支持OLTP，在迈向OLAP的方向上进行了更多的努力。例如阿里的TDDL、蚂蚁的Zdal、大众点评的zebra，都引入了apache calcite，尝试对复杂的查询SQL(例如嵌套子查询，join等)进行支持，通过过滤条件下推，流式读取，并结合RBO(基于规则的优化)、CBO(基于代价的优化)来对一些简单的OLAP场景进行支持。</p><h3 id="4-4-SQL执行"><a href="#4-4-SQL执行" class="headerlink" title="4.4 SQL执行"></a>4.4 SQL执行</h3><p>当经过SQL改写阶段后，会产生多个SQL，需要到不同的分片上去执行，通常我们会使用一个线程池，将每个SQL包装成一个任务，提交到线程池里面并发的去执行，以提升效率。</p><p><img src="./sql执行.jpeg" alt=""></p><p>这些执行的SQL中，如果有一个失败，则整体失败，返回异常给业务代码。</p><h3 id="4-5-结果集合并"><a href="#4-5-结果集合并" class="headerlink" title="4.5 结果集合并"></a>4.5 结果集合并</h3><p>结果集合并，是数据库中间件的一大难点，需要case by case的分析，主要是考虑实现的复杂度，以及执行的效率问题，对于一些复杂的SQL，可能并不支持。例如：</p><p>对于查询条件：大部分中间件都支持=、IN作为查询条件，且可以作为分区字段。但是对于NIT IN、BETWEEN…AND、LIKE,NOT LIKE等，只能作为普通的查询条件，因为根据这些条件，无法记录到底是在哪个分库或者分表，只能全表扫描。</p><p>聚合函数：大部分中间件都支持MAX、MIN、COUNT、SUM，但是对于AVG可能只是部分支持。另外，如果是函数嵌套、分组(GROUP BY)聚合，可能也有一些数据库中间件不支持。</p><p>子查询：分为FROM部分的子查询和WHERE部分的子查询。大部分中对于子查询的支持都是非常有限，例如语法上兼容，但是无法识别子查询中的分区字段，或者要求子查询的表名必须与外部查询表名相同，又或者只能支持一级嵌套子查询。</p><p>JOIN：对于JOIN的支持通常很复杂，如果做不到过滤条件下推和流式读取，在中间件层面，基本无法对JOIN进行支持，因为不可能把两个表的所有分表，全部拿到内存中来进行JOIN，内存早就崩了。当然也有一些取巧的办法，一个是Binding Table，另外一个是小表广播(见后文)。</p><p>分页排序：通常中间件都是支持ORDER BY和LIMIT的。但是在分库分表的情况下，分页的效率较低。例如对于limit 100，10 ORDER BY id。表示按照id排序，从第100个位置开始取10条记录。那么，大部分数据库中间件实际上是要从每个分表都查询110(100+10)条记录，拿到内存中进行重新排序，然后取出10条。假设有10个分表，那么实际上要查询1100条记录，而最终只过滤出了10记录。因此，在分页的情况下，通常建议使用”where id &gt; ? limit 10”的方式来进行查询，应用记住每次查询的最大的记录id。之后查询时，每个分表只需要从这个id之后，取10条记录即可，而不是取offset + rows条记录。</p><p>关于JOIN的特属说明：</p><p>Binding Table：</p><p>适用于两个表之间存在关联关系，路由规则相同。例如，有user表和user_account表，由于user_account与user表强关联，我们可以将这两个表的路由规则设置为完全一样，那么对于某个特定用户的信息，其所在的user分表和user_account分表必然唯一同一个分库下，后缀名相同的分表中。在join时，某一个分库内的join，就可以拿到这个用户以及账号的完整信息，而不需要进行跨库join，这样就不需要把用户的数据库拿到内存中来进行join。</p><p><img src="./中间件聚合.jpeg" alt=""></p><p>小表广播：</p><p>小表广播通常是某一个表的数据量比较少， 例如部门表department。另外一个表数据量比较大，例如user。此时user需要进行分库分表，但是department不需要进行分库分表。为了达到JOIN的目的，我们可以将 department表在每个分库内都实时同步一份完整的数据。这样，在JOIN的时候，数据库中间件只需要将分库JOIN的结果进行简单合并即可。</p><p>下图演示了小表广播的流程，用户在更新department表时，总是更新分库db0的department表，同步组件将变更信息同步到其他分库中。</p><p><img src="./小表广播.jpeg" alt=""></p><p>注：图中的同步组件指的是一般是伪装成数据库的从库，解析源库binlog，插入目标库。有一些开源的组件，如canal、puma可以实现这个功能，当然这些组件的应用场景非常广泛，不仅限于此。笔者曾写过一个系列的canal源码解析文章，目前完成了大部分。</p><h3 id="4-6-二级索引"><a href="#4-6-二级索引" class="headerlink" title="4.6 二级索引"></a>4.6 二级索引</h3><p>通常情况下，分库分表的时候，分区字段只有一个。例如对于用户表user，按照user_id字段进行分区，那么之后查询某个用户的信息，只能根据user_id作为分区字段。使用其他字段，则需要扫描所有分表，效率很低。但是又有根据其他字段查询某个用户信息的需求，例如根据手机号phone_id。</p><p>此时，我们可以将按照user_id插入的数据，进行一份全量拷贝。通过同步组件，重新按照phone_id插入到另一个分库分表集群中，这个集群就成为二级索引，或者叫辅维度同步。此后，对于根据user_id的操作，就在原来的分库分表集群中进行操作；根据phone_id的操作，就到二级索引集群中去进行操作。</p><p>需要注意的是，对于更新操作，只能操作原集群，二级索引集群只能执行查询操作。原集群的增量数据变更信息，实时的通过同步组件，同步到二级索引集群中。</p><p><img src="./二级索引.jpeg" alt=""></p><p>注：这是一个很常见的面试题。阿里的一些面试官，比较喜欢问。一些面试者，可能自己想到了这个方案，因为考虑到这样比较浪费资源，就自行排除了。事实上，这点资源相对于满足业务需求来说，都不是事。</p><h3 id="4-7-分布式id生成器"><a href="#4-7-分布式id生成器" class="headerlink" title="4.7 分布式id生成器"></a>4.7 分布式id生成器</h3><p>在分库分表的情况下，数据库的自增主键已经无法使用。所以要使用一个分布式的id生成器。分布式事务id生成器要满足以下条件：唯一、趋势递增(减少落库时的索引开销)、高性能、高可用。</p><p>目前主流的分布式id生成方案都有第三方组件依赖，如：</p><ul><li>基于zk</li><li>基于mysql</li><li>基于缓存<br>twitter的snowflake算法是一个完全去中心化的分布式id算法，但是限制workid最多能有1024，也就是说，应用规模不能超过1024。虽然可以进行细微的调整，但是总是有数量的限制。</li></ul><p>另外，美团之前在github开源了一个leaf组件，是用于生成分布式id的，感兴趣的读者可以研究一下。</p><p>这里提出一种支持动态扩容的去中心化分布式id生成方案，此方案的优势，除了保证唯一、趋势递增，没有第三方依赖，支持存储的动态扩容之外，还具有以下优势：</p><p>支持按照时间范围查询，或者 时间范围+ip查询，可以直接走主键索引；<br>每秒的最大序列id就是某个ip的qps等<br>12位日期+10位IP+6位序列ID+4位数据库扩展位</p><p>其中：</p><p>12位日期：格式为yyMMddHHmmss，意味着本方案的id生成策略可以使用到2099年，把时间部分前置，从而保证趋势递增。</p><p>10位ip：利用ip to decimal算法将12位的ip转为10进制数字。通过ip地址，来保证全局唯一。如果ip地址被回收重复利用了，也不用担心id的唯一性，因为日期部分还在变化。</p><p>6位序列id：意味着每秒最多支持生成100百万个id(0~999999)。不足6位前置补0，如000123。</p><p>4位数据库扩展位：为了实现不迁移数据的情况下，实现动态扩容，其中2位表示DB，2位表示TB，最多可扩容到10000张表。假设每张表存储1000万数据，则总共可以支持存储1000亿条数据。</p><p>关于数据库扩展位实现动态扩容图解：</p><p><img src="./数据库扩容图.jpeg" alt=""></p><p>首先明确一点，路由策略始终根据数据库最后四位，确定某一条记录要到哪个分库的哪个分表中。例如xxxx0001，意味着这条记录肯定是在00分库的01分表上。</p><p>接着，就要在id的生成策略上做文章。</p><p>假设初始状态为两个分库db_00,db_01，每个分库里面有10张分表，tb_00~tb_09。此时，业务要保证生成id的时候，始终保证db的两位在00~01之间，tb的两位始终在00~09之间。路由策略根据这些id，可以找到正确的分库分表。</p><p>现在需要扩容到10个分库，每个分表10个分表。那么DBA首先将新增的分库：db_02~db_09创建好，每个分库里面再创建10个分表：tb_01~tb_09。业务同学在此基础上，将id生成策略改成：db的两位在00~09之间，tb的两位规则维持不变(只是分库数变了，每个分库的分表数没变)。而由于路由从策略是根据最后四位确定到哪个分库，哪个分表，当这些新的分库分表扩展位id出现时，自然可以插入到新的分库分表中。也就实现了动态扩容，而无需迁移数据。</p><p>当然，新的分库分表中，一开始数据是没有数据的，所以数据是不均匀的，可以调整id扩展位中db和tb生成某个值的概率，使得落到新的分库分表中的概率相对大一点点(不宜太大)，等到数据均匀后，再重新调整成完全随机。</p><p>此方案的核心思想是，预分配未来的可能使用到的最大资源数量。通常，100个分库，每个分库100张分表，能满足绝大部分应用的数据存储。如果100个分库都在不同的mysql实例上，假设每个mysql实例都是4T的磁盘，那么可以存储400T的数据，基本上可以满足绝大部分业务的需求。</p><p>当然，这个方案不完美。如果超过这个值，这种方案可能就不可行了。然而，通常一个技术方案，可以保证在5~10年之间不需要在架构上做变动，应该就算的上一个好方案了。如果你追求的是完美的方案，可能类似于TIDB这种可以实现自动扩容的数据库产品更适合，不过目前来说，TIDB等类似产品还是无法取代传统的关系型数据库的。说不定等到5~10年后，这些产品更成熟了，你再迁移过去也不迟。</p><h3 id="4-7-分布式事务"><a href="#4-7-分布式事务" class="headerlink" title="4.7 分布式事务"></a>4.7 分布式事务</h3><p>在分库分表的情况下，由于操作多个分库，此时就涉及到分布式事务。例如执行一个批量插入SQL，如果记录要插入到不同的分库中，就无法保证一致性。因此，通常情况下，数据库中间件，只会保证单个分库的事务，也就是说，业务方在创建一个事务的时候，必须要保证事务中的所有操作，必须最终都在一个分库中执行。</p><p>事实上，在微服务的架构下，事务的问题更加复杂，如下图</p><p><img src="./微服务.jpeg" alt=""></p><p>Service A在执行某个操作时，需要操作数据库，同时调用Service B和Service C，Service B底层操作的数据库是分库分表的，Service C也要操作数据库。</p><p>这种场景下，保证事务的一致性就非常麻烦。一些常用的一致性算法如：paxios协议、raft协议也无法解决这个问题，因为这些协议都是资源层面的一致性。在微服务架构下，已经将事务的一致性上升到了业务的层面。</p><p>如果仅仅考虑分库分表，一些同学可能会想到XA，但是性能很差，对数据库的版本也有要求，例如必须使用mysql 5.7，官方还建议将事务隔离级别设置为串行化，这是无法容忍的。</p><p>由于分布式事务的应用场景，并不是仅仅分库分表，因此通常都是会有一个专门的团队来做分布式事务，并不一定是数据库中间件团队来做。例如，sharding-jdbc就使用了华为开源的一套微服务架构解决方案service comb中的saga组件，来实现分布式事务最终一致性。阿里也有类似的组件，在内部叫TXC，在阿里云上叫GTS，最近开源到了GitHub上叫fescar（Fast &amp; Easy Commit And Rollback)。蚂蚁金服也有类似的组件，叫DTX，支持FMT模式和TCC模式。其中FMT模式就类似于TXC。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;导读：本文详细介绍了中间件，主要从数据库拆分过程及挑战、主流数据库中间件设计方案、读写分离核心要点、分库分表核心要点展开说明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-数据库拆分过程及挑战&quot;&gt;&lt;a href=&quot;#1-数据库拆分过程及
      
    
    </summary>
    
      <category term="茶余饭后" scheme="https://18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
      <category term="数据库" scheme="https://18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://18600917746.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>hello-nginx</title>
    <link href="https://18600917746.github.io/2019/10/16/hello-nginx/"/>
    <id>https://18600917746.github.io/2019/10/16/hello-nginx/</id>
    <published>2019-10-16T10:48:40.000Z</published>
    <updated>2019-10-16T11:31:43.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="是一个高性能的HTTP和反向代理web服务器"><a href="#是一个高性能的HTTP和反向代理web服务器" class="headerlink" title="是一个高性能的HTTP和反向代理web服务器"></a>是一个高性能的HTTP和反向代理web服务器</h3><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>海量并发 （2W-4W）</li><li>内存消耗少</li><li>免费商用化</li><li>配置简单</li></ul><h3 id="nginx-conf-默认配置"><a href="#nginx-conf-默认配置" class="headerlink" title="nginx.conf 默认配置"></a><code>nginx.conf</code> 默认配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">user nginx;</span><br><span class="line"><span class="comment"># 进程数   一般根据内核设置</span></span><br><span class="line">worker_processes auto;   </span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大并发数</span></span><br><span class="line">events &#123;</span><br><span class="line">        worker_connections 768;</span><br><span class="line">        <span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># 请求类型映射表</span></span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    <span class="comment"># 是否开启压缩</span></span><br><span class="line">    gzip on;</span><br><span class="line">    <span class="comment"># 引用外部配置表</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;是一个高性能的HTTP和反向代理web服务器&quot;&gt;&lt;a href=&quot;#是一个高性能的HTTP和反向代理web服务器&quot; class=&quot;headerlink&quot; title=&quot;是一个高性能的HTTP和反向代理web服务器&quot;&gt;&lt;/a&gt;是一个高性能的HTTP和反向代理web服
      
    
    </summary>
    
      <category term="后端" scheme="https://18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="nginx" scheme="https://18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/nginx/"/>
    
    
      <category term="Nginx" scheme="https://18600917746.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>js排序</title>
    <link href="https://18600917746.github.io/2019/10/05/js%E6%8E%92%E5%BA%8F/"/>
    <id>https://18600917746.github.io/2019/10/05/js排序/</id>
    <published>2019-10-05T04:03:02.000Z</published>
    <updated>2019-10-05T08:45:50.082Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>冒泡排序</p><ul><li>ES5<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">          [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>ES6<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>插入排序</p><ul><li>ES5<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> preIndex = i - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">var</span> current = arr[i]</span><br><span class="line">      <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; c) &#123;</span><br><span class="line">        arr[preIndex + <span class="number">1</span>] = arr[preIndex];</span><br><span class="line">        preIndex--;</span><br><span class="line">      &#125;</span><br><span class="line">      arr[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>ES6<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>快速排序</p><ul><li>ES5<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">var</span> left = [], right = [];</span><br><span class="line">  <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> numValue = arr.splice(num, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; numValue) &#123;</span><br><span class="line">      right.push(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      left.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...quickSort(left), numValue, ...quickSort(right)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>ES6<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>希尔排序</p><ul><li>ES5<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length,</span><br><span class="line">    temp,</span><br><span class="line">    gap = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 动态定义间隔序列，也可以手动定义，如 gap = 5；</span></span><br><span class="line">  <span class="keyword">while</span> (gap &lt; len / <span class="number">5</span>) &#123;</span><br><span class="line">    gap = gap * <span class="number">5</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (gap; gap &gt; <span class="number">0</span>; gap = <span class="built_in">Math</span>.floor(gap / <span class="number">5</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">      temp = arr[i];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap) &#123;</span><br><span class="line">        arr[j + gap] = arr[j];</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j + gap] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>ES6<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>归并排序</p><ul><li>ES5<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;  <span class="comment">//采用自上而下的递归方法</span></span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>),</span><br><span class="line">    left = arr.slice(<span class="number">0</span>, middle),</span><br><span class="line">    right = arr.slice(middle);</span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">    <span class="comment">// 不断比较left和right数组的第一项，小的取出存入res</span></span><br><span class="line">    left[<span class="number">0</span>] &lt; right[<span class="number">0</span>] ? result.push(left.shift()) : result.push(right.shift());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.concat(left, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>ES6<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;冒泡排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES5&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="茶余饭后" scheme="https://18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
      <category term="排序" scheme="https://18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="js排序" scheme="https://18600917746.github.io/tags/js%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 版本以及内容</title>
    <link href="https://18600917746.github.io/2019/10/04/ECMAscript%E7%89%88%E6%9C%AC%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AE%B9/"/>
    <id>https://18600917746.github.io/2019/10/04/ECMAscript版本以及内容/</id>
    <published>2019-10-04T06:17:46.000Z</published>
    <updated>2019-10-04T06:22:01.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><ul><li>ECMAscript每年都会更新一版.</li><li>ECMAScript的命名是根据数字排序，从1开始: ES1, ES2, ES3, ES4, ES5</li><li>新版本 (从2015年起)ES命名是根据年份来算的: ES2015（ES6）, ES2016（ES7）, ES2017（ES8）,ES2018（ES9）,ES2019（ES10）</li><li>ECMAScript 是一个标准. JavaScript 是一种流行的ES标准的 实施语言. 其他的一些实施标准语言有: SpiderMonkey, V8, 和 ActionScript.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ECMAscript每年都会更新一版.&lt;/li&gt;
&lt;li&gt;ECMAScript的命名是根据数字排序，从1开始: ES1, ES2
      
    
    </summary>
    
      <category term="茶余饭后" scheme="https://18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
      <category term="文章" scheme="https://18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="ES6版本" scheme="https://18600917746.github.io/tags/ES6%E7%89%88%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>vue-Components</title>
    <link href="https://18600917746.github.io/2019/08/20/vue-Components/"/>
    <id>https://18600917746.github.io/2019/08/20/vue-Components/</id>
    <published>2019-08-20T07:45:51.000Z</published>
    <updated>2019-08-22T08:52:33.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自定义名称组件"><a href="#自定义名称组件" class="headerlink" title="自定义名称组件"></a>自定义名称组件</h3><ul><li>使用 <code>Vue.component</code> 自定义名称，注册全局组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'com1'</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">       &lt;div&gt;组件全局定义&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;com1&gt;&lt;/com1&gt;</span><br></pre></td></tr></table></figure><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><ul><li>使用 <code>template</code> 标签，使用 <code>:is</code> 判别要显示的模板</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;template :is=&quot;temName&quot;&gt;&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="组件-插槽-slot"><a href="#组件-插槽-slot" class="headerlink" title="组件 插槽 slot"></a>组件 插槽 <code>slot</code></h3><blockquote><p>默认插槽使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'com1'</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">       &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;组件头部&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;组件头部&lt;/h3&gt;</span></span><br><span class="line"><span class="string">       &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    template: `</span><br><span class="line">       &lt;template is=&quot;com1&quot;&gt;</span><br><span class="line">           &lt;div&gt;这是要替换组件内 slot 后显示的内容&lt;/div&gt;</span><br><span class="line">       &lt;/template&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>具名插槽使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'com1'</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">       &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;slot name="title"&gt;组件头部&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;组件头部&lt;/h3&gt;</span></span><br><span class="line"><span class="string">       &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    template: `</span><br><span class="line">       &lt;com1&gt;</span><br><span class="line">           &lt;template slot=&quot;title&quot;&gt;这是具名插槽的头部&lt;/template&gt;</span><br><span class="line">           &lt;div&gt;这是要替换组件内 slot 后显示的内容&lt;/div&gt;</span><br><span class="line">       &lt;/com1&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="组件传参"><a href="#组件传参" class="headerlink" title="组件传参"></a>组件传参</h3><blockquote><p>父组件 传递 子组件</p></blockquote><ul><li>没有使用 <code>v-bind</code> 或 <code>:</code> 绑定，传递的参数都是字符传</li><li>使用 <code>v-bind</code> 或 <code>:</code> 绑定，会根据实际数据类型传递</li><li>子组件接收时，使用 <code>props</code> 接收</li><li>总结：父组件通过props向下传递数据给子组件。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Users</span> <span class="attr">v-bind:users</span>=<span class="string">"users"</span>&gt;</span><span class="tag">&lt;/<span class="name">Users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Users <span class="keyword">from</span> <span class="string">"./components/Users"</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'App'</span>,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            users: [<span class="string">"Henry"</span>, <span class="string">"Bucky"</span>, <span class="string">"Emily"</span>]</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">        Users</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"user in users"</span>&gt;</span>&#123;&#123;user&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'Users'</span>,</span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="undefined">        users: &#123;</span></span><br><span class="line"><span class="javascript">            type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">            required: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>子组件 传递 父组件（通过事件形式）</p></blockquote><ul><li>子组件使用 <code>$emit</code> 发布自定义函数名，父组件使用 <code>v-on</code> 或 <code>@</code> 绑定自定义函数名，进行参数传递。</li><li>总结：子组件通过events给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">"changeTitle"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//绑定一个点击事件</span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'app-header'</span>,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            title: <span class="string">"Vue.js Demo"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        changeTitle() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$emit(<span class="string">"titleChanged"</span>, <span class="string">"子向父组件传值"</span>);<span class="comment">//自定义事件  传递值“子向父组件传值”</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">app-header</span> <span class="attr">v-on:titleChanged</span>=<span class="string">"updateTitle"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span>//与子组件 titleChanged 自定义事件名保持一致</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./components/Header"</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'App'</span>,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            title: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// updateTitle($event) 接受传递过来的参数</span></span></span><br><span class="line"><span class="undefined">        updateTitle(e) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.title = e;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">"app-header"</span>: Header,</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>隔代组件 向下传递数据  $attrs/$listeners</p></blockquote><ul><li>多级组件嵌套需要传递数据时，通常使用的方法是通过vuex</li><li>但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理未免有点大材小用</li><li>使用 <code>inheritAttrs</code> 禁止 属性自动挂载到 <code>props</code> 上</li><li>使用 <code>v-bind:$attrs</code> 或 <code>:$attrs</code> 传递下一级</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 第一级</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>浪里行舟<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-com1</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:foo</span>=<span class="string">"foo"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:boo</span>=<span class="string">"boo"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:coo</span>=<span class="string">"coo"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">child-com1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> childCom1 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./childCom1.vue"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123; childCom1 &#125;,</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      foo: <span class="string">"第一级"</span>,</span></span><br><span class="line"><span class="javascript">      boo: <span class="string">"第二级"</span>,</span></span><br><span class="line"><span class="javascript">      coo: <span class="string">"第三级"</span></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 第二级</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">class</span>=<span class="string">"border"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>foo: &#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>childCom1的$attrs: &#123;&#123; $attrs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-com2</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-com2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> childCom2 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./childCom2.vue"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    childCom2</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  inheritAttrs: <span class="literal">false</span>, <span class="comment">// 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span></span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="javascript">    foo: <span class="built_in">String</span> <span class="comment">// foo作为props属性绑定</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  created() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs); <span class="comment">// &#123; boo: "第二级",coo: "第三级" &#125;</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 第三级</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>boo: &#123;&#123; boo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>childCom2: &#123;&#123; $attrs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-com3</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-com3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> childCom3 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./childCom3.vue"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    childCom3</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  inheritAttrs: <span class="literal">false</span>, <span class="comment">// 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span></span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="javascript">    boo: <span class="built_in">String</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  created() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs); <span class="comment">// &#123; coo: "第三级" &#125;</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件触发传递"><a href="#事件触发传递" class="headerlink" title="事件触发传递"></a>事件触发传递</h3><blockquote><p>$emit/$on（Bus）</p></blockquote><ul><li>通过一个空的Vue实例作为中央事件总线，执行组件使用 <code>$emit</code> 发布事件名,被执行组件使用 <code>$on</code> 执行自定义事件名事件</li><li>$on 监听了自定义事件 fun-a，因为有时不确定何时会触发事件，一般会在 mounted 或 created 钩子中来监听</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建空的 Vue 实例</span></span><br><span class="line"><span class="keyword">var</span> Event=<span class="keyword">new</span> Vue();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Event;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 执行组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"fun_on()"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">app-header"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./components/Header"</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Event <span class="keyword">from</span> <span class="string">"./utils/Bus"</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'App'</span>,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            title: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        fun_on() &#123;</span></span><br><span class="line"><span class="javascript">           Event.$emit(<span class="string">'fun-a'</span>,<span class="keyword">this</span>.title);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">"app-header"</span>: Header,</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 被执行组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> &gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Event <span class="keyword">from</span> <span class="string">"./utils/Bus"</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'app-header'</span>,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            title: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    mounted()&#123;</span></span><br><span class="line"><span class="javascript">        Event.$on(<span class="string">'fun-a'</span>,data=&gt;&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件通讯-总结"><a href="#组件通讯-总结" class="headerlink" title="组件通讯 总结"></a>组件通讯 总结</h3><ul><li>父子通信： 父向子传递数据是通过 props，子向父是通过 events（$emit）；通过父链 / 子链也可以通信（$parent / $children）；ref 也可以访问组件实例；provide / inject API；$attrs/$listeners</li><li>兄弟通信： Bus；Vuex</li><li>跨级通信： Bus；Vuex；provide / inject API、$attrs/$listeners</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;自定义名称组件&quot;&gt;&lt;a href=&quot;#自定义名称组件&quot; class=&quot;headerlink&quot; title=&quot;自定义名称组件&quot;&gt;&lt;/a&gt;自定义名称组件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Vue.component&lt;/code&gt; 自定义名称，注册全局组件&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
      <category term="Components" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/vue/Components/"/>
    
    
      <category term="vue" scheme="https://18600917746.github.io/tags/vue/"/>
    
      <category term="vue-Components" scheme="https://18600917746.github.io/tags/vue-Components/"/>
    
  </entry>
  
  <entry>
    <title>vue-Ajax</title>
    <link href="https://18600917746.github.io/2019/08/20/vue-Ajax/"/>
    <id>https://18600917746.github.io/2019/08/20/vue-Ajax/</id>
    <published>2019-08-20T07:03:31.000Z</published>
    <updated>2019-08-21T10:12:50.802Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用-fetch-formData"><a href="#使用-fetch-formData" class="headerlink" title="使用 fetch formData"></a>使用 <code>fetch</code> <code>formData</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">ref</span>=<span class="string">"form1"</span> @<span class="attr">click.pervent</span>=<span class="string">"fn_submit()"</span> <span class="attr">action</span>=<span class="string">"a.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"b"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">        结果：&#123;&#123;result&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        result: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    method: &#123;</span><br><span class="line">        <span class="keyword">async</span> fn_submit() &#123;</span><br><span class="line">            <span class="keyword">let</span> form = <span class="keyword">this</span>.$refs[<span class="string">'form1'</span>];</span><br><span class="line">            <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line">            <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(form.action, &#123;</span><br><span class="line">                method: form.method,</span><br><span class="line">                body: formData</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">let</span> result = res.json();</span><br><span class="line">            <span class="keyword">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用-axios"><a href="#使用-axios" class="headerlink" title="使用 axios"></a>使用 <code>axios</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"提交"</span> @<span class="attr">click</span>=<span class="string">"fn_submit()"</span>&gt;</span></span><br><span class="line">        结果：&#123;&#123;result&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;stringify&#125; <span class="keyword">from</span> <span class="string">'querystring'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axios = <span class="keyword">new</span> Axios.create(&#123;</span><br><span class="line">    transformRequest: [</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> stringify(data);</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        a: <span class="number">0</span>,</span><br><span class="line">        b: <span class="number">0</span>,</span><br><span class="line">        result: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    method: &#123;</span><br><span class="line">        <span class="keyword">async</span> fn_submit() &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">                url: <span class="string">'a.php'</span>,</span><br><span class="line">                method: <span class="string">'post'</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    a: <span class="keyword">this</span>.a,</span><br><span class="line">                    b: <span class="keyword">this</span>.b</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">this</span>.result = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vue2-0-vue-cli-使用-axios"><a href="#vue2-0-vue-cli-使用-axios" class="headerlink" title="vue2.0 vue-cli 使用 axios"></a>vue2.0 vue-cli 使用 axios</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios,Axios);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    <span class="keyword">async</span> create()&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> <span class="keyword">this</span>.axios.get();</span><br><span class="line">        <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> <span class="keyword">this</span>.$http.get();</span><br><span class="line">        <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> Vue.axios.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vue2-0-vue-cli-使用-vue-resource"><a href="#vue2-0-vue-cli-使用-vue-resource" class="headerlink" title="vue2.0 vue-cli 使用 vue-resource"></a>vue2.0 vue-cli 使用 vue-resource</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueResource);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    <span class="keyword">async</span> create()&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> <span class="keyword">this</span>.$http.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vue2-0-vue-cli-使用-fetch"><a href="#vue2-0-vue-cli-使用-fetch" class="headerlink" title="vue2.0 vue-cli 使用 fetch"></a>vue2.0 vue-cli 使用 fetch</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    <span class="keyword">async</span> create()&#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">let</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用-fetch-formData&quot;&gt;&lt;a href=&quot;#使用-fetch-formData&quot; class=&quot;headerlink&quot; title=&quot;使用 fetch formData&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;fetch&lt;/code&gt; &lt;code&gt;formDat
      
    
    </summary>
    
      <category term="前端" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
      <category term="Ajax" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/vue/Ajax/"/>
    
    
      <category term="vue" scheme="https://18600917746.github.io/tags/vue/"/>
    
      <category term="vue-Ajax" scheme="https://18600917746.github.io/tags/vue-Ajax/"/>
    
  </entry>
  
  <entry>
    <title>vue-Router</title>
    <link href="https://18600917746.github.io/2019/08/19/vue-Router/"/>
    <id>https://18600917746.github.io/2019/08/19/vue-Router/</id>
    <published>2019-08-19T05:47:16.000Z</published>
    <updated>2019-08-20T07:48:02.733Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-监听-router"><a href="#vue-监听-router" class="headerlink" title="vue 监听 router"></a>vue 监听 router</h3><blockquote><p>1、使用 <code>watch</code> 监听<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue-监听-router&quot;&gt;&lt;a href=&quot;#vue-监听-router&quot; class=&quot;headerlink&quot; title=&quot;vue 监听 router&quot;&gt;&lt;/a&gt;vue 监听 router&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1、使用 &lt;code&gt;wa
      
    
    </summary>
    
      <category term="前端" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
      <category term="Router" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/vue/Router/"/>
    
    
      <category term="vue" scheme="https://18600917746.github.io/tags/vue/"/>
    
      <category term="vue-Router" scheme="https://18600917746.github.io/tags/vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>hello-webpack</title>
    <link href="https://18600917746.github.io/2019/08/02/hello-webpack/"/>
    <id>https://18600917746.github.io/2019/08/02/hello-webpack/</id>
    <published>2019-08-02T07:43:20.000Z</published>
    <updated>2019-08-05T10:19:18.640Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack-项目安装-【不建议全局安装，会锁定版本】"><a href="#webpack-项目安装-【不建议全局安装，会锁定版本】" class="headerlink" title="webpack 项目安装 【不建议全局安装，会锁定版本】"></a>webpack 项目安装 【不建议全局安装，会锁定版本】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br><span class="line">// 4.0+ 需要安装</span><br><span class="line">npm install --save-dev webpack-cli</span><br></pre></td></tr></table></figure><h3 id="webpack-功能"><a href="#webpack-功能" class="headerlink" title="webpack 功能"></a>webpack 功能</h3><ul><li>压缩</li><li>打包</li><li>多文件编译 - loader</li><li>脚手架</li><li>生成版本编写</li></ul><h3 id="webpack-config-js-配置文件编写"><a href="#webpack-config-js-配置文件编写" class="headerlink" title="webpack.config.js 配置文件编写"></a>webpack.config.js 配置文件编写</h3><ul><li>单入口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: <span class="string">'./js/js.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>多入口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: <span class="string">'./js/js.js'</span>,</span><br><span class="line">        admin: <span class="string">'./js/admin.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="loader-处理-js-以外的文件"><a href="#loader-处理-js-以外的文件" class="headerlink" title="loader 处理 js 以外的文件"></a>loader 处理 js 以外的文件</h3><ul><li>css-loader    处理css</li><li>style-loader  </li><li>file-loader   读取并输出文件</li><li>url-loader    读取并输出 base64</li><li>postcss-loader    【自动添加前缀】<h3 id="loader-举例说明"><a href="#loader-举例说明" class="headerlink" title="loader 举例说明"></a>loader 举例说明</h3></li><li>处理 css</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: <span class="string">'./js/js.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'postcss-loader'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>处理图片</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: <span class="string">'./js/js.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)$/i</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        outputPath:  <span class="string">'images/'</span>,</span><br><span class="line">                        limit: <span class="number">20</span>*<span class="number">1024</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>处理 less</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: <span class="string">'./js/js.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less/i</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>处理 es6 + </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: <span class="string">'./js/js.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.jsx?/i</span>,</span><br><span class="line">                exclude:<span class="regexp">/node_modules/</span>,</span><br><span class="line">                use:&#123;</span><br><span class="line">                    loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                    options:&#123;</span><br><span class="line">                        presets:[<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>开启 source-map</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: <span class="string">'./js/js.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.jsx?/i</span>,</span><br><span class="line">                exclude:<span class="regexp">/node_modules/</span>,</span><br><span class="line">                use:&#123;</span><br><span class="line">                    loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                    options:&#123;</span><br><span class="line">                        presets:[<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'source-map'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>开启 热更新</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack webpack-cli webpack-dev-server</span><br></pre></td></tr></table></figure><ul><li>启动 eslint</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: <span class="string">'./js/js.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js/i</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'eslint-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>.eslinrc</code></pre><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"parserOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"ecmaVersion"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"sourceType"</span>: <span class="string">"module"</span>,</span><br><span class="line">    <span class="attr">"ecmaFeatures"</span>: &#123;</span><br><span class="line">      <span class="attr">"jsx"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"indent"</span>: [<span class="string">"error"</span>,<span class="number">2</span>],</span><br><span class="line">    <span class="attr">"linebreak-style"</span>: [<span class="string">"error"</span>,<span class="string">"windows"</span>],</span><br><span class="line">    <span class="attr">"quotes"</span>: [<span class="string">"error"</span>,<span class="string">"double"</span>],</span><br><span class="line">    <span class="attr">"semi"</span>: [<span class="string">"error"</span>,<span class="string">"always"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;webpack-项目安装-【不建议全局安装，会锁定版本】&quot;&gt;&lt;a href=&quot;#webpack-项目安装-【不建议全局安装，会锁定版本】&quot; class=&quot;headerlink&quot; title=&quot;webpack 项目安装 【不建议全局安装，会锁定版本】&quot;&gt;&lt;/a&gt;we
      
    
    </summary>
    
      <category term="hello" scheme="https://18600917746.github.io/categories/hello/"/>
    
      <category term="webpack" scheme="https://18600917746.github.io/categories/hello/webpack/"/>
    
    
      <category term="webpack" scheme="https://18600917746.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>hello-gulp</title>
    <link href="https://18600917746.github.io/2019/07/31/hello-gulp/"/>
    <id>https://18600917746.github.io/2019/07/31/hello-gulp/</id>
    <published>2019-07-31T09:42:56.000Z</published>
    <updated>2019-10-06T04:02:07.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-gulp"><a href="#安装-gulp" class="headerlink" title="安装 gulp"></a>安装 <code>gulp</code></h2><ul><li><p>全局启动器安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g gulp</span><br></pre></td></tr></table></figure></li><li><p>项目依赖安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i gulp</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置文件创建"><a href="#配置文件创建" class="headerlink" title="配置文件创建"></a>配置文件创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch gulpfile.js</span><br></pre></td></tr></table></figure><h2 id="内置-api"><a href="#内置-api" class="headerlink" title="内置 api"></a>内置 api</h2><ul><li>src 入口路径</li><li>pipe 管道</li><li>task 任务定义</li><li>watch 实时检测</li><li>dest 出口路径<h2 id="添加中间件"><a href="#添加中间件" class="headerlink" title="添加中间件"></a>添加中间件</h2></li><li>[压缩js]<ul><li>gulp-uglify </li></ul></li><li>[汇总js并重命名]<ul><li>gulp-concat </li></ul></li><li>[文件重命名]<ul><li>gulp-rename </li></ul></li><li>[ES6编译]<ul><li>gulp-babel</li><li>@babel/core</li><li>@babel/preset-env</li></ul></li><li>[开发调试]<ul><li>gulp-sourcemaps</li></ul></li><li>[css文件压缩]<ul><li>gulp-cssmin</li></ul></li><li>[images压缩-渐进式加载]<ul><li>gulp-imagemin</li></ul></li><li>[浏览器自动刷新]<ul><li>gulp-livereload<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i gulp-uglify -D</span><br><span class="line">npm i gulp-concat -D</span><br><span class="line">npm i gulp-rename -D</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="配置文件基本演示"><a href="#配置文件基本演示" class="headerlink" title="配置文件基本演示"></a>配置文件基本演示</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"><span class="keyword">const</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>);</span><br><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="keyword">const</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line">gulp.task(<span class="string">'js'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./src/js/**/*.js'</span>])</span><br><span class="line">    .pipe(sourcemaps.init())</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets:[<span class="string">'@babel/env'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(concat(<span class="string">'bundle.min.js'</span>))</span><br><span class="line">    .pipe(rename(&#123;<span class="attr">suffix</span>:<span class="string">'.min'</span>&#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(sourcemaps.write())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./build/js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./src/css/**/*.css'</span>])</span><br><span class="line">    .pipe(sourcemaps.init())</span><br><span class="line">    .pipe(concat(<span class="string">'style.min.css'</span>))</span><br><span class="line">    .pupe(less())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(sourcemaps.write())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./build/css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'image'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./src/images/**/*.png'</span>,<span class="string">'./src/images/**/*.jpg'</span>,<span class="string">'./src/images/**/*.jpeg'</span>,<span class="string">'./src/images/**/*.gif'</span>])</span><br><span class="line">    .pipe(imagemin([</span><br><span class="line">        imagemin.gifsicle(&#123;<span class="attr">interlaced</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">        imagemin.jpegtran(&#123;<span class="attr">progressive</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">        imagemin.optipng(&#123;<span class="attr">optimizationLevel</span>: <span class="number">5</span>&#125;),</span><br><span class="line">        imagemin.svgo(&#123;</span><br><span class="line">            plugins: [</span><br><span class="line">                &#123;<span class="attr">removeViewBox</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">cleanupIDs</span>: <span class="literal">false</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;) </span><br><span class="line">    ]))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/images'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'js'</span>,<span class="string">'css'</span>,<span class="string">'image'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.watch(<span class="string">'./src/images/*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.run(<span class="string">'image'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  gulp.watch(<span class="string">'./src/css/*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.run(<span class="string">'css'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  gulp.watch(<span class="string">'./src/js/*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.run(<span class="string">'js'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="gulp-4-最新版"><a href="#gulp-4-最新版" class="headerlink" title="gulp 4.+ 最新版"></a>gulp 4.+ 最新版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"><span class="keyword">const</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>);</span><br><span class="line"><span class="keyword">const</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev-dxb'</span>); <span class="comment">// 生成版本号清单</span></span><br><span class="line"><span class="keyword">const</span> revCollector = <span class="built_in">require</span>(<span class="string">'gulp-rev-collector-dxb'</span>); <span class="comment">// 替换成版本号文件</span></span><br><span class="line"><span class="comment">// 生成版本号清单</span></span><br><span class="line">gulp.task(<span class="string">'rev'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src([<span class="string">'./src/js/**'</span>, <span class="string">'./src/css/**'</span>])</span><br><span class="line">.pipe(rev())</span><br><span class="line">.pipe(rev.manifest(&#123;</span><br><span class="line">merge: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line">.pipe(gulp.dest(<span class="string">"./"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加版本号（路径替换） 并压缩</span></span><br><span class="line">gulp.task(<span class="string">'add_version'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">collapseBooleanAttributes: <span class="literal">true</span>,</span><br><span class="line">removeComments: <span class="literal">true</span>,</span><br><span class="line">removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">removeScriptTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">minifyJS: <span class="literal">true</span>,</span><br><span class="line">minifyCSS: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> gulp.src([<span class="string">'./rev-manifest.json'</span>, <span class="string">'./src/*.html'</span>])</span><br><span class="line">.pipe(revCollector()) <span class="comment">// 根据.json文件 执行文件内js/css名的替换</span></span><br><span class="line">.pipe(htmlmin(options))</span><br><span class="line">.pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'js'</span>, () =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src([<span class="string">'./src/js/**/*.js'</span>])</span><br><span class="line">.pipe(sourcemaps.init())</span><br><span class="line">.pipe(babel(&#123;</span><br><span class="line">presets: [<span class="string">'@babel/env'</span>]</span><br><span class="line">&#125;))</span><br><span class="line">.pipe(concat(<span class="string">'index.js'</span>))</span><br><span class="line"><span class="comment">// .pipe(rename(&#123;</span></span><br><span class="line"><span class="comment">// suffix: '.min'</span></span><br><span class="line"><span class="comment">// &#125;))</span></span><br><span class="line">.pipe(uglify())</span><br><span class="line">.pipe(sourcemaps.write())</span><br><span class="line">.pipe(gulp.dest(<span class="string">'./dist/js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css'</span>, () =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src([<span class="string">'./src/css/**/*.css'</span>])</span><br><span class="line">.pipe(sourcemaps.init())</span><br><span class="line">.pipe(concat(<span class="string">'index.css'</span>))</span><br><span class="line">.pipe(less())</span><br><span class="line">.pipe(autoprefixer())</span><br><span class="line">.pipe(cssmin())</span><br><span class="line">.pipe(sourcemaps.write())</span><br><span class="line">.pipe(gulp.dest(<span class="string">'./dist/css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'image'</span>, () =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src([<span class="string">'./src/images/**/*.png'</span>, <span class="string">'./src/images/**/*.jpg'</span>, <span class="string">'./src/images/**/*.jpeg'</span>, <span class="string">'./src/images/**/*.gif'</span>])</span><br><span class="line">.pipe(imagemin([</span><br><span class="line">imagemin.gifsicle(&#123;</span><br><span class="line">interlaced: <span class="literal">true</span></span><br><span class="line">&#125;),</span><br><span class="line">imagemin.jpegtran(&#123;</span><br><span class="line">progressive: <span class="literal">true</span></span><br><span class="line">&#125;),</span><br><span class="line">imagemin.optipng(&#123;</span><br><span class="line">optimizationLevel: <span class="number">6</span></span><br><span class="line">&#125;),</span><br><span class="line">imagemin.svgo(&#123;</span><br><span class="line">plugins: [&#123;</span><br><span class="line">removeViewBox: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">cleanupIDs: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line">]))</span><br><span class="line">.pipe(gulp.dest(<span class="string">'./dist/images'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'all'</span>, gulp.series(gulp.series(<span class="string">'js'</span>, <span class="string">'css'</span>, <span class="string">'image'</span>, gulp.parallel(<span class="string">'rev'</span>)), gulp.parallel(</span><br><span class="line"><span class="string">'add_version'</span>)));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-gulp&quot;&gt;&lt;a href=&quot;#安装-gulp&quot; class=&quot;headerlink&quot; title=&quot;安装 gulp&quot;&gt;&lt;/a&gt;安装 &lt;code&gt;gulp&lt;/code&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局启动器安装&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="前端" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hello" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/hello/"/>
    
    
      <category term="gulp" scheme="https://18600917746.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>hello-java-http</title>
    <link href="https://18600917746.github.io/2019/06/13/hello-java-http/"/>
    <id>https://18600917746.github.io/2019/06/13/hello-java-http/</id>
    <published>2019-06-13T01:58:55.000Z</published>
    <updated>2019-06-13T04:00:18.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、有注解"><a href="#一、有注解" class="headerlink" title="一、有注解"></a>一、有注解</h2><h3 id="1、请求路径参数"><a href="#1、请求路径参数" class="headerlink" title="1、请求路径参数"></a>1、请求路径参数</h3><ul><li>@PathVariable 接收 <code>动态路由</code> </li><li>@RequestParam 接收 <code>查询参数</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/demo/123?name=cheng</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/demo/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> String id, @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">    System.out.println(id); <span class="comment">// 123</span></span><br><span class="line">    System.out.println(name); <span class="comment">// cheng</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Body参数"><a href="#2、Body参数" class="headerlink" title="2、Body参数"></a>2、Body参数</h3><ul><li><p><code>post</code> <code>application/json</code> 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type:<span class="string">'post'</span>,</span><br><span class="line">    url:<span class="string">'/dome1'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        id:<span class="number">1</span>,</span><br><span class="line">        name:<span class="string">'测试'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>@RequestBody 接收 <code>body</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">(@RequestBody Person person)</span> </span>&#123;</span><br><span class="line">    System.out.println(person.toString()); <span class="comment">// id:1;name=测试;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">(@RequestBody Map&lt;String, String&gt; person)</span> </span>&#123;</span><br><span class="line">    System.out.println(person.get(<span class="string">"name"</span>)); <span class="comment">// 测试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestBody 接收 <code>文件</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">(@RequestBody MultiValueMap&lt;String,String&gt;map file)</span> </span>&#123;</span><br><span class="line">    System.out.println(file); <span class="comment">// file[0]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestBody 接收 <code>多文件</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">(@RequestBody MultiValueMap&lt;String,String&gt;map[] file)</span> </span>&#123;</span><br><span class="line">    System.out.println(file); <span class="comment">//  [] </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、-无注解-（一般都会注解）"><a href="#二、-无注解-（一般都会注解）" class="headerlink" title="二、 无注解 （一般都会注解）"></a>二、 无注解 （一般都会注解）</h2><h2 id="三、-获取请求头"><a href="#三、-获取请求头" class="headerlink" title="三、 获取请求头"></a>三、 获取请求头</h2><ul><li>@RequestHeader 获取 <code>请求头</code></li><li>@CookieValue 获取 <code>Cookie</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/demo3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">(@RequestHeader(name = <span class="string">"myHeader"</span>)</span> String myHeader,</span></span><br><span class="line"><span class="function">        @<span class="title">CookieValue</span><span class="params">(name = <span class="string">"myCookie"</span>)</span> String myCookie) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"myHeader="</span> + myHeader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解学习"><a href="#注解学习" class="headerlink" title="注解学习"></a>注解学习</h2><ul><li>@RequestMapping <ul><li>method - 指定的类型</li><li>value - 指定请求的地址</li><li>produces - 指定响应类型</li><li>comsumes - 指定请求类型</li><li>header - 根据请求中的消息头内容缩小请求映射的范围</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/test1"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、有注解&quot;&gt;&lt;a href=&quot;#一、有注解&quot; class=&quot;headerlink&quot; title=&quot;一、有注解&quot;&gt;&lt;/a&gt;一、有注解&lt;/h2&gt;&lt;h3 id=&quot;1、请求路径参数&quot;&gt;&lt;a href=&quot;#1、请求路径参数&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="后端" scheme="https://18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
      <category term="Spring Boot" scheme="https://18600917746.github.io/categories/%E5%90%8E%E7%AB%AF/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="https://18600917746.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://18600917746.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>hello-dart</title>
    <link href="https://18600917746.github.io/2019/06/08/hello-dart/"/>
    <id>https://18600917746.github.io/2019/06/08/hello-dart/</id>
    <published>2019-06-08T14:31:59.000Z</published>
    <updated>2019-06-24T06:05:45.373Z</updated>
    
    <content type="html"><![CDATA[<h3 id="程序主入口"><a href="#程序主入口" class="headerlink" title="程序主入口"></a>程序主入口</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'你好'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dart-的数据类型"><a href="#Dart-的数据类型" class="headerlink" title="Dart 的数据类型"></a>Dart 的数据类型</h3><ul><li>Numbers（数值）<ul><li>int（整型）</li><li>double（浮点）</li></ul></li><li>Strings（字符串）</li><li>Booleans（布尔）</li><li>List（数组）<ul><li>在 Dart 中，数组是列表对象，所以大多数人称为列表</li></ul></li><li>Maps（字典）<ul><li>通常来说，Map 是一个键值对的对象。</li></ul></li></ul><h3 id="Dart-变量定义"><a href="#Dart-变量定义" class="headerlink" title="Dart 变量定义"></a>Dart 变量定义</h3><ul><li>使用 <code>var</code> 定义变量</li><li>使用 <code>数据类型</code> 定义变量</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Str = <span class="string">'使用 var 定义的变量'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> Str = <span class="string">'使用 数据类型 定义的变量'</span>;</span><br><span class="line"><span class="built_in">int</span> Int = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h3 id="Dart-常量定义"><a href="#Dart-常量定义" class="headerlink" title="Dart 常量定义"></a>Dart 常量定义</h3><ul><li>const</li><li>final</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NAME = <span class="string">'nike'</span>;</span><br><span class="line"><span class="keyword">final</span> ID = <span class="string">'12'</span>;</span><br></pre></td></tr></table></figure><h3 id="Dart-const-与-final-的区别"><a href="#Dart-const-与-final-的区别" class="headerlink" title="Dart const 与 final 的区别"></a>Dart <code>const</code> 与 <code>final</code> 的区别</h3><h3 id="Dart-的吗，命名规则"><a href="#Dart-的吗，命名规则" class="headerlink" title="Dart 的吗，命名规则"></a>Dart 的吗，命名规则</h3><ul><li>1、变量名必须由数字、字母、下划线和美元符号（$）组成</li><li>2、标识符开头不能是数字</li><li>3、标识符不能是保留字和关键字</li><li>4、变量的名称是区分大小写的</li><li>5、标识符（变量的名称）一定要见名知意：变量名建议是名词，方法名建议是动词</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> list = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">123</span>,<span class="number">123</span>];</span><br><span class="line"></span><br><span class="line">list.forEach((value) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;程序主入口&quot;&gt;&lt;a href=&quot;#程序主入口&quot; class=&quot;headerlink&quot; title=&quot;程序主入口&quot;&gt;&lt;/a&gt;程序主入口&lt;/h3&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="Dart" scheme="https://18600917746.github.io/categories/Dart/"/>
    
    
      <category term="Dart" scheme="https://18600917746.github.io/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>hello-jsSkill</title>
    <link href="https://18600917746.github.io/2019/06/06/hello-jsSkill/"/>
    <id>https://18600917746.github.io/2019/06/06/hello-jsSkill/</id>
    <published>2019-06-06T02:44:30.000Z</published>
    <updated>2019-06-06T03:24:23.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、获取两个数组的交集"><a href="#1、获取两个数组的交集" class="headerlink" title="1、获取两个数组的交集"></a>1、获取两个数组的交集</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]; </span><br><span class="line"><span class="keyword">var</span> list2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> intersection = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(b);</span><br><span class="line">  <span class="keyword">return</span> a.filter(<span class="function"><span class="params">x</span> =&gt;</span> s.has(x));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">intersection(list1,list2);</span><br></pre></td></tr></table></figure><h3 id="2、替换手机号码中间4位为"><a href="#2、替换手机号码中间4位为" class="headerlink" title="2、替换手机号码中间4位为 ****"></a>2、替换手机号码中间4位为 ****</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> protectPhone = <span class="function">(<span class="params">phone</span>)=&gt;</span> phone.replace(<span class="regexp">/(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)/</span>, <span class="string">'$1****$2'</span>);</span><br><span class="line"></span><br><span class="line">protectPhone(<span class="string">'18600910010'</span>);</span><br></pre></td></tr></table></figure><h3 id="3、对象数组指定-key-排序"><a href="#3、对象数组指定-key-排序" class="headerlink" title="3、对象数组指定 key 排序"></a>3、对象数组指定 <code>key</code> 排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [&#123;</span><br><span class="line">    name:<span class="string">'n1'</span>,</span><br><span class="line">    id:<span class="number">1</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    name:<span class="string">'n2'</span>,</span><br><span class="line">    id:<span class="number">2</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objSort=<span class="function">(<span class="params">key,sortType</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">a,b</span>)=&gt;</span> sortType ? a[key] - b[key] : b[key] - a[key];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">list.sort(objSort(<span class="string">'name'</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、获取两个数组的交集&quot;&gt;&lt;a href=&quot;#1、获取两个数组的交集&quot; class=&quot;headerlink&quot; title=&quot;1、获取两个数组的交集&quot;&gt;&lt;/a&gt;1、获取两个数组的交集&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Js" scheme="https://18600917746.github.io/categories/%E5%89%8D%E7%AB%AF/Js/"/>
    
    
      <category term="Js片段" scheme="https://18600917746.github.io/tags/Js%E7%89%87%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>hello-flutter-SharedPreference</title>
    <link href="https://18600917746.github.io/2019/05/31/hello-flutter-SharedPreference/"/>
    <id>https://18600917746.github.io/2019/05/31/hello-flutter-SharedPreference/</id>
    <published>2019-05-31T07:53:10.000Z</published>
    <updated>2019-05-31T09:20:17.691Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shared-preferences-dart-第三方组件"><a href="#shared-preferences-dart-第三方组件" class="headerlink" title="shared_preferences.dart 第三方组件"></a>shared_preferences.dart 第三方组件</h3><ul><li>shared_preferences.dart 官方开源的轻量级数据存储库，并且屏蔽了 Android 和 iOS 平台上使用 K-V 型数据的差异</li></ul><h3 id="使用-shared-preferences-dart-前需要添加配置并更新依赖："><a href="#使用-shared-preferences-dart-前需要添加配置并更新依赖：" class="headerlink" title="使用 shared_preferences.dart 前需要添加配置并更新依赖："></a>使用 shared_preferences.dart 前需要添加配置并更新依赖：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">shared_preferences:</span> <span class="string">^0.5.1+1</span></span><br></pre></td></tr></table></figure><h3 id="然后，在需要使用该库的地方引入该库："><a href="#然后，在需要使用该库的地方引入该库：" class="headerlink" title="然后，在需要使用该库的地方引入该库："></a>然后，在需要使用该库的地方引入该库：</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:shared_preferences/shared_preferences.dart'</span>;</span><br></pre></td></tr></table></figure><p>###<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sharedPreferences = <span class="keyword">await</span> SharedPreferences.getInstance();</span><br></pre></td></tr></table></figure></p><h3 id="读写数据"><a href="#读写数据" class="headerlink" title="读写数据"></a>读写数据</h3><blockquote><p>获取到 SharedPreferences 对象之后，我们可以通过一系列的 get 和 set 方法读写数据。目前 shared_preferences.dart 库支持的数据类型有：</p></blockquote><ul><li><code>bool</code>：布尔型数据，对应 <code>getBool</code> 和 <code>setBool</code> 两个方法</li><li><code>int</code>：<code>int</code> 型数据，对应 <code>getInt</code> 和 <code>setInt</code> 两个方法</li><li><code>double</code>：<code>double</code> 型数据，对应 <code>getDouble</code> 和 <code>setDouble</code> 两个方法</li><li><code>String</code>：<code>String</code> 型数据，对应 <code>getString</code> 和 <code>setString</code> 两个方法</li><li><code>List&lt;String&gt;</code>：<code>List&lt;String&gt;</code> 型数据，对用 <code>getStringList</code> 和 <code>setStringList</code> 两个方法</li></ul><h3 id="写入数据的示例："><a href="#写入数据的示例：" class="headerlink" title="写入数据的示例："></a>写入数据的示例：</h3><ul><li>写入数据需要使用 await </li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> sharedPreferences.setString(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br></pre></td></tr></table></figure><h3 id="下面是读取数据的示例："><a href="#下面是读取数据的示例：" class="headerlink" title="下面是读取数据的示例："></a>下面是读取数据的示例：</h3><ul><li>读取操作并不需要使用 await。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> result = sharedPreferences.getString(<span class="string">"key"</span>);</span><br></pre></td></tr></table></figure><h3 id="清空数据"><a href="#清空数据" class="headerlink" title="清空数据"></a>清空数据</h3><ul><li>SharedPreferences 中提供了 remove 方法用来删除特定 key 的数据，以及 clear 方法用于删除所有的数据:</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> sharedPreferences.remove(<span class="string">"key"</span>);</span><br><span class="line"><span class="keyword">await</span> sharedPreferences.clear();</span><br></pre></td></tr></table></figure><h3 id="问题处理一"><a href="#问题处理一" class="headerlink" title="问题处理一"></a>问题处理一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.MissingPluginException(No implementation found for method getAll on channel plugins.flutter.io/shared_preferences)</span><br></pre></td></tr></table></figure><ul><li>也就是说，在你测试代码使用shared_preferences之前，调用一下</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences.setMockInitialValues(&#123;&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shared-preferences-dart-第三方组件&quot;&gt;&lt;a href=&quot;#shared-preferences-dart-第三方组件&quot; class=&quot;headerlink&quot; title=&quot;shared_preferences.dart 第三方组件&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="App" scheme="https://18600917746.github.io/categories/App/"/>
    
      <category term="Flutter" scheme="https://18600917746.github.io/categories/App/Flutter/"/>
    
      <category term="SharedPreference" scheme="https://18600917746.github.io/categories/App/Flutter/SharedPreference/"/>
    
    
      <category term="App" scheme="https://18600917746.github.io/tags/App/"/>
    
      <category term="Flutter" scheme="https://18600917746.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>hello-flutter-http</title>
    <link href="https://18600917746.github.io/2019/05/30/hello-flutter-http/"/>
    <id>https://18600917746.github.io/2019/05/30/hello-flutter-http/</id>
    <published>2019-05-30T09:46:00.000Z</published>
    <updated>2019-06-06T09:22:39.686Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h3><p><a href="https://pub.dev/" target="_blank" rel="noopener">https://pub.dev/</a></p><h3 id="快速生成实体类："><a href="#快速生成实体类：" class="headerlink" title="快速生成实体类："></a>快速生成实体类：</h3><p><a href="https://app.quicktype.io/" target="_blank" rel="noopener">https://app.quicktype.io/</a></p><h3 id="http-http-dart"><a href="#http-http-dart" class="headerlink" title="http/http.dart"></a>http/http.dart</h3><blockquote><p>package:http/http.dart 是一个开源的基于 Flutter 的网络请求框架。</p></blockquote><ul><li>使用 http/http.dart 库之前，我们需要先在 pubspec.yaml 文件中添加改库的依赖：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  http:</span> <span class="string">^0.12.0+1</span></span><br></pre></td></tr></table></figure><ul><li>然后在项目的根目录使用如下命令安装该库：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">flutter</span> <span class="string">packages</span> <span class="string">get</span></span><br></pre></td></tr></table></figure><ul><li>最后，在项目中需要使用的地方引入该库：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:http/http.dart'</span>;</span><br></pre></td></tr></table></figure><ul><li>或者使用别名的引用方式：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:http/http.dart'</span> <span class="keyword">as</span> http;</span><br></pre></td></tr></table></figure><h3 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a><code>get</code> 请求</h3><ul><li>使用 <code>http/http.dart</code> 发送 <code>GET</code> 请求的实例代码如下：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span> <span class="keyword">as</span> convert;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:http/http.dart'</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line">httpRequestGet() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'http://tj.nineton.cn/Heart/index/all?city=CHSH000000&amp;language=zh-chs'</span>;</span><br><span class="line">  http.Response response = <span class="keyword">await</span> http.<span class="keyword">get</span>(url);</span><br><span class="line">  <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> jsonResponse = convert.jsonDecode(response.body);</span><br><span class="line">    <span class="keyword">var</span> itemCount = jsonResponse[<span class="string">'totalItems'</span>];</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Number of books about http: <span class="subst">$itemCount</span>."</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Request failed with status: <span class="subst">$&#123;response.statusCode&#125;</span>."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>或者使用如下方式：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span> <span class="keyword">as</span> convert;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:http/http.dart'</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line">httpRequestGet() &#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'http://tj.nineton.cn/Heart/index/all?city=CHSH000000&amp;language=zh-chs'</span>;</span><br><span class="line">  http.Client().<span class="keyword">get</span>(url).then((http.Response response) &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> jsonResponse = convert.jsonDecode(response.body);</span><br><span class="line">      <span class="keyword">var</span> itemCount = jsonResponse[<span class="string">'totalItems'</span>];</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"Number of books about http: <span class="subst">$itemCount</span>."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a><code>POST</code> 请求</h3><ul><li>与 <code>GET</code> 请求不同的是，<code>POST</code> 请求需要将数据写入到 <code>body</code> 里面：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span> <span class="keyword">as</span> convert;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:http/http.dart'</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line">httpRequestPost() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">"request_url"</span>;</span><br><span class="line">  <span class="keyword">var</span> params = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line">  params[<span class="string">'param_1'</span>] = <span class="string">"value_1"</span>;</span><br><span class="line">  params[<span class="string">'param_2'</span>] = <span class="string">"value_2"</span>;</span><br><span class="line">  params[<span class="string">'param_3'</span>] = <span class="string">"value_3"</span>;</span><br><span class="line">  <span class="keyword">var</span> client = http.Client();</span><br><span class="line">  http.Response response = <span class="keyword">await</span> client.post(url, body: params);</span><br><span class="line">  <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> responseMessage = response.body;</span><br><span class="line">    <span class="built_in">print</span>(responseMessage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同样的，上述请求也可以使用如下代码实现：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> <span class="string">'dart:convert'</span> <span class="keyword">as</span> convert;</span><br><span class="line"> <span class="keyword">import</span> <span class="string">'package:http/http.dart'</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line">httpRequestPost() &#123;</span><br><span class="line">   <span class="keyword">var</span> url = <span class="string">"request_url"</span>;</span><br><span class="line">   <span class="keyword">var</span> params = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line">   params[<span class="string">'param_1'</span>] = <span class="string">"value_1"</span>;</span><br><span class="line">   params[<span class="string">'param_2'</span>] = <span class="string">"value_2"</span>;</span><br><span class="line">   params[<span class="string">'param_3'</span>] = <span class="string">"value_3"</span>;</span><br><span class="line">   http.Client().post(url, body: params).then((http.Response response) &#123;</span><br><span class="line">     <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> responseMessage = response.body;</span><br><span class="line">       <span class="built_in">print</span>(responseMessage);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="重要的事情放在最后面，http-一般使用第三方工具库-Dio"><a href="#重要的事情放在最后面，http-一般使用第三方工具库-Dio" class="headerlink" title="重要的事情放在最后面，http 一般使用第三方工具库 Dio"></a>重要的事情放在最后面，<code>http</code> 一般使用第三方工具库 <code>Dio</code></h2><p><a href="https://github.com/flutterchina/dio" target="_blank" rel="noopener">Dio</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用第三方库&quot;&gt;&lt;a href=&quot;#使用第三方库&quot; class=&quot;headerlink&quot; title=&quot;使用第三方库&quot;&gt;&lt;/a&gt;使用第三方库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://pub.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
      <category term="App" scheme="https://18600917746.github.io/categories/App/"/>
    
      <category term="Flutter" scheme="https://18600917746.github.io/categories/App/Flutter/"/>
    
      <category term="Http" scheme="https://18600917746.github.io/categories/App/Flutter/Http/"/>
    
    
      <category term="App" scheme="https://18600917746.github.io/tags/App/"/>
    
      <category term="Flutter" scheme="https://18600917746.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>hello-flutter-routes</title>
    <link href="https://18600917746.github.io/2019/05/30/hello-flutter-routes/"/>
    <id>https://18600917746.github.io/2019/05/30/hello-flutter-routes/</id>
    <published>2019-05-30T06:55:26.000Z</published>
    <updated>2019-06-06T09:25:22.838Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Navigator提供了操作-Routes-的两种方法：-Navigator-push-和-Navigator-pop。"><a href="#Navigator提供了操作-Routes-的两种方法：-Navigator-push-和-Navigator-pop。" class="headerlink" title="Navigator提供了操作 Routes 的两种方法： Navigator.push 和 Navigator.pop。"></a>Navigator提供了操作 Routes 的两种方法： Navigator.push 和 Navigator.pop。</h3><ul><li>Navigator.pushNamed<ul><li>使用 <code>Navigator.pushNamed</code> 方法的 <code>arguments</code> 来传递参数</li><li>使用 <code>ModalRoute</code> 接收数据<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.pushNamed(context, <span class="string">'/Citys'</span>,arguments: curCity);</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ModalRoute.of(context).settings.arguments</span><br></pre></td></tr></table></figure><ul><li>Navigator.pop</li></ul><h3 id="在-Flutter-中获取-Navigator-的实例"><a href="#在-Flutter-中获取-Navigator-的实例" class="headerlink" title="在 Flutter 中获取 Navigator 的实例"></a>在 Flutter 中获取 Navigator 的实例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context);</span><br></pre></td></tr></table></figure><h3 id="路由数据传递"><a href="#路由数据传递" class="headerlink" title="路由数据传递"></a>路由数据传递</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InheritedWidget</span><br></pre></td></tr></table></figure><h2 id="重要的事情放在最后面，路由管理一般使用第三方库-FLURO"><a href="#重要的事情放在最后面，路由管理一般使用第三方库-FLURO" class="headerlink" title="重要的事情放在最后面，路由管理一般使用第三方库 FLURO"></a>重要的事情放在最后面，路由管理一般使用第三方库 <code>FLURO</code></h2><p><a href="https://github.com/theyakka/fluro" target="_blank" rel="noopener">FLURO</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Navigator提供了操作-Routes-的两种方法：-Navigator-push-和-Navigator-pop。&quot;&gt;&lt;a href=&quot;#Navigator提供了操作-Routes-的两种方法：-Navigator-push-和-Navigator-pop。
      
    
    </summary>
    
      <category term="App" scheme="https://18600917746.github.io/categories/App/"/>
    
      <category term="Flutter" scheme="https://18600917746.github.io/categories/App/Flutter/"/>
    
      <category term="Routes" scheme="https://18600917746.github.io/categories/App/Flutter/Routes/"/>
    
    
      <category term="App" scheme="https://18600917746.github.io/tags/App/"/>
    
      <category term="Flutter" scheme="https://18600917746.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>hello-flutter-icon</title>
    <link href="https://18600917746.github.io/2019/05/24/hello-flutter-icon/"/>
    <id>https://18600917746.github.io/2019/05/24/hello-flutter-icon/</id>
    <published>2019-05-24T08:12:51.000Z</published>
    <updated>2019-05-24T08:14:32.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第三方-icon-使用"><a href="#第三方-icon-使用" class="headerlink" title="第三方 icon 使用"></a>第三方 <code>icon</code> 使用</h2><p><a href="http://fluttericon.com/" target="_blank" rel="noopener">fluttericon</a></p><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第三方-icon-使用&quot;&gt;&lt;a href=&quot;#第三方-icon-使用&quot; class=&quot;headerlink&quot; title=&quot;第三方 icon 使用&quot;&gt;&lt;/a&gt;第三方 &lt;code&gt;icon&lt;/code&gt; 使用&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://flutt
      
    
    </summary>
    
      <category term="App" scheme="https://18600917746.github.io/categories/App/"/>
    
      <category term="Flutter" scheme="https://18600917746.github.io/categories/App/Flutter/"/>
    
      <category term="Icon" scheme="https://18600917746.github.io/categories/App/Flutter/Icon/"/>
    
    
      <category term="App" scheme="https://18600917746.github.io/tags/App/"/>
    
      <category term="Flutter" scheme="https://18600917746.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>hello-小程序</title>
    <link href="https://18600917746.github.io/2019/05/23/hello-%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>https://18600917746.github.io/2019/05/23/hello-小程序/</id>
    <published>2019-05-23T07:35:43.000Z</published>
    <updated>2019-05-23T09:12:23.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原生走一波"><a href="#原生走一波" class="headerlink" title="原生走一波"></a>原生走一波</h3><blockquote><ol><li>安装开发工具</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>【测试号】创建项目</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原生走一波&quot;&gt;&lt;a href=&quot;#原生走一波&quot; class=&quot;headerlink&quot; title=&quot;原生走一波&quot;&gt;&lt;/a&gt;原生走一波&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;安装开发工具&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figure
      
    
    </summary>
    
      <category term="小程序" scheme="https://18600917746.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="原生" scheme="https://18600917746.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%8E%9F%E7%94%9F/"/>
    
    
      <category term="小程序" scheme="https://18600917746.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>hello-cordova-platforms</title>
    <link href="https://18600917746.github.io/2019/05/16/hello-cordova-platforms/"/>
    <id>https://18600917746.github.io/2019/05/16/hello-cordova-platforms/</id>
    <published>2019-05-16T03:18:11.000Z</published>
    <updated>2019-05-16T03:38:30.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看本机可安装的平台"><a href="#查看本机可安装的平台" class="headerlink" title="查看本机可安装的平台"></a>查看本机可安装的平台</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova platforms list</span><br></pre></td></tr></table></figure><h3 id="查看安装平台的先决条件"><a href="#查看安装平台的先决条件" class="headerlink" title="查看安装平台的先决条件"></a>查看安装平台的先决条件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova requirements</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查看本机可安装的平台&quot;&gt;&lt;a href=&quot;#查看本机可安装的平台&quot; class=&quot;headerlink&quot; title=&quot;查看本机可安装的平台&quot;&gt;&lt;/a&gt;查看本机可安装的平台&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="App" scheme="https://18600917746.github.io/categories/App/"/>
    
      <category term="Cordova" scheme="https://18600917746.github.io/categories/App/Cordova/"/>
    
      <category term="Platforms" scheme="https://18600917746.github.io/categories/App/Cordova/Platforms/"/>
    
    
      <category term="App" scheme="https://18600917746.github.io/tags/App/"/>
    
      <category term="Cordova" scheme="https://18600917746.github.io/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>hello-cordova-plugin</title>
    <link href="https://18600917746.github.io/2019/05/16/hello-cordova-plugin/"/>
    <id>https://18600917746.github.io/2019/05/16/hello-cordova-plugin/</id>
    <published>2019-05-16T01:39:31.000Z</published>
    <updated>2019-05-16T07:04:58.549Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><blockquote><p>cordova-plugin-splashscreen  启动图+app图标</p></blockquote><ul><li><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add cordova-plugin-splashscreen</span><br></pre></td></tr></table></figure></li><li><p>基本配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">"android"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">density</span>=<span class="string">"ldpi"</span> <span class="attr">src</span>=<span class="string">"res/icon/android/drawable-ldpi/icon.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">density</span>=<span class="string">"mdpi"</span> <span class="attr">src</span>=<span class="string">"res/icon/android/drawable-mdpi/icon.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">density</span>=<span class="string">"hdpi"</span> <span class="attr">src</span>=<span class="string">"res/icon/android/drawable-hdpi/icon.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">density</span>=<span class="string">"xhdpi"</span> <span class="attr">src</span>=<span class="string">"res/icon/android/drawable-xhdpi/icon.png"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">density</span>=<span class="string">"xxhdpi"</span> <span class="attr">src</span>=<span class="string">"res/icon/android/drawable-xxhdpi/icon.png"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以下是欢迎页面，可根据需要进行添加 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"land-hdpi"</span> <span class="attr">src</span>=<span class="string">"res/screen/android/splash-land-hdpi.png"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"land-ldpi"</span> <span class="attr">src</span>=<span class="string">"res/screen/android/splash-land-ldpi.png"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"land-mdpi"</span> <span class="attr">src</span>=<span class="string">"res/screen/android/splash-land-mdpi.png"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"land-xhdpi"</span> <span class="attr">src</span>=<span class="string">"res/screen/android/splash-land-xhdpi.png"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"port-hdpi"</span> <span class="attr">src</span>=<span class="string">"res/screen/android/splash-port-hdpi.png"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"port-ldpi"</span> <span class="attr">src</span>=<span class="string">"res/screen/android/splash-port-ldpi.png"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"port-mdpi"</span> <span class="attr">src</span>=<span class="string">"res/screen/android/splash-port-mdpi.png"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">density</span>=<span class="string">"port-xhdpi"</span> <span class="attr">src</span>=<span class="string">"res/screen/android/splash-port-xhdpi.png"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">platform</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">"ios"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- iOS 8.0+ --&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- iPhone 6 Plus  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-60@3x.png"</span> <span class="attr">width</span>=<span class="string">"180"</span> <span class="attr">height</span>=<span class="string">"180"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- iOS 7.0+ --&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- iPhone / iPod Touch  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-60.png"</span> <span class="attr">width</span>=<span class="string">"60"</span> <span class="attr">height</span>=<span class="string">"60"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-60@2x.png"</span> <span class="attr">width</span>=<span class="string">"120"</span> <span class="attr">height</span>=<span class="string">"120"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- iPad --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-76.png"</span> <span class="attr">width</span>=<span class="string">"76"</span> <span class="attr">height</span>=<span class="string">"76"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-76@2x.png"</span> <span class="attr">width</span>=<span class="string">"152"</span> <span class="attr">height</span>=<span class="string">"152"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- iOS 6.1 --&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- Spotlight Icon --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-40.png"</span> <span class="attr">width</span>=<span class="string">"40"</span> <span class="attr">height</span>=<span class="string">"40"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-40@2x.png"</span> <span class="attr">width</span>=<span class="string">"80"</span> <span class="attr">height</span>=<span class="string">"80"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- iPhone / iPod Touch --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon.png"</span> <span class="attr">width</span>=<span class="string">"57"</span> <span class="attr">height</span>=<span class="string">"57"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon@2x.png"</span> <span class="attr">width</span>=<span class="string">"114"</span> <span class="attr">height</span>=<span class="string">"114"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- iPad --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-72.png"</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-72@2x.png"</span> <span class="attr">width</span>=<span class="string">"144"</span> <span class="attr">height</span>=<span class="string">"144"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- iPhone Spotlight and Settings Icon --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-small.png"</span> <span class="attr">width</span>=<span class="string">"29"</span> <span class="attr">height</span>=<span class="string">"29"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-small@2x.png"</span> <span class="attr">width</span>=<span class="string">"58"</span> <span class="attr">height</span>=<span class="string">"58"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- iPad Spotlight and Settings Icon --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-50.png"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">"res/icon/ios/icon-50@2x.png"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 以下是欢迎页面，可根据需要进行添加 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">src</span>=<span class="string">"res/screen/ios/Default~iphone.png"</span> <span class="attr">width</span>=<span class="string">"320"</span> <span class="attr">height</span>=<span class="string">"480"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">src</span>=<span class="string">"res/screen/ios/Default@2x~iphone.png"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"960"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">src</span>=<span class="string">"res/screen/ios/Default-Portrait~ipad.png"</span> <span class="attr">width</span>=<span class="string">"768"</span> <span class="attr">height</span>=<span class="string">"1024"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">src</span>=<span class="string">"res/screen/ios/Default-Portrait@2x~ipad.png"</span> <span class="attr">width</span>=<span class="string">"1536"</span> <span class="attr">height</span>=<span class="string">"2048"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">src</span>=<span class="string">"res/screen/ios/Default-Landscape~ipad.png"</span> <span class="attr">width</span>=<span class="string">"1024"</span> <span class="attr">height</span>=<span class="string">"768"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">src</span>=<span class="string">"res/screen/ios/Default-Landscape@2x~ipad.png"</span> <span class="attr">width</span>=<span class="string">"2048"</span> <span class="attr">height</span>=<span class="string">"1536"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">src</span>=<span class="string">"res/screen/ios/Default-568h@2x~iphone.png"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"1136"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">src</span>=<span class="string">"res/screen/ios/Default-667h.png"</span> <span class="attr">width</span>=<span class="string">"750"</span> <span class="attr">height</span>=<span class="string">"1334"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">src</span>=<span class="string">"res/screen/ios/Default-736h.png"</span> <span class="attr">width</span>=<span class="string">"1242"</span> <span class="attr">height</span>=<span class="string">"2208"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">splash</span> <span class="attr">src</span>=<span class="string">"res/screen/ios/Default-Landscape-736h.png"</span> <span class="attr">width</span>=<span class="string">"2208"</span> <span class="attr">height</span>=<span class="string">"1242"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">platform</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>其他配置</p><ul><li><p>自动隐藏启动页面AutoHideSplashScreen（默认为：true）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span>=<span class="string">"AutoHideSplashScreen"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>显示启动页面的时间长度SplashScreenDelay(默认为：3000)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span>=<span class="string">"SplashScreenDelay"</span> <span class="attr">value</span>=<span class="string">"3000"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>若想禁用启动页面，可设置为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span>=<span class="string">"SplashScreenDelay"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果是iOS平台上想禁止启动页面，还需要添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span>=<span class="string">"FadeSplashScreenDuration"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动页面淡入淡出的效果</p><ul><li><p>是否显示淡入淡出效果FadeSplashScreen(默认为：true)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span>=<span class="string">"FadeSplashScreen"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>淡入淡出效果的执行时间长度FadeSplashScreenDuration(默认为：500)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span>=<span class="string">"FadeSplashScreenDuration"</span> <span class="attr">value</span>=<span class="string">"750"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动页面是否允许旋转（默认为：true）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span>=<span class="string">"ShowSplashScreenSpinner"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>插件还可以通过js代码调用，提供有以下两个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">navigator.splashscreen.hide();<span class="comment">//隐藏启动页面</span></span><br><span class="line"> </span><br><span class="line">navigator.splashscreen.show();<span class="comment">//显示启动页面</span></span><br></pre></td></tr></table></figure></li><li><p>图标文件夹内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">projectRoot</span><br><span class="line">    hooks</span><br><span class="line">    platforms</span><br><span class="line">    plugins</span><br><span class="line">    www</span><br><span class="line">        css</span><br><span class="line">        img</span><br><span class="line">        js</span><br><span class="line">    res</span><br><span class="line">        screen</span><br><span class="line">            android</span><br><span class="line">            ios</span><br><span class="line">        icon</span><br><span class="line">            android</span><br><span class="line">            ios</span><br></pre></td></tr></table></figure></li><li><p>安卓</p><ul><li><p>安卓图标具体规格如下（存放目录：res/icon/android/）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">36*36    drawable-ldpi/icon.png</span><br><span class="line">48*48    drawable-mdpi/icon.png</span><br><span class="line">72*72    drawable-hdpi/icon.png</span><br><span class="line">96*96    drawable-xhdpi/icon.png</span><br><span class="line">144*144  drawable-xxhdpi/icon.png</span><br></pre></td></tr></table></figure></li><li><p>iOS图标具体规格如下（存放目录：res/icon/ios/）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">57*57   icon.png</span><br><span class="line">114*114 icon@2x.png</span><br><span class="line">29*29   icon-small.png</span><br><span class="line">58*58   icon-small@2x.png</span><br><span class="line">40*40   icon-40.png</span><br><span class="line">80*80   icon-40@2x.png</span><br><span class="line">50*50   icon-50.png</span><br><span class="line">100*100 icon-50@2x.png</span><br><span class="line">60*60   icon-60.png</span><br><span class="line">120*120 icon-60@2x.png</span><br><span class="line">180*180 icon-60@3x.png</span><br><span class="line">72*72   icon-72.png</span><br><span class="line">144*144 icon-72@2x.png</span><br><span class="line">76*76   icon-76.png</span><br><span class="line">152*152 icon-76@2x.png</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ios</p><ul><li><p>ios图标具体规格如下（存放目录：res/icon/ios/）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">960*720 splash-land-xhdpi.png</span><br><span class="line">640*480 splash-land-hdpi.png</span><br><span class="line">470*320 splash-land-mdpi.png</span><br><span class="line">426*320 splash-land-ldpi.png</span><br><span class="line">720*960 splash-port-xhdpi.png</span><br><span class="line">480*640 splash-port-hdpi.png</span><br><span class="line">320*470 splash-port-mdpi.png</span><br><span class="line">320*426 splash-port-ldpi.png</span><br></pre></td></tr></table></figure></li><li><p>iOS启动画面具体规格如下（存放目录：res/screen/ios/）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">320*480     Default~iphone.png</span><br><span class="line">640*960     Default@2x~iphone.png</span><br><span class="line">768*1024    Default-Portrait~ipad.png</span><br><span class="line">1536*2048   Default-Portrait@2x~ipad.png</span><br><span class="line">1024*768    Default-Landscape~ipad.png</span><br><span class="line">2048*1536   Default-Landscape@2x~ipad.png</span><br><span class="line">640*1136    Default-568h@2x~iphone.png</span><br><span class="line">750*1334    Default-667h.png</span><br><span class="line">1242*2208   Default-736h.png</span><br><span class="line">2208*1242   Default-Landscape-736h.png</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><blockquote><p>cordova-plugin-crosswalk-webview  webview</p></blockquote><ul><li>安装插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add cordova-plugin-crosswalk-webview</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>phonegap-plugin-barcodescanner  二维码扫描 </p></blockquote><ul><li>安装插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add phonegap-plugin-barcodescanner</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot; class=&quot;headerlink&quot; title=&quot;插件&quot;&gt;&lt;/a&gt;插件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;cordova-plugin-splashscreen  启动图+app图标&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="App" scheme="https://18600917746.github.io/categories/App/"/>
    
      <category term="Cordova" scheme="https://18600917746.github.io/categories/App/Cordova/"/>
    
      <category term="Plugin" scheme="https://18600917746.github.io/categories/App/Cordova/Plugin/"/>
    
    
      <category term="App" scheme="https://18600917746.github.io/tags/App/"/>
    
      <category term="Cordova" scheme="https://18600917746.github.io/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>搭建svn与git服务器</title>
    <link href="https://18600917746.github.io/2019/04/17/%E6%90%AD%E5%BB%BAsvn%E4%B8%8Egit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://18600917746.github.io/2019/04/17/搭建svn与git服务器/</id>
    <published>2019-04-17T13:17:37.000Z</published>
    <updated>2019-04-17T14:16:40.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装-Svn"><a href="#安装-Svn" class="headerlink" title="安装 Svn"></a>安装 Svn</h3><ul><li>安装 svn 管理工具</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install subversion</span><br></pre></td></tr></table></figure><ul><li>创建一个文件夹作为 svn 代码仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir svn</span><br></pre></td></tr></table></figure><ul><li>1、初始化仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnadmin create test1</span><br></pre></td></tr></table></figure><ul><li>2、创建用户密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi test1/conf/passwd</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsername=password</span><br></pre></td></tr></table></figure><ul><li>3、修改 svn 服务文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi test1/conf/svnserve.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 是否允许匿名访问</span><br><span class="line">anon-access = none</span><br><span class="line">// 授权以后是否可以读写</span><br><span class="line">auth-access = write</span><br><span class="line">// </span><br><span class="line">password-db = passwd</span><br><span class="line">// 开启可能出错</span><br><span class="line">authz = authz</span><br></pre></td></tr></table></figure><ul><li>4、启动 svn 服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 检测是否已经开启</span><br><span class="line">ps -ef | greep  svn</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnserve -d -r 仓库地址</span><br></pre></td></tr></table></figure><h3 id="git-服务器安装"><a href="#git-服务器安装" class="headerlink" title="git 服务器安装"></a>git 服务器安装</h3><ul><li>安装 git 管理工具</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y</span><br></pre></td></tr></table></figure><ul><li>创建一个文件夹作为 git 代码仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir git</span><br><span class="line">cd git/</span><br></pre></td></tr></table></figure><ul><li>1、初始化仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init -- bare test.get</span><br></pre></td></tr></table></figure><ul><li>2、添加一个系统用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd cheng</span><br></pre></td></tr></table></figure><ul><li>3、创建用户名密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd cheng</span><br></pre></td></tr></table></figure><ul><li>4、修改目录的所有者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R  xxx:xxx test.get</span><br></pre></td></tr></table></figure><ul><li>5、本地使用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装-Svn&quot;&gt;&lt;a href=&quot;#安装-Svn&quot; class=&quot;headerlink&quot; title=&quot;安装 Svn&quot;&gt;&lt;/a&gt;安装 Svn&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;安装 svn 管理工具&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="茶余饭后" scheme="https://18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
      <category term="jsCode" scheme="https://18600917746.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/jsCode/"/>
    
    
      <category term="Git 服务器" scheme="https://18600917746.github.io/tags/Git-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Svn 服务器" scheme="https://18600917746.github.io/tags/Svn-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>
